# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AwsNativeAccountDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface AwsNativeAccountLogicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Blueprint"
interface Blueprint {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "list of children"
    children: [BlueprintChild!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "status of the last test failover"
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "relic status of the Blueprint"
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    "last test failover"
    lastTestFailover: Failover
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "resource mapping status of the Blueprint"
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "status of the Blueprint"
    status: AppBlueprintStatusEnum!
}

"Blueprint Child"
interface BlueprintChild {
    "boot priority"
    bootPriority: Int!
    "child fid"
    fid: UUID!
}

"A Blueprint failover instance"
interface BlueprintFailoverInstance {
    "blueprint child snappable id"
    snappableId: String!
}

"Blueprint Location"
interface BlueprintLocation {
    "The type of the location"
    type: BlueprintLocationTypeEnum!
}

"A Blueprint"
interface BlueprintNew {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "list of children"
    children: [BlueprintChild!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "archived status of the Blueprint"
    isArchived: Boolean!
    "Status of hydration enablement."
    isHydrationEnabled: Boolean
    "Source Uuid of the last failover."
    lastFailoverSource: String
    "Status of the last failover."
    lastFailoverStatus: BlueprintFailoverStatus!
    "Last failover time."
    lastFailoverTime: DateTime
    "Last local recovery time."
    lastLocalRecoveryTime: DateTime
    "Status of the last test failover."
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Last test failover time."
    lastTestFailoverTime: DateTime
    "Details of the latest failover."
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RPOLagInfo
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "blueprint remote RPO lag info"
    remoteRpoLagInfo: RPOLagInfo
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    "status of the Blueprint"
    status: BlueprintStatusEnum!
    "The target location to which the object failed over"
    targetLocation: BlueprintLocation
    "version of the Blueprint"
    version: Int!
}

interface CassandraKeyspaceDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface CassandraKeyspacePhysicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface CassandraSourceDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface CassandraSourcePhysicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A CDM Managed Hierarchy Object"
interface CdmHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Managed Hierarchy Snappable"
interface CdmHierarchySnappableNew {
    "The ID of the snappable on the Rubrik CDM cluster."
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this snappable originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

"Cloud Account (AWS, Azure etc.) Info"
interface CloudAccount {
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

interface DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

interface FailoverClusterAppDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FailoverClusterAppPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FailoverClusterTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FilesetTemplateDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface FilesetTemplatePhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface GcpNativeProjectDescendantType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface GcpNativeProjectLogicalChildType {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A generic snapshot type"
interface GenericSnapshot {
    "The date of the snapshot."
    date: DateTime!
    "The expirationDate of the snapshot."
    expirationDate: DateTime
    "The id of the snapshot."
    id: UUID!
    "The number of indexing attempts for the snapshot."
    indexingAttempts: Long!
    "Whether or not the snapshot is corrupted."
    isCorrupted: Boolean!
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    "Whether or not the snapshot is indexed."
    isIndexed: Boolean!
    "Whether the snapshot is an on-demand snapshot"
    isOnDemandSnapshot: Boolean!
    "Whether or not the snapshot is unindexable."
    isUnindexable: Boolean!
    "The snappableId of the snapshot."
    snappableId: String!
}

"A Generic Hierarchy Object"
interface HierarchyObject {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Generic Hierarchy Snappable"
interface HierarchySnappable {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostFailoverClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostFailoverClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostShareDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HostSharePhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVSCVMMDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVSCVMMLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVServerDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVServerLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface K8sClusterDescendant {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlAvailabilityGroupLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlInstanceLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasNamespaceDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasNamespaceLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasSystemDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasSystemLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasVolumeDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NasVolumeLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NutanixClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface NutanixClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface O365AppObject {
    "The added time of the O365 app."
    addedAt: DateTime!
    "The id of the O365 app."
    appId: String!
    "The owner of the O365 app (RUBRIK or CUSTOMER)."
    appOwner: String!
    "The type of the O365 app (e.g. ONEDRIVE)"
    appType: String!
    "The authentication status of the app against the subscription"
    isAuthenticated: Boolean!
    "The subscription to which the O365 app is associated."
    subscription: String!
}

interface O365ExchangeObject {
    "The id of the O365 exchange object."
    id: String!
    "The parent folder id of the object (ROOT indicates root folder)."
    parentFolderId: String
}

interface O365OnedriveObject {
    "The name of the folder corresponding to the Teams channel."
    channelFolderName: String
    "The display name of the Teams channel."
    channelName: String
    "The creation time of the onedrive object"
    createTime: DateTime
    "The id of the O365 onedrive object."
    id: String!
    "The modified time of the onedrive object"
    modifiedTime: DateTime
    "The name of the onedrive object"
    name: String
    "The parent folder id of the object (ROOT indicates root folder)."
    parentFolderId: String
    "The size of the onedrive object or its contents in bytes"
    size: Long
}

interface O365OrgDescendant {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface O365SharepointObject {
    "The sharepoint object ID"
    objectId: String!
    "The parent id of the object"
    parentId: String!
    "The title or name of the sharepoint object"
    title: String!
}

interface O365TeamsChannelObject {
    "The id of the Sharepoint folder for the Teams channel."
    folderId: String
    "The name of the Sharepoint folder for the Teams channel."
    folderName: String
    "The id of the Teams channel"
    id: String
    "The display name of the Teams channel."
    name: String
}

interface O365UserDescendant {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface O365UserDescendantMetadata {
    "The object ID."
    id: UUID!
    "The name of the object."
    name: String!
    "The user principal name of the object."
    userPrincipalName: String!
}

interface OracleHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleHostLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleRacLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Polaris Managed Hierarchy Object"
interface PolarisHierarchyObject {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"A Polaris Snappable"
interface PolarisHierarchySnappable {
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

interface ProtectedObjectSummary {
    "The effective sla of the protected object (if defined)."
    effectiveSlaOpt: String
    "The id of the protected object."
    id: String!
    "Whether the protected object is archived."
    isArchived: Boolean!
    "The name of the protected object."
    name: String!
    "The object type of the protected object (if returned)"
    objectType: ManagedObjectType
}

"A Recovery Spec"
interface RecoverySpec {
    "the user provided scripts"
    userData: String
    "recovery spec version"
    version: Long!
}

"A Resource Spec"
interface ResourceSpec {
    "resource spec is archived"
    isArchived: Boolean!
    "Recovery point of the snappable."
    recoveryPointOpt: Long
    "resource spec child snappable id"
    snappableId: String!
    "resource spec child snappable name"
    snappableName: String!
    "resource spec child snapshot id"
    snapshotId: String!
}

interface SapHanaSystemDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface SapHanaSystemPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface SlaDomain {
    "The id of the SLA Domain."
    id: String!
    "The name of the SLA Domain."
    name: String!
    "The version of the SLA Domain."
    version: String
}

"Target Info to be used for archival or replication"
interface Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Target Template to be used for automatic archival group"
interface TargetTemplate {
    "The type of this Target"
    targetType: TargetTypeEnum!
}

interface UdfInstanceDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface UdfInstancePhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereComputeClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereComputeClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereDatacenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereFolderDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereFolderLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereHostDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereResourcePoolDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereResourcePoolPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagCategoryDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagCategoryTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereTagTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VSphereVCenterTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface Value {
    serializedValue: String!
}

interface VcdCatalogDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdCatalogLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdOrgVdcLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface VcdVappLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

interface WindowsClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

union ActivitySeriesGroupByInfo = ActivityObjectType | ActivityStatus | ActivityType | Cluster | ClusterType | TimeRangeWithUnit

union AnomalyResultGroupByInfo = AnomalyStatus | Cluster | Snappable | TimeRangeWithUnit

union CdmSnapshotGroupByInfo = TimeRangeWithUnit

union ClusterGroupByInfo = ClusterType | TimeRangeWithUnit

union ClusterMetricGroupByInfo = TimeRangeWithUnit

union CustomReportGroupByInfo = ReportFocus

union FailoverGroupByInfo = FailoverStatus | FailoverType | LastTestStatus | Source | TargetSite | TimeRangeWithUnit

"Wrapper object for metadata associated with different databases under udf schema."
union InstanceSpecificMetaData = Db2InstanceMetaData

union MissedSnapshotGroupByInfo = TimeRangeWithUnit

union MosaicSnapshotGroupByInfo = TimeRangeWithUnit

union PolarisSnapshotGroupByInfo = TimeRangeWithUnit

union RansomwareResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit

"All the possible chart types."
union ReportChartType = ActivityChart | AnomalyChart | FailoverChart | InfrastructureChart | SnappableChart | SonarContentReportChart | SonarReportChart | TaskDetailChart | TaskSummaryChart | UserAuditChart

"All the possible table types."
union ReportTableType = ActivityTable | AnomalyTable | FailoverTable | InfrastructureTable | SnappableTable | SonarContentReportTable | SonarReportTable | TaskDetailTable | TaskSummaryTable | UserAuditTable

union SnappableGroupByInfo = Cluster | ClusterSlaDomain | ClusterType | ComplianceStatus | ObjectType | ProtectionStatus | TimeRangeWithUnit

union TaskDetailGroupByInfo = Cluster | Status | TaskDetailClusterType | TaskDetailObjectType | TimeRangeWithUnit

union TaskSummaryGroupByInfo = Cluster | ClusterType | GlobalSla | ObjectType | PolarisHierarchySnappableObject | TimeRangeWithUnit

union UpgradeGroupByInfo = ClusterJobStatusType | ClusterType

union UserAuditGroupByInfo = Cluster | ClusterType | TimeRangeWithUnit | UserAuditObjectType | UserAuditStatus | UserAuditType

"Active Directory Groups from Microsoft."
type ADGroup {
    "DisplayName of AD Group."
    displayName: String!
    "Natural ID of AD Group."
    id: String!
}

type ADObject {
    cn: String!
    distinguishedName: String!
    emailAddress: String!
    memberOf: String!
    objectCategory: String!
    objectClass: String!
    objectGuid: String!
    objectSid: String!
    paginationId: Int!
    resolutionType: ResolutionTypeEnum!
}

type ADObjectConnection {
    count: Int!
    edges: [ADObjectEdge!]!
    nodes: [ADObject!]!
    pageInfo: PageInfo!
}

type ADObjectEdge {
    cursor: String!
    node: ADObject!
}

type ASPKey {
    account: String!
    component: ComponentEnum!
    name: String!
    targetId: String!
}

type ASPValue {
    key: ASPKey
    value: String!
}

"additional information about the vcenter object, such as name, version, os type, and api type, only available on clusters 5.1+"
type AboutInformation {
    apiType: String!
    name: String!
    osType: String!
    version: String!
}

type AccessGroup {
    groupId: String!
    groupName: String!
}

type AccessGroupConnection {
    count: Int!
    edges: [AccessGroupEdge!]!
    nodes: [AccessGroup!]!
    pageInfo: PageInfo!
}

type AccessGroupEdge {
    cursor: String!
    node: AccessGroup!
}

type AccessUser {
    activityDelta: Long!
    email: String!
    lastAccessTime: Long!
    numActivities: Long!
    subjectName: String!
    userSid: String!
    username: String!
}

type AccessUserConnection {
    count: Int!
    edges: [AccessUserEdge!]!
    nodes: [AccessUser!]!
    pageInfo: PageInfo!
}

type AccessUserEdge {
    cursor: String!
    node: AccessUser!
}

"Product enabled via Salesforce."
type AccountProduct {
    "Account name for the given product."
    account: String!
    "Date when product expires."
    expirationDate: DateTime!
    "Name of the product - GPS, Sonar, etc."
    name: ProductName!
    "State of the product - Acive, disabled, etc."
    state: ProductState!
    "The type of product - Revenue, Trial, POC."
    type: ProductType!
}

type AccountSetting {
    isEmailNotificationEnabled: Boolean
    isEulaAccepted: Boolean
}

type Activity {
    activityInfo: String
    activitySeries: ActivitySeries!
    clusterId: UUID!
    id: ID!
    message: String!
    objectId: String!
    objectType: ActivityObjectTypeEnum!
    progress: String
    severity: ActivitySeverityEnum!
    status: ActivityStatusEnum!
    time: DateTime!
    type: ActivityTypeEnum!
}

type ActivityChart {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
}

type ActivityConnection {
    count: Int!
    edges: [ActivityEdge!]!
    nodes: [Activity!]!
    pageInfo: PageInfo!
}

type ActivityEdge {
    cursor: String!
    node: Activity!
}

type ActivityObjectType {
    enumValue: ActivityObjectTypeEnum!
}

type ActivityResult {
    accessType: ActivityAccessTypeEnum!
    count: Long!
    countDelta: Long!
}

type ActivitySeries {
    activityConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ActivityConnection!
    activitySeriesId: UUID!
    causeErrorCode: String
    causeErrorMessage: String
    causeErrorReason: String
    causeErrorRemedy: String
    cluster: Cluster
    clusterName: String!
    clusterUuid: UUID!
    failureReason: String
    fid: UUID
    id: Long!
    isCancelable: Boolean
    isPolarisEventSeries: Boolean!
    lastActivityStatus: ActivityStatusEnum!
    lastActivityType: ActivityTypeEnum!
    lastEventAddedAt: DateTime
    lastUpdated: DateTime!
    lastVerifiedAt: DateTime
    location: String!
    objectId: String!
    objectName: String
    objectType: ActivityObjectTypeEnum!
    progress: String
    severity: ActivitySeverityEnum!
    startTime: DateTime
}

type ActivitySeriesConnection {
    count: Int!
    edges: [ActivitySeriesEdge!]!
    nodes: [ActivitySeries!]!
    pageInfo: PageInfo!
}

type ActivitySeriesEdge {
    cursor: String!
    node: ActivitySeries!
}

"Activity series data with groupby info applied to it."
type ActivitySeriesGroupBy {
    "Paginated activity series data."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated
    ): ActivitySeriesConnection!
    "Further provide groupings for the data."
    activitySeriesGroupBy(
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!
    ): [ActivitySeriesGroupBy!]!
    "The data groupby info."
    groupByInfo: ActivitySeriesGroupByInfo!
}

type ActivitySeriesGroupByConnection {
    count: Int!
    edges: [ActivitySeriesGroupByEdge!]!
    nodes: [ActivitySeriesGroupBy!]!
    pageInfo: PageInfo!
}

type ActivitySeriesGroupByEdge {
    cursor: String!
    node: ActivitySeriesGroupBy!
}

type ActivityStatus {
    enumValue: ActivityStatusEnum!
}

type ActivityTable {
    focus: ReportFocusEnum!
    groupBy: [ActivitySeriesGroupByEnum!]
    name: String!
    selectedColumns: [ActivityTableColumnEnum!]!
    sortBy: ActivitySeriesSortByEnum
    sortOrder: SortOrderEnum
}

type ActivityTimelineResult {
    activityResults: [ActivityResult!]!
    day: String!
    topFiles: [FileAccessResult!]!
}

type ActivityTimelineResultConnection {
    count: Int!
    edges: [ActivityTimelineResultEdge!]!
    nodes: [ActivityTimelineResult!]!
    pageInfo: PageInfo!
}

type ActivityTimelineResultEdge {
    cursor: String!
    node: ActivityTimelineResult!
}

type ActivityType {
    enumValue: ActivityTypeEnum!
}

"Response for the request to add IAM user-based AWS cloud accounts."
type AddAwsIamUserBasedCloudAccountReply {
    "Account details for the new cloud account."
    awsAccount: AwsCloudAccount
}

"Response of the operation to add Exocompute Configurations to Azure Cloud Account."
type AddAzureCloudAccountExocomputeConfigurationsResponse {
    "Configuration details of the Exocompute for the Azure Cloud Account."
    configs: [AzureExocomputeConfigDetails!]!
}

"Response of the operation to add an Azure Cloud Account."
type AddAzureCloudAccountResponse {
    "Status of the operation to add Azure Cloud Account."
    status: [AddAzureCloudAccountStatus!]!
    "Tenant ID for the added subscriptions."
    tenantId: String!
}

"Status of the operation to add Azure Cloud Account."
type AddAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Rubrik ID of the Azure Subscription."
    azureSubscriptionRubrikId: String!
    "Error encountered, if any."
    error: String!
}

"Response of the operation to add Azure Cloud Account without OAuth."
type AddAzureCloudAccountWithoutOAuthResponse {
    "Status of the operation to add Azure Cloud Account."
    status: [AddAzureCloudAccountStatus!]!
    "Tenant ID for the added subscriptions."
    tenantId: String!
}

"The mutation response on adding a new Db2 instance."
type AddDb2InstanceReply {
    "Required. Status of the job scheduled to refresh the instance."
    asyncRequestStatus: AsyncRequestStatus
    "The ID of the added Db2 instance."
    id: String!
}

"Add O365 Org response"
type AddO365OrgResponse {
    orgId: String!
    refreshOrgTaskchainId: String!
}

"It contains the reply of Add vm app consistent specs endpoint"
type AddVmAppConsistentSpecsReply {
    failedSnappableIds: [String!]!
    successSnappableIds: [String!]!
}

type AddressBlockV4 {
    cidrBlock: String!
}

"The status of the agent running on the vm"
type AgentStatus {
    agentStatus: AgentConnectStatusEnum!
    disconnectReason: String
}

"Aggregation values calculated across all results prior to pagination."
type AggregatedValues {
    "The highest created file count."
    maxCreatedFileCount: Long!
    "The highest deleted file count."
    maxDeletedFileCount: Long!
    "The highest modified file count."
    maxModifiedFileCount: Long!
    "The highest suspicious file count."
    maxSuspiciousFileCount: Long!
    "The total number of snappable anomalies."
    total: Long!
}

"Amazon Machine Image (AMI) type for exporting an archived EC2 Instance snapshot."
type AmiTypeForAwsNativeArchivedSnapshotExportReply {
    "If amiType is pre-existing, this field will contain the id of the AMI."
    amiId: String!
    "Type of the AMI to be used for export of EC2 instance archived snapshot. This can be an existing AMI, or a runtime-generated AMI or a user-specified AMI."
    amiType: AmiType!
    "Rubrik Id of the aws account which contains the pre-existing AMI."
    awsAccountRubrikId: String!
    "Region where the pre-existing AMI exists."
    regionNativeId: AwsNativeRegionEnum!
}

type Analyzer {
    analyzerType: AnalyzerTypeEnum!
    dictionary: [String!]!
    dictionaryCsv: String!
    id: String!
    name: String!
    regex: String!
}

type AnalyzerAccessUsage {
    analyzer: Analyzer
    count: Int!
    countDelta: Int!
    topFiles: [FileAccessResult!]!
}

type AnalyzerAccessUsageConnection {
    count: Int!
    edges: [AnalyzerAccessUsageEdge!]!
    nodes: [AnalyzerAccessUsage!]!
    pageInfo: PageInfo!
}

type AnalyzerAccessUsageEdge {
    cursor: String!
    node: AnalyzerAccessUsage!
}

type AnalyzerConnection {
    count: Int!
    edges: [AnalyzerEdge!]!
    nodes: [Analyzer!]!
    pageInfo: PageInfo!
}

type AnalyzerEdge {
    cursor: String!
    node: Analyzer!
}

type AnalyzerGroup {
    analyzers: [Analyzer!]!
    groupType: AnalyzerGroupTypeEnum!
    id: String!
    name: String!
}

type AnalyzerGroupConnection {
    count: Int!
    edges: [AnalyzerGroupEdge!]!
    nodes: [AnalyzerGroup!]!
    pageInfo: PageInfo!
}

type AnalyzerGroupEdge {
    cursor: String!
    node: AnalyzerGroup!
}

type AnalyzerGroupResult {
    analyzerGroup: AnalyzerGroup!
    analyzerResults: [AnalyzerResult!]!
    hits: Hits!
}

type AnalyzerMapping {
    analyzerResult: AnalyzerResult!
    groups: [AnalyzerGroup!]!
}

type AnalyzerResult {
    analyzer: Analyzer!
    hits: Hits!
}

type AnalyzerUsage {
    analyzer: Analyzer!
    policies: [ClassificationPolicySummary!]!
}

type AnalyzerUsageConnection {
    count: Int!
    edges: [AnalyzerUsageEdge!]!
    nodes: [AnalyzerUsage!]!
    pageInfo: PageInfo!
}

type AnalyzerUsageEdge {
    cursor: String!
    node: AnalyzerUsage!
}

type AnomalyChart {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupByEnum!]
    name: String!
}

"Anomaly analysis report from lambda service"
type AnomalyResult {
    anomalyProbability: Float!
    bytesCreatedCount: Long
    bytesDeletedCount: Long
    bytesModifiedCount: Long
    bytesNetChangedCount: Long
    cluster: Cluster!
    filesCreatedCount: Long
    filesDeletedCount: Long
    filesModifiedCount: Long
    id: String!
    isAnomaly: Boolean!
    "The location of the object."
    location: String!
    managedId: String!
    objectType: ObjectTypeEnum
    previousSnapshotDate: DateTime!
    previousSnapshotId: String!
    "The ransomware analysis result, including encryption."
    ransomwareResult: RansomwareResult
    snappableFid: UUID!
    snappableId: String!
    snappableName: String
    "The analyzed snapshot."
    snapshot: CdmSnapshot
    snapshotDate: DateTime!
    snapshotFid: UUID!
    snapshotId: String!
    suspiciousFilesCount: Long
}

type AnomalyResultAggregation {
    bytesAdded: Long!
    bytesDeleted: Long!
    bytesModified: Long!
    filesAdded: Long!
    filesDeleted: Long!
    filesModified: Long!
}

type AnomalyResultConnection {
    aggregation: AnomalyResultAggregation!
    count: Int!
    edges: [AnomalyResultEdge!]!
    nodes: [AnomalyResult!]!
    pageInfo: PageInfo!
}

type AnomalyResultEdge {
    cursor: String!
    node: AnomalyResult!
}

"Anomaly result data with groupby info applied to it"
type AnomalyResultGroupBy {
    "Paginated anomaly result data"
    anomalyResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort anomaly results by field"
        sortBy: AnomalyResultSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): AnomalyResultConnection!
    "Further provide groupings for the data."
    anomalyResultGroupBy(
        "group anomaly results by field"
        groupBy: AnomalyResultGroupByEnum!
    ): [AnomalyResultGroupBy!]!
    "Groupby info."
    groupByInfo: AnomalyResultGroupByInfo!
}

type AnomalyResultGroupByConnection {
    count: Int!
    edges: [AnomalyResultGroupByEdge!]!
    nodes: [AnomalyResultGroupBy!]!
    pageInfo: PageInfo!
}

type AnomalyResultGroupByEdge {
    cursor: String!
    node: AnomalyResultGroupBy!
}

type AnomalyStatus {
    isAnomaly: Boolean!
}

type AnomalyTable {
    focus: ReportFocusEnum!
    groupBy: [AnomalyResultGroupByEnum!]
    name: String!
    selectedColumns: [AnomalyTableColumnEnum!]!
    sortBy: AnomalyResultSortByEnum
    sortOrder: SortOrderEnum
}

type AppBlueprintSnapshotCloudImage {
    appImageIds: [String!]!
    imageConverted: Boolean!
    snapshotFid: String!
}

type AppIDForType {
    appId: String!
    appType: String!
}

type AppflowsSummary {
    numBlueprintsReady: Int!
    numBlueprintsWithIssues: Int!
    numBpFailedLastFailover: Int!
    numBpFailedLastTestFailover: Int!
    numBpFailedTestFailoverLastQuarter: Int!
    numBpPassedLastFailover: Int!
    numBpPassedLastTestFailover: Int!
    numDRPlansReady: Int!
    numDRPlansWithIssues: Int!
    numVmwareVmsProtected: Int!
    totalBlueprints: Int!
    totalDRPlans: Int!
    totalVmwareVms: Int!
}

"Connection status for archival group."
type ArchivalGroupConnectionStatus {
    status: ConnectionStatusType!
}

type ArchivalLocation {
    bucket: String
    id: String!
    isActive: Boolean!
    locationType: ArchivalLocationType!
    name: String!
}

type ArchivalSpec {
    archivalTieringSpec: ArchivalTieringSpec
    targetMapping: TargetMapping
    threshold: Int!
    thresholdUnit: RetentionUnitEnum!
}

"Archival tiering specification."
type ArchivalTieringSpec {
    "Cold storage class for tiering."
    coldStorageClass: ColdStorageClass!
    "True when instant tiering enabled."
    isInstantTieringEnabled: Boolean!
    "Minimum accessible duration specified for smart tiering."
    minAccessibleDurationInSeconds: Long!
    "Tier existing snapshots for instant tiering, when true."
    shouldTierExistingSnapshots: Boolean!
}

"A reply of the async download request"
type AsyncDownloadReply {
    "The Id of the job"
    jobId: Long!
    "The reference Id of the job"
    referenceId: String!
}

type AsyncJobStatus {
    "Error message if pre validation failed."
    error: String!
    "Job ID for object if pre validation succeeds for object. If pre validation failed Job ID will be empty and detials will be present in error field."
    jobId: String!
}

type AsyncJobStatusJobError {
    error: String!
    rubrikObjectId: String!
}

type AsyncJobStatusJobId {
    jobId: String!
    rubrikObjectId: String!
}

"""

Supported in v5.0+
"""
type AsyncRequestStatus {
    """

    Supported in v5.0+
    The end time of the request.
    """
    endTime: DateTime
    """

    Supported in v5.0+
    Any errors encountered.
    """
    error: RequestErrorInfo
    """

    Required. Supported in v5.0+
    v5.0: The ID of the request object. Use it to poll the status.
    v5.1+: The ID of the request object used to poll the status.
    """
    id: String!
    """

    Required. Supported in v5.0+
    References to any related objects.
    """
    links: [Link!]!
    """

    Supported in v5.0+
    The ID of the node where the job ran.
    """
    nodeId: String
    """

    Supported in v5.0+
    v5.0: The current progress in terms of percentage of the async request.
    v5.1+: The current percentage progress of the asynchronous request.
    """
    progress: Float
    """

    Supported in v5.0+
    The start time of the request.
    """
    startTime: DateTime
    """

    Required. Supported in v5.0+
    v5.0: Status of the id.
    v5.1+: Status of the ID.
    """
    status: String!
}

type AttachmentSpecForEbsVolume {
    awsNativeEc2InstanceId: String!
    devicePath: String!
    isExcludedFromSnapshot: Boolean!
    isRootVolume: Boolean!
}

type AttachmentSpecForEc2Instance {
    awsNativeEbsVolumeId: String!
    devicePath: String!
    isExcludedFromSnapshot: Boolean!
    isRootVolume: Boolean!
}

"Attachment Specifications for Azure Native Managed Disk."
type AttachmentSpecsForManagedDisk {
    attachedToVmId: String!
    isExcludedFromSnapshot: Boolean!
    isOsDisk: Boolean!
    lun: Int!
}

"Attachment Specifications for Azure Native Virtual Machine."
type AttachmentSpecsForVirtualMachine {
    isExcludedFromSnapshot: Boolean!
    isOsDisk: Boolean!
    lun: Int!
    managedDiskId: String!
}

type AuthorizedOperations {
    id: String!
    operations: [OperationEnum!]!
    snappableHierarchy: SnappableLevelHierarchyTypeEnum
}

"Ldap Authorized Principal"
type AuthorizedPrincipal {
    "ID of the authentication domain."
    authDomainId: String!
    "Name of the authentication domain."
    authDomainName: String!
    "Email address."
    email: String
    "Principal ID"
    id: String!
    "Last login timestamp."
    lastLogin: DateTime
    "Name of the principal."
    name: String!
    "Principal Type."
    principalType: PrincipalTypeEnum!
    roles: [Role!]!
    "TOTP status for a LDAP principal."
    totpStatus: LdapTotpStatus
}

type AuthorizedPrincipalConnection {
    count: Int!
    edges: [AuthorizedPrincipalEdge!]!
    nodes: [AuthorizedPrincipal!]!
    pageInfo: PageInfo!
}

type AuthorizedPrincipalEdge {
    cursor: String!
    node: AuthorizedPrincipal!
}

"AWS Account specific info"
type AwsAccount implements CloudAccount {
    accessKey: String!
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

"Validate given aws accounts."
type AwsAccountValidationResponse {
    accountName: String!
    cloudType: AwsCloudTypeEnum!
    message: String!
    nativeId: String!
    seamlessFlowEnabled: Boolean!
}

"Details of AWS account."
type AwsCloudAccount {
    "Name of cloud account."
    accountName: String!
    "Type of cloud account"
    cloudType: AwsCloudTypeEnum!
    "Rubrik ID of cloud account."
    id: String!
    "Message for cloud account, in case of error."
    message: String!
    "Native ID of cloud account."
    nativeId: String!
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean!
}

"Initiate aws cloud accounts."
type AwsCloudAccountCreateResponse {
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegionEnum!]
    "AWS CloudFormation URL."
    cloudFormationUrl: String!
    "External ID for the cloud account."
    externalId: String!
    "List of feature versions."
    featureVersions: [AwsCloudAccountFeatureVersion!]!
    "Role ARN for the feature (if valid)."
    roleArn: String!
    "Stack name of template to run, only for single account addition."
    stackName: String
    "StackSet name of template to run, only for bulk account addition."
    stackSetName: String
    "AWS CloudFormation template URL."
    templateUrl: String!
}

"Feature version of aws cloud accounts"
type AwsCloudAccountFeatureVersion {
    "Feature Enum"
    feature: CloudAccountFeatureEnum!
    "Version"
    version: Int!
}

"Aws cloud Account list KMS Keys response"
type AwsCloudAccountListKMSKeysResponse {
    result: [KMSKey!]!
}

"Aws cloud Account list Security Group response"
type AwsCloudAccountListSecurityGroupsResponse {
    result: [CloudAccountSub!]!
}

"Aws cloud Account list Subnet response"
type AwsCloudAccountListSubnetsResponse {
    result: [CloudAccountSubnet!]!
}

"Aws cloud Account list VPC response"
type AwsCloudAccountListVpcResponse {
    result: [CloudAccountVpc!]!
}

"Aws Cloud Account Update Feature Response."
type AwsCloudAccountUpdateFeatureResponse {
    success: Boolean!
}

"Aws cloud accounts validate response."
type AwsCloudAccountValidateResponse {
    "Contains error message for account(s)."
    invalidAwsAccounts: [AwsAccountValidationResponse!]!
    "Contains error message for admin account."
    invalidAwsAdminAccount: AwsAccountValidationResponse
}

"Aws cloud accounts features."
type AwsCloudAccountWithFeatures {
    "AWS account details."
    awsCloudAccount: AwsCloudAccount
    "Feature details for the cloud account."
    featureDetails: [FeatureDetail!]!
}

"Compute setting for AWS Target"
type AwsComputeSettings {
    cloudAccount: CloudAccount
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
    id: String!
    isArchived: Boolean!
    isPolarisManaged: Boolean!
    name: String!
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    securityGroupId: String!
    subnetId: String!
    vpcId: String!
}

type AwsEc2Instance {
    imageId: String!
    instanceId: String!
    instanceName: String!
    instanceType: String!
}

"AWS Exocompute configurations in an AWS account."
type AwsExocomputeConfig {
    "Account details."
    awsCloudAccount: AwsCloudAccount!
    "Aws exocompute get configurations response"
    configs: [AwsExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AwsCloudAccountRegionEnum!]!
    "Feature details."
    featureDetail: FeatureDetail!
}

"AWS Exocompute configurations Deletion status."
type AwsExocomputeConfigsDeletionStatusType {
    exocomputeConfigId: String!
    success: Boolean!
}

"AWS Exocompute configuration in a region."
type AwsExocomputeGetConfigResponse {
    areSecurityGroupsPolarisManaged: Boolean!
    clusterSecurityGroupId: String!
    configUuid: String!
    message: String!
    nodeSecurityGroupId: String!
    region: AwsCloudAccountRegionEnum!
    subnet1: AwsExocomputeSubnetType!
    subnet2: AwsExocomputeSubnetType!
    vpcId: String!
}

"AWS Exocompute configuration in a region."
type AwsExocomputeSubnetType {
    availabilityZone: String!
    subnetId: String!
}

"AWS feature configurations in an AWS account."
type AwsFeatureConfig {
    "Account details."
    awsCloudAccount: AwsCloudAccount!
    "Aws exocompute configurations."
    exocomputeConfigs: [AwsExocomputeGetConfigResponse!]!
    "Feature detail."
    featureDetail: FeatureDetail!
}

type AwsInstanceType {
    instanceTypeId: Int!
    memoryMbs: Int!
    name: String!
    networkPerformance: String!
    region: String!
    storage: String!
    tenancy: String!
    vcpus: Int!
}

type AwsNativeAccount implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "List of all EBS Volumes under this AWS Native account."
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "List of all EC2 instances under this AWS Native account."
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "List of all RDS Instances under this AWS Native account."
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeRdsInstanceConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Count of EBS Volumes in the AWS Native account."
    ebsVolumeCount: Int!
    "Count of EC2 Instances in the AWS Native account."
    ec2InstanceCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Last refresh time of the account, in UTC date-time format."
    lastRefreshedAt: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Count of RDS Instances in the account."
    rdsInstanceCount: Int!
    "List of AWS region specifications associated with the account."
    regionSpecs: [AwsNativeRegionSpec!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Specifies the state of account in Rubrik environment like Refreshed, Disconnected, etc. An account can be in a single state at a time."
    status: AwsAccountStatusEnum!
}

type AwsNativeAccountConnection {
    count: Int!
    edges: [AwsNativeAccountEdge!]!
    nodes: [AwsNativeAccount!]!
    pageInfo: PageInfo!
}

type AwsNativeAccountEdge {
    cursor: String!
    node: AwsNativeAccount!
}

type AwsNativeEbsVolume implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "EC2 Instances to which this volume is attached."
    attachedEc2Instances: [AwsNativeEc2Instance!]!
    "List of EC2 instance details to which volume is attached."
    attachmentSpecs: [AttachmentSpecForEbsVolume!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZ for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "AWS Native account associated with the EBS Volumes."
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS account."
    awsNativeAccountName: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Input/Output (IO) limit per second for volume."
    iops: Long!
    "Whether exocompute is configured for the region where the volume is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of volume."
    isIndexingEnabled: Boolean!
    "Whether the volume image is marketplace image."
    isMarketplace: Boolean!
    "Whether the volume is relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EBS volume on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegionEnum!
    "Size of volume in GB."
    sizeInGBs: Int!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "List of tags associated with volume."
    tags: [Tag!]!
    "Name of volume on AWS. Name is not necessarily unique for different volumes."
    volumeName: String!
    "AWS Native ID of EBS volume."
    volumeNativeId: String!
    "AWS Native EBS volume type. Some examples are: g3, io2. This field cannot be null or empty string and will be mapped directly to available EBS volumes on cloud(AWS). For more information, see https://aws.amazon.com/ebs/volume-types."
    volumeType: String!
}

type AwsNativeEbsVolumeConnection {
    count: Int!
    edges: [AwsNativeEbsVolumeEdge!]!
    nodes: [AwsNativeEbsVolume!]!
    pageInfo: PageInfo!
}

type AwsNativeEbsVolumeEdge {
    cursor: String!
    node: AwsNativeEbsVolume!
}

type AwsNativeEc2Instance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Attached ebs volumes"
    attachedEbsVolumes: [AwsNativeEbsVolume!]!
    "List of EBS volume details attached to the instance."
    attachmentSpecs: [AttachmentSpecForEc2Instance!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZs for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones."
    availabilityZone: String!
    "Rubrik ID of Instance."
    awsAccountRubrikId: String!
    "Aws account of the Ec2 instance"
    awsNativeAccount: AwsNativeAccount!
    "Name for the AWS Account."
    awsNativeAccountName: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Name of instance on AWS. Name is not necessarily unique for different instances."
    instanceName: String!
    "AWS Native ID of Instance."
    instanceNativeId: String!
    "AWS Native EC2 instance type. Some examples are: t2.nano, m5.xlarge. This field cannot be null or empty string and will be mapped directly to available EC2 instance on cloud(AWS). For more information, see https://aws.amazon.com/ec2/instance-types."
    instanceType: String!
    "Whether exocompute is configured for the region where the instance is."
    isExocomputeConfigured: Boolean!
    "Whether indexing is enabled for snapshots of instance."
    isIndexingEnabled: Boolean!
    "Whether the instance image is marketplace image."
    isMarketplace: Boolean!
    "Whether the instance is relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Name of the Operating System (OS) for the Instance. Some examples are: Linux, Windows. This field cannot be null or empty string but can be Undefined in case it is not currently supported.List of supported OS: Linux, Windows."
    osType: OsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Private IP address for instance."
    privateIp: String!
    "Public IP address for instance."
    publicIp: String!
    "Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions."
    region: AwsNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "Name of SSH key-pair for the Instance."
    sshKeyPairName: String!
    "List of tags associated with Instance."
    tags: [Tag!]!
    "ID of Virtual Private Cloud (VPC) associated with instance."
    vpcId: String!
    "Name of Virtual Private Cloud (VPC) associated with instance."
    vpcName: String!
}

type AwsNativeEc2InstanceConnection {
    count: Int!
    edges: [AwsNativeEc2InstanceEdge!]!
    nodes: [AwsNativeEc2Instance!]!
    pageInfo: PageInfo!
}

type AwsNativeEc2InstanceEdge {
    cursor: String!
    node: AwsNativeEc2Instance!
}

type AwsNativeProtectionAccountAddResponse {
    cloudFormationName: String!
    cloudFormationTemplateUrl: String!
    cloudFormationUrl: String!
    errorMessage: String!
}

type AwsNativeRdsInstance implements AwsNativeAccountDescendantType & AwsNativeAccountLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Allocated size of RDS Instance in GiB."
    allocatedStorageInGibi: Long!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Rubrik Identifier for account associated with RDS Instance."
    awsAccountRubrikId: String!
    "AWS account of the RDS instance"
    awsNativeAccount: AwsNativeAccount!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Engine being used for RDS Instance."
    dbEngine: AwsNativeRdsDbEngineEnum!
    "Class type of RDS Instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    "Name of RDS Instance."
    dbInstanceName: String!
    "Resource identifier of RDS Instance."
    dbiResourceId: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Identifies if the RDS Instance is part of multiple Availability Zones."
    isMultiAz: Boolean!
    "Specifies whether the RDS Instance is a relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Maintenance window of RDS Instance."
    maintenanceWindow: String!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Name of Availability Zone(AZ) associated with RDS Instance."
    primaryAvailabilityZone: String!
    "Name of the source RDS instance if this instance is a read replica. This field is not applicable for primary RDS instances."
    readReplicaSourceName: String!
    "AWS region of RDS Instance."
    region: AwsNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "List of tags associated with RDS Instance."
    tags: [Tag!]!
    "Identifier of VPC associated with RDS Instance."
    vpcId: String!
    "Name of VPC associated with RDS Instance."
    vpcName: String!
}

type AwsNativeRdsInstanceConnection {
    count: Int!
    edges: [AwsNativeRdsInstanceEdge!]!
    nodes: [AwsNativeRdsInstance!]!
    pageInfo: PageInfo!
}

type AwsNativeRdsInstanceEdge {
    cursor: String!
    node: AwsNativeRdsInstance!
}

"The Point-in-Time (PiT) restore window of the RDS Instance."
type AwsNativeRdsPointInTimeRestoreWindow {
    "The earliest time to which RDS Instance can be restored."
    earliestTime: DateTime
    "The latest time to which RDS Instance can be restored."
    latestTime: DateTime
}

"List of AWS region specifications associated with an AWS account."
type AwsNativeRegionSpec {
    "A boolean specifying whether exocompute is configured in the region or not."
    isExocomputeConfigured: Boolean!
    "Name of the AWS region."
    region: AwsNativeRegionEnum!
}

"Represents a subnet in AWS."
type AwsNativeSubnet {
    "Availability Zone corresponding to the subnet."
    availabilityZone: String!
    "ID of the subnet."
    id: String!
    "Name of the subnet."
    name: String!
}

type AwsRdsConfig {
    logRetention: SlaDuration
}

type AwsReplicationTarget {
    accountId: String!
    accountName: String!
    region: AwsNativeRegionForReplicationEnum!
}

"AWS role based Account specific info"
type AwsRoleBasedAccount implements CloudAccount {
    awsSpecificInfo: AwsCloudAccountWithFeatures!
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
}

"A Security group in AWS realm."
type AwsSecurityGroup {
    id: String!
    name: String!
}

type AwsStorageVolumeType {
    maxIops: Int!
    maxSizeGbs: Int!
    name: String!
    volumeTypeId: Int!
}

"A Subnet in AWS realm."
type AwsSubnet {
    availabilityZone: String!
    id: String!
    name: String!
}

"Specific info for AWS Target Template"
type AwsTargetTemplate implements TargetTemplate {
    bucketPrefix: String!
    bucketTags: [TagObject!]!
    cloudAccount: CloudAccount!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    computeSettings: AwsComputeSettings
    encryptionType: TargetEncryptionTypeEnum!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    storageClass: AwsStorageClassTypeEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type AwsVMNicSpec {
    ipv4Address: String!
    key: Int!
    "security group of the nic"
    securityGroup: SnappableSecurityGroup
    securityGroupId: String!
    "subnet of the nic"
    subnet: SnappableSubnet
    subnetId: String!
}

type AwsVMVolumeSpec {
    iops: Int!
    key: Int!
    sizeGbs: Int!
    volumeTypeId: Int!
}

"A Virtual Private Cloud (VPC) in AWS realm."
type AwsVpc {
    "ID for the VPC."
    id: String!
    "Name of the VPC."
    name: String!
    "List of security groups associated with the VPC."
    securityGroups: [AwsSecurityGroup!]!
    "List of subnets associated with the VPC."
    subnets: [AwsSubnet!]!
}

"Azure Account specific info"
type AzureAccount implements CloudAccount {
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
    "The native id of the subscription."
    subscriptionId: String!
    "The native ID of the tenant of the subscription."
    tenantId: String!
}

"CDM image version info from Azure marketplace."
type AzureCdmVersion {
    "Image SKU."
    sku: String!
    "Image tag array with each element in key=value format."
    tags: [AzureCdmVersionTag!]!
    "Image version."
    version: String!
}

"CDM image version Tag."
type AzureCdmVersionTag {
    "Tag key."
    key: String!
    "Tag value."
    value: String!
}

"Azure Cloud Account Feature details"
type AzureCloudAccountFeatureDetail {
    feature: CloudAccountFeatureEnum!
    regions: [AzureCloudAccountRegionEnum!]!
    status: CloudAccountStatusEnum!
}

"Configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account."
type AzureCloudAccountPermissionConfigResponse {
    "Policy permission version to be used on Polaris for adding a subscription."
    permissionVersion: Int!
    "List of permissions to be applied on the role created in Azure for a subscription."
    rolePermissions: [AzureCloudAccountRolePermission!]!
}

"Azure Permission type with included and excluded actions."
type AzureCloudAccountRolePermission {
    "Actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedActions: [String!]!
    "Data actions which should be explicitly disallowed on the Azure role for the subscription."
    excludedDataActions: [String!]!
    "Actions which should be allowed on the Azure role for the subscription."
    includedActions: [String!]!
    "Data actions which should be allowed on the Azure role for the subscription."
    includedDataActions: [String!]!
}

"Azure Cloud Account Subscription for a given feature"
type AzureCloudAccountSubscription {
    customerSubscriptionId: String!
    customerTenantId: String!
    isAuthorized: Boolean!
    name: String!
    nativeId: String!
}

"Azure Cloud Account Subscription details for a given feature"
type AzureCloudAccountSubscriptionDetail {
    featureDetail: AzureCloudAccountFeatureDetail
    id: String!
    name: String!
    nativeId: String!
}

"Azure Tenant with details of subscriptions that are configured for a given feature."
type AzureCloudAccountTenant {
    "Rubrik ID of the Azure Tenant."
    azureCloudAccountTenantRubrikId: String!
    "Client ID of the application configured for authentication of the Azure tenant."
    clientId: String!
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    cloudType: AzureCloudTypeEnum!
    "Domain Name of the Azure Tenant."
    domainName: String!
    "Count of subscriptions added to the Rubrik ecosystem for this Azure Tenant."
    subscriptionCount: Int!
    "Subscriptions added to the Rubrik ecosystem for this Azure Tenant."
    subscriptions: [AzureCloudAccountSubscriptionDetail!]!
}

"Azure Cloud Account Tenant with details of exocompute configured for subscriptions for a given feature."
type AzureCloudAccountTenantWithExoConfigs {
    "Client ID of azure application for the tenant."
    clientId: String!
    "Type of Azure Tenant. Can be Azure Public Cloud or Azure China Cloud."
    cloudType: AzureCloudTypeEnum!
    "Azure Active Directory (AD) domain corresponding to subscription."
    domainName: String!
    "Number of subscriptions for the tenant."
    subscriptionCount: Int!
    "Details of subscriptions for the tenant."
    subscriptions: [AzureSubscriptionWithExoConfigs!]!
}

"Azure native archival specific fields for Azure Target Template"
type AzureCloudNativeTargetCompanion {
    "Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION."
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    "Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy."
    redundancy: AzureRedundancy!
    "Region for the Storage Account. All the storage accounts created are General Purpose V2 Storage Account. GPV2 accounts are supported only in certain regions. List of Supported Regions: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region."
    storageAccountRegion: AzureRegionEnum!
    "Tags for the Storage Account."
    storageAccountTags: [TagObject!]!
    "Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers."
    storageTier: AzureStorageTier!
    "Native id of the Azure subscription."
    subscriptionNativeId: String!
}

type AzureClusterCreateReply {
    clusterUuid: String!
    vmInfo: [VmInfo!]!
}

"Compute setting for Azure Target"
type AzureComputeSettings {
    appId: String!
    computeProxySettings: ProxySettings
    generalPurposeStorageContainer: String!
    generalPurposeStorageName: String!
    region: AzureRegionEnum!
    resourceGroup: String!
    securityGroupId: String!
    subnetId: String!
    virtualNetworkId: String!
}

"Exocompute configurations details"
type AzureExocomputeConfigDetails {
    "ID for exocompute configuration."
    configUuid: String!
    "Whether exocompute is polaris managed or not."
    isPolarisManaged: Boolean!
    message: String!
    "Region in which exocompute is configured. It will be in the format like EASTUS."
    region: AzureCloudAccountRegionEnum!
    "Native ID of subnet coresponding to exocompute. This will be the subnet provided during setting up exocompute."
    subnetNativeId: String!
}

"Contains validation information, such as blockers or errors encountered in validating the Exocompute configuration."
type AzureExocomputeConfigValidationInfo {
    config: AzureExocomputeRegionConfig
    errorMessage: String!
    "Specifies whether the configuration has blocking security rules in its associated network security group attached to the subnet for running AKS cluster in the specific region. For more details, visit https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic#required-outbound-network-rules-and-fqdns-for-aks-clusters"
    hasBlockedSecurityRules: Boolean!
    "Specifies whether the the configuration has the corresponding subnet address  range overlap with Azure restricted address ranges. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#prerequisites"
    hasRestrictedAddressRangeOverlap: Boolean!
}

"Azure Exocompute configurations in an Azure subscription."
type AzureExocomputeConfigsInAccount {
    "Account details."
    azureCloudAccount: AzureCloudAccountSubscriptionDetail!
    "Azure exocompute get config response"
    configs: [AzureExocomputeGetConfigResponse!]!
    "List of regions for which exocompute can be configured."
    exocomputeEligibleRegions: [AzureCloudAccountRegionEnum!]!
    "Feature details."
    featureDetails: AzureCloudAccountFeatureDetail!
}

"Azure Exocompute config"
type AzureExocomputeGetConfigResponse {
    configUuid: String!
    isPolarisManaged: Boolean!
    message: String!
    region: AzureCloudAccountRegionEnum!
    subnetNativeId: String!
}

"Represents an Azure Exocompute Configuration for a specific region. The Azure Exocompute Configuration includes the subnet native ID to be used for launching an Azure Kubernetes Service (AKS) Cluster in a specific region."
type AzureExocomputeRegionConfig {
    isPolarisManaged: Boolean!
    region: AzureCloudAccountRegionEnum!
    subnetNativeId: String!
}

"An Azure availability set. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview."
type AzureNativeAvailabilitySet {
    "Name of the availability set."
    name: String!
    "Native ID of the availability set."
    nativeId: String!
}

"List of disk types available for use in an Azure availability zone. Not all disk types are supported in all the regions, hence the limitation. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types"
type AzureNativeExportCompatibleDiskTypes {
    "Availabity zone of the disk."
    availabilityZone: String!
    "Types of the disk."
    diskTypes: [String!]!
}

"The virtual machine (VM) sizes for an Azure availability zone. Not all VM sizes are supported in all the regions, hence the limitation. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
type AzureNativeExportCompatibleVMSizes {
    "Availability zone of the virtual machine (VM)."
    availabilityZone: String!
    "Sizes of the virtual machines (VMs). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    vmSizes: [String!]!
}

"An Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview."
type AzureNativeManagedDisk implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "All Virtual Machines (VMs) attached to the Managed Disk."
    allAttachedAzureNativeVirtualMachines: [AzureNativeVirtualMachine!]!
    "Attachment Specifications are properties of the Managed Disk,  like the ID of the virtual machine (VM) that is associated with the Managed Disk."
    attachmentSpecs: [AttachmentSpecsForManagedDisk!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Availability Zone associated with the Managed Disk."
    availabilityZone: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Number of Input/Output operations Per Second (IOPS) allowed for the Managed Disk."
    diskIopsReadWrite: Long!
    "Bandwidth allowed for the Managed Disk, in millions of bytes per second (MBps)."
    diskMbpsReadWrite: Long!
    "Native ID of the Managed Disk."
    diskNativeId: String!
    "Size of the Managed Disk in gigabytes (GiB)."
    diskSizeGib: Int!
    "Storage tier of the Managed Disk."
    diskStorageTier: AzureNativeManagedDiskTypeEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Specifies whether Azure Disk Encryption (ADE) is enabled on the Managed Disk or not. When the value is true, ADE is enabled."
    isAdeEnabled: Boolean!
    "Specifies whether exocompute is configured for the region in which the Managed Disk exists or not. When the value is true, exocompute can be used to perform tasks like file indexing."
    isExocomputeConfigured: Boolean!
    "Specifies whether file indexing is enabled for this Managed Disk or not. When file indexing is enabled, Rubrik can scan through the file structure inside the managed disk in a protected environment where only the meta data like folder structure, file names, and file sizes will be readable by Rubrik."
    isFileIndexingEnabled: Boolean!
    "Specifies whether the Managed Disk is a relic. When the value is true, the Managed Disk is a relic. A managed disk is a relic when it is unprotected or deleted, but the previously taken snapshots of the VM continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Type of the Operating System (OS) installed on the Managed Disk."
    osType: AzureNativeVmOsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Managed Disk is located."
    region: AzureNativeRegionEnum!
    "Resource Group of the Azure Native Managed Disk."
    resourceGroup: AzureNativeResourceGroup!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "List of tags associated with the Managed Disk."
    tags: [AzureTag!]!
}

type AzureNativeManagedDiskConnection {
    count: Int!
    edges: [AzureNativeManagedDiskEdge!]!
    nodes: [AzureNativeManagedDisk!]!
    pageInfo: PageInfo!
}

type AzureNativeManagedDiskEdge {
    cursor: String!
    node: AzureNativeManagedDisk!
}

"An Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside."
type AzureNativeResourceGroup implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Paginated ist of Azure Virtual Machines (VMs) in the Resource Group."
    azureNativeVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    "Count of Azure SQL databases in the Resource Group."
    azureSqlDatabaseCount: Int!
    "Count of Azure SQL Managed Instance databases in the Resource Group."
    azureSqlManagedInstanceDbCount: Int!
    "Rubrik ID of the Azure Native Resource Group."
    azureSubscriptionRubrikId: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the disks in the Resource Group."
    diskSla: AzureNativeResourceGroupSlaAssignment!
    "Count of disks in the Resource Group."
    disksCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "A list of mappings between protected object types and SLA Domains."
    protectedObjectTypeToSla: [ProtectedObjectTypeToSla!]!
    "Azure region associated with the Resource Group."
    region: AzureNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Azure Native Subscription of the Resource Group."
    subscription: AzureNativeSubscription!
    "List of tags associated with the Resource Group."
    tags: [AzureTag!]!
    "Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the Virtual Machines (VMs) in the Resource Group."
    vmSla: AzureNativeResourceGroupSlaAssignment!
    "Count of Virtual Machines (VMs) in the Resource Group."
    vmsCount: Int!
}

type AzureNativeResourceGroupConnection {
    count: Int!
    edges: [AzureNativeResourceGroupEdge!]!
    nodes: [AzureNativeResourceGroup!]!
    pageInfo: PageInfo!
}

type AzureNativeResourceGroupEdge {
    cursor: String!
    node: AzureNativeResourceGroup!
}

"An Azure resource group SLA assignment"
type AzureNativeResourceGroupSlaAssignment {
    configuredSlaDomain: GlobalSla!
    effectiveSlaDomain: GlobalSla!
    slaAssignment: SlaAssignmentTypeEnum!
}

"An Azure security group. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups."
type AzureNativeSecurityGroup {
    "Name of the security group."
    name: String!
    "Native ID of the security group."
    nativeId: String!
    "Name of the resource group associated with the security group."
    resourceGroupName: String!
}

"The Point-in-Time (PiT) restore window of the Azure SQL Database. Database could be Azure SQL Managed Instance Database or Azure SQL Server Database."
type AzureNativeSqlDatabasePointInTimeRestoreWindow {
    "The earliest time to which database can be restored."
    earliestTime: DateTime
    "The latest time to which database can be restored."
    latestTime: DateTime
}

"Azure storage account"
type AzureNativeStorageAccount {
    "Azure ID of the storage account."
    id: String!
    "Name of the storage account."
    name: String!
    "Region where the storage account is located."
    region: AzureNativeRegionEnum!
    "Name of the resource group where storage account is located."
    resourceGroupName: String!
    "Tags attached to the storage account."
    tags: [AzureTag!]!
}

"An Azure subnet. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/subnet-extension."
type AzureNativeSubnet {
    "List of subnet IP address prefixes in CIDR notation. The list can contain both IPv4 and IPv6 addresses. The list cannot be empty."
    addressPrefixes: [String!]!
    "Name of the subnet."
    name: String!
    "Native ID of the subnet."
    nativeId: String!
    "Virtual Network (VNet) associated with the subnet."
    vnet: AzureNativeVirtualNetwork!
}

"An Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources. "
type AzureNativeSubscription implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Type of Azure cloud, for example, Azure Public Cloud and Azure China Cloud."
    azureCloudType: AzureCloudTypeEnum!
    "Paginated list of all Azure Resource Groups in the subscription."
    azureNativeResourceGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups"
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeResourceGroupConnection!
    "Count of Azure SQL databases in the subscription."
    azureSqlDatabaseDbCount: Int!
    "Count of Azure SQL Managed Instance databases in the subscription."
    azureSqlManagedInstanceDbCount: Int!
    "Native ID of the subscription."
    azureSubscriptionNativeId: String!
    "Status of the subscription at a given time. Some examples are: added, deleted, refreshed. For more information, see https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/subscription-states."
    azureSubscriptionStatus: AzureSubscriptionStatusEnum!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Count of managed disks in the subscription."
    disksCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Last refresh time of the subscription, in UTC date-time format."
    lastRefreshedAt: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Tenant ID associated with the subscription."
    tenantId: String!
    "Count of virtual machines (VMs) in the subscription."
    vmsCount: Int!
}

type AzureNativeSubscriptionConnection {
    count: Int!
    edges: [AzureNativeSubscriptionEdge!]!
    nodes: [AzureNativeSubscription!]!
    pageInfo: PageInfo!
}

type AzureNativeSubscriptionEdge {
    cursor: String!
    node: AzureNativeSubscription!
}

"An Azure Native Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/."
type AzureNativeVirtualMachine implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "List of Managed Disks attached to the Azure Virtual Machine (VM)."
    attachedManagedDisks: [AzureNativeManagedDisk!]!
    "Sequence of attachment specs for the virtual machine (VM)."
    attachmentSpecs: [AttachmentSpecsForVirtualMachine!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Native ID of the availability set associated with the virtual machine (VM)."
    availabilitySetNativeId: String!
    "Availability Zone associated with the virtual machine (VM)."
    availabilityZone: String!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Specifies whether accelerated networking is enabled on the virtual machine (VM) or not. Accelerated Networking improves the network performance on the VM. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-networking."
    isAcceleratedNetworkingEnabled: Boolean!
    "Specifies whether Azure Disk Encryption (ADE) exists on the virtual machine (VM) or not."
    isAdeEnabled: Boolean!
    "Specifies whether application consistent snapshots are enabled for this virtual machine (VM) or not. When enabled, Rubrik informs the Azure applications before taking snapshots, so apps can prepare. During the preparation phrase, Rubrik waits for the IO to be frozen and then the snapshot is taken. Once snapshot is taken, IO is unfreezed and the apps resume normal operation."
    isAppConsistencyEnabled: Boolean!
    "Specifies whether exocompute is configured for the region in which the virtual machine (VM) exists, or not. When the value is true, exocompute can be used to perform tasks like file indexing."
    isExocomputeConfigured: Boolean!
    "Specifies whether file indexing is enabled for this virtual machine (VM) or not. When enabled, Rubrik can scan through the file structure inside the VM in a protected environment where only the meta data like folder structure, file names, and file sizes will be readable by Rubrik."
    isFileIndexingEnabled: Boolean!
    "Specifies whether pre-script or post-script framework is enabled on the the virtual machine (VM) or not. When true, it facilitates application-consistent backups."
    isPreOrPostScriptEnabled: Boolean!
    "Specifies whether the virtual machine (VM) is a relic or not. A VM is a relic when it is unprotected or deleted, but the previously taken snapshots of the VM continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Type of the Operating System (OS) installed on the virtual machine (VM)."
    osType: AzureNativeVmOsTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the virtual machine (VM) is located."
    region: AzureNativeRegionEnum!
    "Resource Group of the Azure Virtual Machine (VM)."
    resourceGroup: AzureNativeResourceGroup!
    "Size type of the virtual machine (VM). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general."
    sizeType: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    "Name of the subnet associated with the virtual machine (VM)."
    subnetName: String!
    "List of tags associated with the virtual machine (VM)."
    tags: [AzureTag!]!
    "Native ID of the the virtual machine (VM)."
    virtuaMachineNativeId: String!
    "Application Consistent Specifications of the virtual machine (VM)."
    vmAppConsistentSpecs: VmAppConsistentSpecsInternal
    "Name of the Virtual Machine (VM)."
    vmName: String!
    "Name of the Virtual Network (VNet) associated with the virtual machine (VM)."
    vnetName: String!
}

type AzureNativeVirtualMachineConnection {
    count: Int!
    edges: [AzureNativeVirtualMachineEdge!]!
    nodes: [AzureNativeVirtualMachine!]!
    pageInfo: PageInfo!
}

type AzureNativeVirtualMachineEdge {
    cursor: String!
    node: AzureNativeVirtualMachine!
}

"An Azure virtual network (VNet). VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview."
type AzureNativeVirtualNetwork {
    "Name of the Virtual Network (VNet)."
    name: String!
    "Name of the resource group associated with the Virtual Network (VNet)."
    resourceGroupName: String!
}

type AzureNetworkSecurityGroupResp {
    reason: String!
    rulesStatus: AzureNetworkSecurityRulesStatusEnum!
}

type AzureNetworkSubnetResp {
    valid: Boolean!
}

type AzureNetworkSubnetUnusedAddrResp {
    unusedAddr: Long!
}

type AzureO365ExocomputeCluster {
    acrId: String!
    aksId: String!
    aksVersion: String!
    azureAppId: String!
    azureCloudType: O365AzureCloudTypeEnum!
    groupName: String!
    hostType: AzureHostTypeEnum!
    id: String!
    isProvisioned: Boolean!
    kmsId: String!
    orgId: String!
    orgName: String!
    orgStatus: String!
    orgTenantId: String!
    polarisAccount: String!
    regionName: String!
    scaleRuntime: ScaleRuntime
    setupConfiguration: String!
    storageId: String!
    storageIds: ExocomputeStorageAccountIds
    subscriptionId: String!
    tenantId: String!
}

type AzureOAuthConsentKickoffResp {
    appClientId: String!
    csrfToken: String!
    govAppClientId: String!
}

type AzureRegionsResp {
    regions: [Region!]!
}

type AzureReplicationTarget {
    region: AzureNativeRegionForReplicationEnum!
    subscriptionId: String!
    subscriptionName: String!
}

type AzureResourceAvailabilityResp {
    available: Boolean!
    reason: String!
}

"Azure resource group."
type AzureResourceGroup {
    "The region name of the resource group."
    location: String!
    "The name of the resource group."
    name: String!
    "The native id of the resource group."
    nativeId: String!
    "The tags present in the resource group."
    tags: [AzureTag!]!
}

type AzureRoleBasedAccount implements CloudAccount {
    "The id of this Cloud Account"
    cloudAccountId: String!
    "The type of this Cloud Provider."
    cloudProvider: CloudProviderTypeEnum!
    "The connection status of this Cloud Account."
    connectionStatus: ConnectionStatusType!
    "The description of this Cloud Account"
    description: String
    "The name of this Cloud Account"
    name: String!
    "The subscription info with feature details."
    subscriptionWithFeatures: AzureSubscriptionWithFeaturesType!
}

"An Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more info, see https://azure.microsoft.com/en-us/products/azure-sql/database/."
type AzureSqlDatabaseDb implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Azure SQL Database Server of the Azure SQL Database."
    azureSqlDatabaseServer: AzureSqlDatabaseServer!
    "Type of backup storage redundancy. Examples: LRS, ZRS, GRS."
    backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Name of the Azure SQL Database."
    databaseName: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "Name of the Elastic Pool in which the Azure SQL Database resides."
    elasticPoolName: String!
    "The fid of the hierarchy object."
    id: UUID!
    "Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "Maximum size of the Azure SQL Database, in bytes."
    maximumSizeInBytes: Long!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Database is located."
    region: AzureNativeRegionEnum!
    "Service Tier associated with the Azure SQL Database. Examples: Basic, General Purpose."
    serviceTier: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

"SLA Domain configuration for Azure SQL Database DB object."
type AzureSqlDatabaseDbConfig {
    "Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int!
}

type AzureSqlDatabaseDbConnection {
    count: Int!
    edges: [AzureSqlDatabaseDbEdge!]!
    nodes: [AzureSqlDatabaseDb!]!
    pageInfo: PageInfo!
}

type AzureSqlDatabaseDbEdge {
    cursor: String!
    node: AzureSqlDatabaseDb!
}

"Retrieves an Azure SQL Database Server. Refers to the server the Azure SQL Database is a part of. For more info, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers."
type AzureSqlDatabaseServer implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Resource Group of the Azure SQL Database Server."
    azureNativeResourceGroup: AzureNativeResourceGroup!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Database Server is located."
    region: AzureNativeRegionEnum!
    "Name of the Azure SQL Database Server."
    serverName: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tags associated with the Azure SQL Database Server."
    tags: [AzureTag!]!
}

type AzureSqlDatabaseServerConnection {
    count: Int!
    edges: [AzureSqlDatabaseServerEdge!]!
    nodes: [AzureSqlDatabaseServer!]!
    pageInfo: PageInfo!
}

type AzureSqlDatabaseServerEdge {
    cursor: String!
    node: AzureSqlDatabaseServer!
}

"Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview."
type AzureSqlManagedInstanceDatabase implements HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Azure SQL Managed Instance Server of the Azure SQL Managed Instance Database."
    azureSqlManagedInstanceServer: AzureSqlManagedInstanceServer!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Name of the Azure SQL Managed Instance Database."
    databaseName: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Managed Instance Database is located."
    region: AzureNativeRegionEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

type AzureSqlManagedInstanceDatabaseConnection {
    count: Int!
    edges: [AzureSqlManagedInstanceDatabaseEdge!]!
    nodes: [AzureSqlManagedInstanceDatabase!]!
    pageInfo: PageInfo!
}

type AzureSqlManagedInstanceDatabaseEdge {
    cursor: String!
    node: AzureSqlManagedInstanceDatabase!
}

"SLA Domain configuration for Azure SQL Managed Instance DB object."
type AzureSqlManagedInstanceDbConfig {
    "Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int!
}

"Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of."
type AzureSqlManagedInstanceServer implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "Resource Group of the Azure SQL Managed Instance Server."
    azureNativeResourceGroup: AzureNativeResourceGroup!
    "Type of backup storage redundancy. Examples: LRS, ZRS, GRS."
    backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Name of the Instance Pool the Azure SQL Managed Instance Server belongs to."
    instancePoolName: String!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Azure region where the Azure SQL Managed Instance Server is located."
    region: AzureNativeRegionEnum!
    "Name of the Azure SQL Managed Instance Server."
    serverName: String!
    "Service Tier associated with the Azure SQL Managed Instance Server."
    serviceTier: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Storage size of the Azure SQL Managed Instance Server, in GiB."
    storageSizeGib: Long!
    "Name of the subnet associated with the Azure SQL Managed Instance Server."
    subnetName: String!
    "List of tags associated with the Azure SQL Managed Instance Server."
    tags: [AzureTag!]!
    "Count of the vCores in the Azure SQL Managed Instance Server."
    vCoresCount: Int!
    "Name of the Virtual Network associated with the Azure SQL Managed Instance Server."
    vnetName: String!
}

type AzureSqlManagedInstanceServerConnection {
    count: Int!
    edges: [AzureSqlManagedInstanceServerEdge!]!
    nodes: [AzureSqlManagedInstanceServer!]!
    pageInfo: PageInfo!
}

type AzureSqlManagedInstanceServerEdge {
    cursor: String!
    node: AzureSqlManagedInstanceServer!
}

type AzureSubscription {
    id: String!
    name: String!
}

type AzureSubscriptionConnection {
    count: Int!
    edges: [AzureSubscriptionEdge!]!
    nodes: [AzureSubscription!]!
    pageInfo: PageInfo!
}

type AzureSubscriptionEdge {
    cursor: String!
    node: AzureSubscription!
}

"Missing permissions on the Azure Subscription."
type AzureSubscriptionMissingPermissions {
    "List of missing permissions on the Azure Subscription."
    missingPermissions: [String!]!
    "Native ID of the Azure Subscription."
    subscriptionNativeId: String!
}

"Azure Cloud Account Subscription with exocompute configurations for feature configured."
type AzureSubscriptionWithExoConfigs {
    "Native ID for Azure subscription."
    azureSubscriptionNativeId: String!
    "Rubrik ID for Azure subscription."
    azureSubscriptionRubrikId: String!
    "Exocompute configurations configured for subscription."
    exocomputeConfigs: [AzureExocomputeConfigDetails!]!
    "Feature details of subscription."
    featureDetail: AzureCloudAccountFeatureDetail!
    "Name of Azure subscription."
    subscriptionName: String!
}

"Azure subscription with features."
type AzureSubscriptionWithFeaturesType {
    "Azure tenant ID."
    customerTenantId: String!
    "Feature details for the cloud account."
    featureDetails: [AzureCloudAccountFeatureDetail!]!
    "Azure subscription cloud account ID."
    id: String!
    "Azure subscription native name."
    name: String!
    "Azure subscription native ID."
    nativeId: String!
}

"Azure Tag"
type AzureTag {
    key: String!
    value: String!
}

"Specific info for Azure Target Template"
type AzureTargetTemplate implements TargetTemplate {
    cloudAccount: CloudAccount!
    cloudNativeCompanion: AzureCloudNativeTargetCompanion
    computeSettings: AzureComputeSettings
    containerNamePrefix: String!
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    proxySettings: ProxySettings
    storageAccountName: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type AzureUserRoleResp {
    globalAdministrator: RoleStatus
    subscriptionOwner: RoleStatus
}

"""

Supported in v5.1+
"""
type BackupTaskDiagnosticInfo {
    """

    Supported in v5.1+
    The expected completion time of the task.
    """
    expectedEndTime: DateTime
    """

    Supported in v5.1+
    The scheduled start time of the task.
    """
    queueTime: DateTime
    taskStatus: DiagnosticTaskStatusEnum!
}

type BackupWindow {
    durationInHours: Int!
    startTimeAttributes: StartTimeAttributes
}

"""

Supported in v5.0+
"""
type BaseSnapshotSummary {
    """

    Supported in v5.0+
    """
    archivalLocationIds: [String!]!
    """

    Supported in v5.0+
    Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
    """
    cloudState: Long
    cloudStorageTier: SnapshotCloudStorageTierEnum
    """

    Supported in v5.0+
    """
    consistencyLevel: String
    """

    Required. Supported in v5.0+
    """
    date: DateTime
    """

    Supported in v5.0+
    """
    expirationDate: DateTime
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
    """
    indexState: Long
    """

    Supported in v5.2+
    A Boolean that indicates whether or not custom retention is applied to the snapshot.
    """
    isCustomRetentionApplied: Boolean
    """

    Required. Supported in v5.0+
    """
    isOnDemandSnapshot: Boolean!
    """

    Supported in v5.2+
    A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
    """
    isPlacedOnLegalHold: Boolean
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true,' the snapshot is being retained under a Retention Lock SLA Domain.
    v5.2+: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
    """
    isRetainedByRetentionLockSla: Boolean
    """

    Supported in v5.2+
    ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
    """
    parentSnapshotId: String
    """

    Required. Supported in v5.0+
    """
    replicationLocationIds: [String!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
    """
    slaName: String!
    """

    Supported in v5.2+
    Snapshot retention related information for local, archival and replication locations.
    """
    snapshotRetentionInfo: SnapshotRetentionInfo
    """

    Supported in v5.0+
    """
    sourceObjectType: String
}

type BasicSnapshotSchedule {
    frequency: Int!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
}

type BatchAsyncJobStatus {
    "List of map of Rubrik object ID to error message for those object for which pre validation failed."
    errors: [AsyncJobStatusJobError!]!
    "List of map of Rubrik object ID to Job ID for object if pre validation succeeds for object. If pre validation failed, detials will be present in error field."
    jobIds: [AsyncJobStatusJobId!]!
}

"""

Supported in v5.0+
"""
type BatchAsyncRequestStatus {
    """

    Required. Supported in v5.0+
    The asynchronous request status of a batch request.
    """
    responses: [AsyncRequestStatus!]!
}

"""

Supported in v5.1+
"""
type BatchVmwareCdpLiveInfo {
    """

    Required. Supported in v5.1+
    The live CDP info for the virtual machines.
    """
    responses: [VmwareCdpLiveInfo!]!
}

"""

Supported in v5.3+
"""
type BatchVmwareVmRecoverableRanges {
    """

    Required. Supported in v5.3+
    The recoverable ranges for a set of virtual machines.
    """
    responses: [VmwareVmRecoverableRanges!]!
}

type BidirectionalReplicationSpec {
    replicationSpec1: UnidirectionalReplicationSpec
    replicationSpec2: UnidirectionalReplicationSpec
}

"""

Supported in v5.0+
"""
type BlackoutWindow {
    """

    Supported in v5.0+
    """
    endTime: String
    """

    Required. Supported in v5.0+
    """
    startTime: String!
}

"""

Supported in v5.0+
"""
type BlackoutWindowResponseInfo {
    """

    Required. Supported in v5.0+
    """
    blackoutWindowStatus: BlackoutWindowStatus
    """

    Required. Supported in v5.0+
    """
    blackoutWindows: BlackoutWindows
}

"""

Supported in v5.0+
"""
type BlackoutWindowStatus {
    """

    Required. Supported in v5.0+
    """
    isGlobalBlackoutActive: Boolean!
    """

    Supported in v5.0+
    """
    isSnappableBlackoutActive: Boolean
}

"""

Supported in v5.0+
"""
type BlackoutWindows {
    """

    Required. Supported in v5.0+
    """
    globalBlackoutWindows: [BlackoutWindow!]!
    """

    Supported in v5.0+
    """
    snappableBlackoutWindows: [BlackoutWindow!]!
}

type BlueprintCdmLocation implements BlueprintLocation {
    "the cluster"
    cluster: Cluster!
    locationId: String!
    "The type of the location"
    type: BlueprintLocationTypeEnum!
}

type BlueprintChildConnection {
    count: Int!
    edges: [BlueprintChildEdge!]!
    nodes: [BlueprintChild!]!
    pageInfo: PageInfo!
}

type BlueprintChildEdge {
    cursor: String!
    node: BlueprintChild!
}

type BlueprintConnection {
    count: Int!
    edges: [BlueprintEdge!]!
    nodes: [Blueprint!]!
    pageInfo: PageInfo!
}

type BlueprintEdge {
    cursor: String!
    node: Blueprint!
}

"Failover metadata."
type BlueprintFailover {
    "Type of the failover."
    failoverType: FailoverTypeEnum!
    "Status of the failover (succeeded or failed)."
    status: FailoverStatusEnum!
}

type BlueprintNewConnection {
    count: Int!
    edges: [BlueprintNewEdge!]!
    nodes: [BlueprintNew!]!
    pageInfo: PageInfo!
}

type BlueprintNewEdge {
    cursor: String!
    node: BlueprintNew!
}

type BlueprintRecoveryRange {
    beginTime: DateTime
    endTime: DateTime
}

type BlueprintRecoveryRanges {
    missedRecoverableRanges: [BlueprintRecoveryRange!]!
    recoverableRanges: [BlueprintRecoveryRange!]!
}

"the recovery spec of a Blueprint."
type BlueprintRecoverySpec {
    childRecoverySpecs: [ChildRecoverySpecMap!]!
    isPending: Boolean!
    planType: PlanNameEnum!
    userData: String
    version: Long!
}

"the recovery specs of a Blueprint."
type BlueprintRecoverySpecs {
    errors: [ValidateFailureReason!]!
    specs: [BlueprintRecoverySpec!]!
}

"Response from cluster bootstrap status."
type BootstrapStatusReply {
    clusterinstall: String!
    configadminuser: String!
    createtoplevelfilesystemdirs: String!
    installschema: String!
    ipconfig: String!
    ipmiconfig: String!
    "Message if failure occurred."
    message: String!
    metadatasetup: String!
    resetnodes: String!
    setupdisks: String!
    setupencryptionatrest: String!
    setuploopdevices: String!
    setuposandmetadatapartitions: String!
    startservices: String!
    "Bootstrap status of cluster."
    status: String!
}

"""

Supported in v5.0+
"""
type BrowseResponse {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    """

    Supported in v5.0+
    The name of the file.
    """
    filename: String
    """

    Supported in v5.0+
    """
    lastModified: String
    """

    Supported in v5.0+
    The complete path of the file.
    """
    path: String
    """

    Supported in v5.0+
    """
    size: Long
    """

    Supported in v5.0+
    Description about the status.
    """
    statusMessage: String
    """

    Supported in v5.3+
    Reason the file is unreadable. Undefined if the file is readable.
    """
    unreadable: Int
}

"""

Supported in v5.0+
"""
type BrowseResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [BrowseResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"Reply Object for BrowseSnapMirrorCloudSnapshot"
type BrowseSnapMirrorCloudSnapshotReply {
    output: BrowseResponseListResponse
}

"""

Supported in v5.0+
"""
type CDMSnappable {
    """

    Supported in v5.0
    ID of the effective SLA domain
    """
    effectiveSlaDomainId: String
    """

    Supported in v5.0
    name of the effective SLA domain
    """
    effectiveSlaDomainName: String
    """

    Supported in v5.0
    Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Supported in v5.0
    ID of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.0
    Name of the object from which the effective SLA domain is inherited
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.2+
    The ID of the SLA Domain whose retention policy is in use.
    """
    retentionSlaDomainId: String
    slaAssignable: SlaAssignable
    slaAssignment: SnappableSlaAssignmentEnum!
}

"Snapshot of a CDM Object."
type CDMSnapshot {
    "CDM ID of the snapshot."
    cdmId: String!
    "Version of the cluster that the snapshot belongs to."
    cdmVersion: String!
    "ID of the cluster that the snapshot belongs to."
    clusterUuid: String!
    "The date the snapshot was taken."
    date: DateTime
    "Date the snapshot will expire."
    expirationDate: DateTime
    "Flag for whether the hint for expiration should be enabled."
    expiryHint: Boolean!
    "ID of the SLA."
    id: String!
    "Number of times the snapshot has attempted to be indexed."
    indexingAttempts: Long!
    "Whether the snapshot is corrupted or not."
    isCorrupted: Boolean!
    "Whether or not the snapshot was downloaded."
    isDownloadedSnapshot: Boolean!
    "Whether or not the snapshot is indexed."
    isIndexed: Boolean!
    "Whether or not the snapshot was taken as an On Demand Snapshot"
    isOnDemandSnapshot: Boolean!
    "Whether or not the snapshot can be unindexed."
    isUnindexible: Boolean!
    "The information about how long this snapshot will be retained."
    retentionInfo: String!
    "Configuration of the SLA of a snapshot."
    slaConfig: SlaConfig
    "ID of the snappable the snapshot belongs to."
    snappableId: String!
    "The type of the snappable that this snapshot belongs to."
    snappableType: String!
    "Sub objects for the snapshot."
    subObjs: [SnapshotSubObject!]!
}

type CDMSnapshotConnection {
    count: Int!
    edges: [CDMSnapshotEdge!]!
    nodes: [CDMSnapshot!]!
    pageInfo: PageInfo!
}

type CDMSnapshotEdge {
    cursor: String!
    node: CDMSnapshot!
}

type CDMSnapshotLocationRetentionInfo {
    expirationTime: DateTime
    id: String!
    isExpirationDateCalculated: Boolean!
    isSnapshotPresent: Boolean!
    name: String!
    snapshotFrequency: SnapshotFrequencyEnum!
}

type CDMSnapshotRetentionInfo {
    archivalInfos: [CDMSnapshotLocationRetentionInfo!]
    localInfo: CDMSnapshotLocationRetentionInfo
    replicationInfos: [CDMSnapshotLocationRetentionInfo!]
}

type CancelJobReply {
    message: String!
    status: Boolean!
}

"Backup Params configured on the management object."
type CassandraBackupParams {
    "Name of the store used to store backups."
    storeName: String!
    "Monitoring frequency used."
    watcherFrequency: Long!
}

"Cassandra Column Family information."
type CassandraColumnFamily implements CassandraKeyspaceDescendantType & CassandraKeyspacePhysicalChildType & CassandraSourceDescendantType & HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "Number of backups for the column family."
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information"
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    id: UUID!
    isRelic: Boolean!
    "Parent keyspace connection"
    keyspace: CassandraKeyspace!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The most recent snapshot of this snappable."
    newestSnapshot: MosaicSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "The oldest snapshot of this snappable."
    oldestSnapshot: MosaicSnapshot
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Date that effective SLA was assigned / inherited."
    protectionDate: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupBys(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Group mosaic snapshots by field."
        groupBy: MosaicSnapshotGroupBy!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MosaicSnapshotGroupByTypeConnection
    "The list of snapshots taken for this snappable."
    snapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter mosaic snapshot connection."
        filter: MosaicSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort mosaic snapshots by field."
        sortBy: MosaicSnapshotSortBy = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): MosaicSnapshotConnection!
    "Parent source connection"
    source: CassandraSource!
}

type CassandraColumnFamilyConnection {
    count: Int!
    edges: [CassandraColumnFamilyEdge!]!
    nodes: [CassandraColumnFamily!]!
    pageInfo: PageInfo!
}

type CassandraColumnFamilyEdge {
    cursor: String!
    node: CassandraColumnFamily!
}

type CassandraColumnObject {
    columnName: String
    columnType: String
}

"Cassandra Keyspace information."
type CassandraKeyspace implements CassandraSourceDescendantType & CassandraSourcePhysicalChildType & HierarchyObject & PolarisHierarchyObject {
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information"
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CassandraKeyspaceDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CassandraKeyspacePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Parent source connection"
    source: CassandraSource!
    "Watcher status of the keyspace."
    watcherEnabled: Boolean!
}

type CassandraKeyspaceConnection {
    count: Int!
    edges: [CassandraKeyspaceEdge!]!
    nodes: [CassandraKeyspace!]!
    pageInfo: PageInfo!
}

type CassandraKeyspaceDescendantTypeConnection {
    count: Int!
    edges: [CassandraKeyspaceDescendantTypeEdge!]!
    nodes: [CassandraKeyspaceDescendantType!]!
    pageInfo: PageInfo!
}

type CassandraKeyspaceDescendantTypeEdge {
    cursor: String!
    node: CassandraKeyspaceDescendantType!
}

type CassandraKeyspaceEdge {
    cursor: String!
    node: CassandraKeyspace!
}

type CassandraKeyspacePhysicalChildTypeConnection {
    count: Int!
    edges: [CassandraKeyspacePhysicalChildTypeEdge!]!
    nodes: [CassandraKeyspacePhysicalChildType!]!
    pageInfo: PageInfo!
}

type CassandraKeyspacePhysicalChildTypeEdge {
    cursor: String!
    node: CassandraKeyspacePhysicalChildType!
}

type CassandraSchemaObject {
    columns: [CassandraColumnObject!]!
    primaryKeys: [String!]!
}

"Cassandra Source information."
type CassandraSource implements HierarchyObject & PolarisHierarchyObject {
    "Number of backups for the source."
    backupCount: Int
    "Backup Params of the source."
    backupParams: CassandraBackupParams
    "Mosaic cluster information"
    cluster: Cluster!
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "Configuration Params of the source."
    configParams: SourceConfigParams
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CassandraSourceDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    lastRefreshTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Number of source nodes."
    nodeCount: Int
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CassandraSourcePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Data size of source."
    size: Int
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "IP of the source."
    sourceIp: String!
    "Source connectivity status."
    status: CassandraSourceStatus!
    "Watcher status of the source."
    watcherEnabled: Boolean!
}

type CassandraSourceConnection {
    count: Int!
    edges: [CassandraSourceEdge!]!
    nodes: [CassandraSource!]!
    pageInfo: PageInfo!
}

type CassandraSourceDescendantTypeConnection {
    count: Int!
    edges: [CassandraSourceDescendantTypeEdge!]!
    nodes: [CassandraSourceDescendantType!]!
    pageInfo: PageInfo!
}

type CassandraSourceDescendantTypeEdge {
    cursor: String!
    node: CassandraSourceDescendantType!
}

type CassandraSourceEdge {
    cursor: String!
    node: CassandraSource!
}

type CassandraSourcePhysicalChildTypeConnection {
    count: Int!
    edges: [CassandraSourcePhysicalChildTypeEdge!]!
    nodes: [CassandraSourcePhysicalChildType!]!
    pageInfo: PageInfo!
}

type CassandraSourcePhysicalChildTypeEdge {
    cursor: String!
    node: CassandraSourcePhysicalChildType!
}

"SSL Configuration on mosaic source object."
type CassandraSslOptions {
    "Whether ssl is enabled or not."
    ssl: Boolean!
    "Path to CA certificate."
    sslCaCerts: String!
    "SSL certificate requirements."
    sslCertRequirements: SourceSslCertReqsEnum!
    "Path to SSL Certificate."
    sslCertfile: String!
    "Path to SSL Key."
    sslKeyfile: String!
}

"Async reply for a submitted job."
type CcProvisionJobReply {
    "Job Id of the submitted job."
    jobId: Long!
    "Detail of submitted job including job name and function parameters."
    message: String!
    "Indicates if the operation was a success or not."
    success: Boolean!
}

type CdmArchivalSpec {
    archivalLocationFid: String!
    archivalLocationName: String!
    archivalTieringSpec: ArchivalTieringSpec
    threshold: Int!
    thresholdUnit: RetentionUnitEnum!
}

type CdmClusterStatus {
    "Rubrik cluster status message."
    message: String
    "Rubrik cluster upgrade status. The value reflects the status of the Rubrik cluster at the various stages involved in an upgrade, for example, pre-check, download, upgrade scheduling, and rollback of the upgrade."
    status: CdmClusterStatusTypeEnum!
    "Status of the Rubrik cluster upgrade process including information about the tasks that have been completed and tasks that are pending or ongoing."
    statusInfo: CdmClusterStatusInfo
}

type CdmClusterStatusInfo {
    "Number of nodes where rolling upgrade is complete."
    completedNodes: String
    "Node going through rolling upgrade currently."
    currentNode: String
    "Upgrade state of the node going through the rolling upgrade currently."
    currentNodeState: String
    "The upgrade state running at the time of the query."
    currentState: String
    "Progress percentage of the current upgrade state."
    currentStateProgress: String
    "The upgrade task running at the time of the query."
    currentTask: String
    "Status of the download job."
    downloadJobStatus: String
    "Download progress."
    downloadProgress: String
    "Time, in seconds, remaining for the download to complete."
    downloadRemainingTimeEstimateInSeconds: String
    "Download package version."
    downloadVersion: String
    "A list of upgrade states that are completed."
    finishedStates: String
    "Overall upgrade progress percentage."
    overallProgress: String
    "A list of upgrade states that are pending."
    pendingStates: String
    "Total number of nodes in the Rubrik cluster"
    totalNodes: String
}

type CdmHierarchyObjectConnection {
    count: Int!
    edges: [CdmHierarchyObjectEdge!]!
    nodes: [CdmHierarchyObject!]!
    pageInfo: PageInfo!
}

type CdmHierarchyObjectEdge {
    cursor: String!
    node: CdmHierarchyObject!
}

type CdmHostVolume {
    cdmId: String!
    clusterUuid: String!
    fileSystemType: String
    mountPoints: [String!]!
    size: Long
    "Id of the volume group this volume belongs to"
    volumeGroupId: String
    "Host volume's Id"
    volumeId: String!
}

type CdmInventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
}

"Live mount of a MSSQL database."
type CdmMssqlDatabaseLiveMount {
    "Internal ID of the live mount."
    cdmId: String!
    "Cluster UUID of the live mount."
    clusterUuid: String!
    "Timestamp when the mount was created."
    creationDate: DateTime
    "Forever ID of the live mount."
    fid: String!
    "Status of the live mount."
    isReady: Boolean!
    "ID of the database mount request job."
    mountRequestId: String!
    "Internal ID of the mounted database."
    mountedDatabaseId: String!
    "Name of the mounted database."
    mountedDatabaseName: String!
    "Internal ID of the source database."
    sourceDatabaseId: String!
    "ID of the database unmount request job."
    unmountRequestId: String!
}

type CdmMssqlDatabaseLiveMountConnection {
    count: Int!
    edges: [CdmMssqlDatabaseLiveMountEdge!]!
    nodes: [CdmMssqlDatabaseLiveMount!]!
    pageInfo: PageInfo!
}

type CdmMssqlDatabaseLiveMountEdge {
    cursor: String!
    node: CdmMssqlDatabaseLiveMount!
}

type CdmMssqlDbReplica {
    availabilityInfo: CdmMssqlDbReplicaAvailabilityInfo
    clusterUuid: String!
    hasPermissions: Boolean!
    instance: MssqlInstance!
    instanceRootId: String!
    isArchived: Boolean!
    isStandBy: Boolean!
    recoveryModel: String!
    snapshotNeeded: Boolean!
    state: String!
}

type CdmMssqlDbReplicaAvailabilityInfo {
    availabilityMode: String!
    replicaId: String!
    role: String!
}

type CdmSnapshot implements GenericSnapshot {
    archivalLocations: [DataLocation!]
    cdmId: String!
    cdmVersion: String!
    "children snapshot id list"
    childSnapshots: [CdmSnapshot!]!
    cloudNativeLocations: [DataLocation!]
    cluster: Cluster!
    consistencyLevel: ConsistencyLevelEnum
    date: DateTime!
    expirationDate: DateTime
    expiryHint: Boolean!
    "number of files in the snapshot"
    fileCount: Long!
    hasDelta: Boolean!
    "flag if the snapshot has image(s) converted."
    hasImageConverted: Boolean!
    id: UUID!
    indexingAttempts: Long!
    "flag if the snapshot is an anomaly."
    isAnomaly: Boolean!
    isCorrupted: Boolean!
    isDownloadedSnapshot: Boolean
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    isSapHanaIncrementalSnapshot: Boolean
    isUnindexable: Boolean!
    "Contains info regarding legal hold on snapshot, null otherwise."
    legalHoldInfo: LegalHoldInfo
    localLocations: [DataLocation!]
    locations: [DataLocation!]
    "Non-null when a user has assigned a SLA to this snapshot, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "Mapping from snapshot to delete pending action status"
    pendingSnapshotDeletion: PendingSnapshotDeletion
    replicationLocations: [DataLocation!]
    "SAP HANA specific metadata for the snapshot"
    sapHanaAppMetadata: SapHanaAppMetadata
    "sla domain of the snapshot"
    slaDomain: SlaDomain
    "The snappableId of the snapshot."
    snappableId: String!
    snappableNew: CdmHierarchySnappableNew!
    snapshotRetentionInfo: CDMSnapshotRetentionInfo
}

type CdmSnapshotConnection {
    count: Int!
    edges: [CdmSnapshotEdge!]!
    nodes: [CdmSnapshot!]!
    pageInfo: PageInfo!
}

type CdmSnapshotEdge {
    cursor: String!
    node: CdmSnapshot!
}

"Specific info for Target created on and synced from cdm cluster"
type CdmTarget implements Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

type CdmUpgradeAvailabilityReply {
    isAvailable: Boolean!
    status: UpgradeStatus
}

type CdmUpgradeInfo {
    "Operations the user are authorized to take on the cluster"
    authorizedOperations: AuthorizedOperations!
    "Cluster Job Status"
    clusterJobStatus: ClusterJobStatusTypeEnum
    "Status of cluster"
    clusterStatus: CdmClusterStatus
    "The cluster uuid."
    clusterUuid: UUID!
    "Current running state progress percentage"
    currentStateProgress: Float
    "Downloaded version of tarball"
    downloadedVersion: String
    "Finished states of upgrade"
    finishedStates: String
    "Time taken by the last upgrade."
    lastUpgradeDuration: UpgradeDurationReply
    "Overall upgrade Progress"
    overallProgress: Float
    "Pending states of upgrade"
    pendingStates: String
    "The version of the cluster before the upgrade."
    previousVersion: String
    "ScheduledUpgrade Action"
    scheduleUpgradeAction: String
    "ScheduledUpgrade timestamp"
    scheduleUpgradeAt: DateTime
    "ScheduledUpgrade Mode."
    scheduleUpgradeMode: String
    "Upgrade state machine status"
    stateMachineStatus: String
    "Last time when state machine was updated"
    stateMachineStatusAt: DateTime
    "Upgrade ending time"
    upgradeEndAt: DateTime
    "The upgrade event series id"
    upgradeEventSeriesId: String
    "Recommended upgrade version of cluster"
    upgradeRecommendationInfo: UpgradeRecommendationInfo
    "Upgrade started time"
    upgradeStartAt: DateTime
    "Version of cluster"
    version: String!
    "Version status of cluster"
    versionStatus: VersionStatusTypeEnum
}

type CdmUpgradeRecommendationReply {
    isRecommended: Boolean!
    status: UpgradeStatus
}

type CdmUpgradeReleaseDetail {
    description: String!
    gaReleaseDate: String!
    isRecommended: Boolean!
    isUpgradable: Boolean!
    md5Sum: String!
    name: String!
    releaseDate: String!
    releaseNotesLink: String!
    size: Long!
    tarDownloadLink: String!
}

type CdmUpgradeReleaseDetailsFromSupportPortalReply {
    compatibilityMatrixLink: String!
    releaseDetails: [CdmUpgradeReleaseDetail!]!
    supportSoftwareLink: String!
}

type CellData {
    displayableValue: DisplayableValue
    metadata: [Metadata!]!
}

"Certificate Information"
type Certificate {
    certificate: String!
    certificateId: Long!
    description: String!
    expiringAt: DateTime
    hasKey: Boolean!
    name: String!
    usedBy: [String!]!
}

type CertificateConnection {
    count: Int!
    edges: [CertificateEdge!]!
    nodes: [Certificate!]!
    pageInfo: PageInfo!
}

type CertificateEdge {
    cursor: String!
    node: Certificate!
}

"Certificate Information with ID and name."
type CertificateInfo {
    "ID of the certificate."
    certificateId: Long!
    "Name of the certificate."
    name: String
}

type ChartConfig {
    aggregations: [String!]!
    chartType: ChartType!
    chartViewId: String!
    defaultChart: Boolean!
    groupBys: [String!]!
    name: String!
}

type CheckGuestOsReply {
    success: Boolean!
    supportedOs: [GuestOSEnum!]!
    validationResult: [CheckGuestOsResult!]!
}

type CheckGuestOsResult {
    errorMessage: String!
    "vsphere vm instance"
    instance: VSphereVm!
    instanceId: String!
    instanceOs: GuestOSEnum!
    instanceType: String!
}

"Contains the details about RBA connectivity taskchains"
type CheckRBAConnectivityReply {
    failures: [Failure!]!
    successes: [Success!]!
}

type ChildInfo {
    vSphereVmInfo: VsphereBlueprintChildSnapshotInfo!
}

type ChildRecoverySpecMap {
    "Recovery point of the snappable."
    recoveryPoint: Long
    "the recovery spec"
    recoverySpec: RecoverySpec!
    "the fid of the recovery spec"
    recoverySpecFid: String!
    "Sla for post failover assignment."
    sla: SlaDomain
    "sla to be assigned post failover"
    slaId: String
    "the child snappable Fid"
    snappableFid: String!
    "the child snapshot Fid"
    snapshotId: String
}

type ChildVmRecoveryInfo {
    missedRecoverableRanges: [VmwareRecoverableRange!]!
    recoverableRanges: [VmwareRecoverableRange!]!
    recoveryPoints: VmwareRecoveryPoints!
    recoveryState: VmwareRecoveryState!
}

"Account-level settings for classification banners."
type ClassificationBannerSettings {
    "Color of banner on UI for accounts with classified data."
    bannerColor: BannerColor!
    "Text to be displayed on banner on UI for accounts with classified data."
    bannerText: String!
    "Determines if user has enabled classification banners"
    isBannerEnabled: Boolean!
}

"Account-level settings for classification login."
type ClassificationLoginSettings {
    "Determines if user has enabled classification login"
    isLoginEnabled: Boolean!
    "Text to be displayed on login modal for accounts with classified data."
    loginText: String!
}

type ClassificationPolicyDetail {
    analyzers: [Analyzer!]!
    colorEnum: ClassificationPolicyColor!
    createdTime: Long!
    creator: User
    deletable: Boolean!
    description: String!
    hierarchyObjectIds: [String!]!
    hierarchyObjects: [HierarchyObject!]!
    id: String!
    lastUpdatedTime: Long!
    mode: ClassificationPolicyMode!
    name: String!
    numAnalyzers: Int!
    objectStatuses: [ObjectStatus!]!
    totalObjects: Int!
    whitelists: [ClassificationPolicyWhitelistDetailedEntry!]!
}

type ClassificationPolicyDetailConnection {
    count: Int!
    edges: [ClassificationPolicyDetailEdge!]!
    nodes: [ClassificationPolicyDetail!]!
    pageInfo: PageInfo!
}

type ClassificationPolicyDetailEdge {
    cursor: String!
    node: ClassificationPolicyDetail!
}

type ClassificationPolicySummary {
    colorEnum: ClassificationPolicyColor!
    id: String!
    name: String!
}

type ClassificationPolicyWhitelistDetailedEntry {
    nativePath: String!
    snappable: HierarchyObject!
    stdPath: String!
    updateTs: Long!
    updateUsername: String!
}

"Updated service account details"
type Client {
    clientId: String!
    description: String!
    lastLogin: DateTime
    name: String!
}

"Indicates the ID and creation time of a snapshot."
type ClosestSnapshotDetail {
    "The snapshot creation time."
    date: DateTime!
    "The snapshot ID."
    id: String!
    "Whether the snapshot is anomalous or not."
    isAnomaly: Boolean!
}

"The result of a search for an unexpired snapshot closest to a point in time for a specific snappable."
type ClosestSnapshotSearchResult {
    "An error which occurred during the search."
    error: SnapshotSearchError
    "The snappable's ID."
    snappableId: String!
    "The snapshot closest to the point in time."
    snapshot: ClosestSnapshotDetail
}

type CloudAccountAddressBlockV4 {
    cidrBlock: String!
}

"Cloud Account ID along with Features and permissions serialized in JSON format."
type CloudAccountFeaturePermission {
    "ID of the cloud account for which feature permissions are provided."
    cloudAccountId: String!
    "List of features along with the associated permissions."
    featurePermissions: [FeaturePermission!]!
}

type CloudAccountSub {
    description: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    vpcId: String!
}

type CloudAccountSubnet {
    availabilityZone: String!
    cidrBlock: CloudAccountAddressBlockV4
    name: String!
    subnetId: String!
    vpcId: String!
}

type CloudAccountVpc {
    cidrBlock: CloudAccountAddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

"A NAS Cloud Direct site."
type CloudDirectSite {
    "The management endpoint URL for the site."
    endpoint: String!
    "The internal identifier for the site."
    id: String!
    "The display name for the site."
    name: String!
}

"Cloud native Account Id with its name"
type CloudNativeAccountIdWithName {
    id: String!
    name: String!
}

type CloudNativeFileRecoveryFeasibility {
    fileRecoveryFeasibility: FileRecoveryFeasibility!
    snapshotId: String!
}

type CloudNativeFileVersion {
    fileMode: FileModeEnum!
    lastModified: DateTime!
    sizeInBytes: Long!
    snapshot: CloudNativeSnapshotInfo!
}

"A single Label"
type CloudNativeLabel {
    labelKey: String!
    labelValue: String!
    matchAllValues: Boolean!
}

"Region where cloud native object exists."
type CloudNativeRegion {
    "Region where AWS native object exists. This field will be null if the object is not an AWS object."
    awsRegion: AwsNativeRegionEnum
    "Region where Azure native object exists. This field will be null if the object is not an Azure object."
    azureRegion: AzureNativeRegionEnum
    "Region where GCP native object exists. This field will be null if the object is not a GCP object."
    gcpRegion: GcpNativeRegion
}

"Recovery related details for a particular snapshot type."
type CloudNativeSnapshotDetailsForRecovery {
    "Polaris ID of the cloud account where the particular type of snapshot exists. This field is set only if file recovery is feasible. "
    cloudNativeAccountId: CloudNativeAccountIdWithName
    "Name of the cloud provider. Can be AWS/Azure/GCP. This field is set only if file recovery is feasible."
    cloudType: CloudProviderType!
    "Field specifying whether file recovery is feasible or not, and if infeasible, the reason for the same. Can have values IS_UNKNOWN, IS_FEASIBLE, IS_SNAPSHOT_EXPIRED, or IS_EXOCOMPUTE_NOT_CONFIGURED."
    fileRecoveryFeasibility: FileRecoveryFeasibility!
    "Region where the particular snapshot exists. This field is set only if file recovery is feasible."
    snapshotRegion: CloudNativeRegion!
    "Type of the snapshot. Can be SOURCE/REPLICATED/ARCHIVED."
    snapshotType: SnapshotType!
}

"Recovery related details for different snapshot types."
type CloudNativeSnapshotDetailsForRecoveryReply {
    "Details required for file recovery for different snapshot types of SOURCE, ARCHIVED and REPLICATED."
    snapshotDetails: [CloudNativeSnapshotDetailsForRecovery!]!
}

type CloudNativeSnapshotInfo {
    date: DateTime!
    id: String!
    isOnDemandSnapshot: Boolean!
}

"CloudNativeTagRule represents a single tag rule"
type CloudNativeTagRule {
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    effectiveSla: TagRuleEffectiveSla
    hasPermissionToModify: Boolean!
    id: String!
    name: String!
    objectType: ManagedObjectType!
    tag: TagRuleTag
}

type CloudNativeVersionedFile {
    absolutePath: String!
    displayPath: String!
    fileVersions: [CloudNativeFileVersion!]!
    filename: String!
    path: String!
}

type CloudNativeVersionedFileConnection {
    count: Int!
    edges: [CloudNativeVersionedFileEdge!]!
    nodes: [CloudNativeVersionedFile!]!
    pageInfo: PageInfo!
}

type CloudNativeVersionedFileEdge {
    cursor: String!
    node: CloudNativeVersionedFile!
}

type Cluster {
    "The cluster's activity series."
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated
    ): ActivitySeriesConnection!
    "The cluster's archival locations."
    archivalLocations: [ArchivalLocation!]!
    "Job status of a create cluster operation."
    ccprovisionInfo: ClusterMetadata
    "Cluster Upgrade info"
    cdmUpgradeInfo: CdmUpgradeInfo
    "The cluster disks."
    clusterDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterDiskFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterDiskConnection!
    "The cluster nodes."
    clusterNodeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterNodeConnection!
    "When the global manager connectivity was last updated."
    connectivityLastUpdated: DateTime
    "Sonar previewer config."
    datagovPreviewerConfig: PreviewerClusterConfig!
    "The cluster's default address."
    defaultAddress: String
    "Whether or not the cluster is encrypted."
    encryptionEnabled: Boolean!
    "The number of days remaining before the system fills up."
    estimatedRunway: Long!
    "The cluster's location."
    geoLocation: GeoLocation
    "The cluster's global manager connectivity status."
    globalManagerConnectivityStatus: GlobalManagerConnectivity
    "The cluster uuid."
    id: UUID!
    "Whether or not the cluster is healthy."
    isHealthy: Boolean!
    "Lambda config."
    lambdaConfig: GetLambdaConfigReply
    "Lambda feature history."
    lambdaFeatureHistory: LambdaFeatureHistory
    "The time the cluster was last connected"
    lastConnectionTime: DateTime
    "Metadata pull scheduler."
    metadataPullScheduler: JobsReply
    "The most recent metric of a cluster."
    metric: ClusterMetric
    "The metric time series of a cluster."
    metricTimeSeries(timeRange: TimeRangeInput, unit: TimeUnitEnum!): [metricTimeSeries!]!
    "The cluster name."
    name: String!
    "Whether the global manager connectivity is healthy."
    passesConnectivityCheck: Boolean
    "This field contains information about the various jobs that sync data from the CDM Cluster to Polaris"
    polarisSyncStatus: PolarisSyncStatus!
    "The cluster product type (e.g., CDM, DATOS, etc.)."
    productType: ClusterProductEnum
    "The time the cluster was registered."
    registrationTime: DateTime!
    "The cluster's replication sources."
    replicationSources: [ReplicationSource!]!
    "The cluster's replication targets."
    replicationTargets: [ReplicationTarget!]!
    "The cluster's snappables."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input"
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SnappableConnection!
    "The total number of snapshots."
    snapshotCount: Long!
    "The cluster state."
    state: clusterState!
    "The cluster status."
    status: ClusterStatus!
    "The cluster type."
    type: ClusterTypeEnum!
    "The software version."
    version: String
}

type ClusterConnection {
    count: Int!
    edges: [ClusterEdge!]!
    nodes: [Cluster!]!
    pageInfo: PageInfo!
}

type ClusterDisk {
    capacityBytes: Long!
    clusterId: UUID!
    diskType: ClusterDiskType!
    id: String!
    isEncrypted: Boolean!
    nodeId: String
    path: String!
    status: ClusterDiskStatus!
    unallocatedBytes: Long
    usableBytes: Long
}

type ClusterDiskConnection {
    count: Int!
    edges: [ClusterDiskEdge!]!
    nodes: [ClusterDisk!]!
    pageInfo: PageInfo!
}

type ClusterDiskEdge {
    cursor: String!
    node: ClusterDisk!
}

type ClusterEdge {
    cursor: String!
    node: Cluster!
}

"Cluster data with groupby info applied to it."
type ClusterGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Further provide groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [ClusterGroupBy!]!
    "The data groupby info."
    groupByInfo: ClusterGroupByInfo!
}

type ClusterGroupByConnection {
    count: Int!
    edges: [ClusterGroupByEdge!]!
    nodes: [ClusterGroupBy!]!
    pageInfo: PageInfo!
}

type ClusterGroupByEdge {
    cursor: String!
    node: ClusterGroupBy!
}

"Cluster interface CIDR map."
type ClusterInfCidrs {
    clusterId: String!
    clusterName: String!
    interfaceCidr: [InterfaceCidr!]!
}

type ClusterJobStatusType {
    enumValue: ClusterJobStatusTypeEnum!
}

"Metadata for a single cluster job."
type ClusterMetadata {
    "Current job status."
    jobStatus: CcpJobStatus!
    "Type of running job."
    jobType: CcpJobType!
    "Progress of job in percent."
    progress: Int!
    "Cloud vendor provider."
    vendor: CcpVendorType!
}

type ClusterMetric {
    availableCapacity: Long!
    ingestedSnapshotStorage: Long!
    lastUpdateTime: DateTime!
    liveMountCapacity: Long!
    miscellaneousCapacity: Long!
    physicalSnapshotStorage: Long!
    snapshotCapacity: Long!
    totalCapacity: Long!
    usedCapacity: Long!
}

type ClusterNode {
    brikId: String!
    clusterId: UUID!
    id: String!
    "Network interface of a Rubrik cluster node."
    interfaceCidrs: [ClusterNodeInterfaceCidr!]
    ipAddress: String
    needsInspection: Boolean
    status: String
}

type ClusterNodeConnection {
    count: Int!
    edges: [ClusterNodeEdge!]!
    nodes: [ClusterNode!]!
    pageInfo: PageInfo!
}

type ClusterNodeEdge {
    cursor: String!
    node: ClusterNode!
}

"Network interface of a Rubrik cluster node."
type ClusterNodeInterfaceCidr {
    "CIDR address for the interface."
    cidr: String!
    "Name of the interface."
    interfaceName: String!
}

"Object type containing the token, public key and product type used in registering a cluster"
type ClusterRegistrationToken {
    "The product type this token should be used to register."
    productType: String!
    "The public key of the token."
    pubkey: String!
    "The JWT that will be used to register the cluster."
    token: String!
}

"Replication target specific information."
type ClusterReplicationTarget {
    "Id of replication target."
    id: String!
    "Name of replication target."
    name: String!
}

type ClusterSlaDomain implements SlaDomain {
    archivalSpec: CdmArchivalSpec
    backupWindows: [BackupWindow!]!
    baseFrequency: SlaDuration
    cdmId: String!
    cluster: Cluster
    fid: String!
    firstFullBackupWindows: [BackupWindow!]!
    id: String!
    localRetentionLimit: SlaDuration
    migrationInfo: SlaMigrationInfo
    name: String!
    polarisManagedId: String
    protectedObjectCount: Int!
    replicationSpec: ReplicationSpec
    replicationSpecV2: [ReplicationSpecV2!]!
    snapshotSchedule: SnapshotSchedule
    version: String
}

type ClusterSlaDomainConnection {
    count: Int!
    edges: [ClusterSlaDomainEdge!]!
    nodes: [ClusterSlaDomain!]!
    pageInfo: PageInfo!
}

type ClusterSlaDomainEdge {
    cursor: String!
    node: ClusterSlaDomain!
}

"Metadata for rendering a cluster sla for filter."
type ClusterSlaDomainForFilter {
    "The name of the cluster the sla belongs to"
    clusterName: String
    "The uuid of the cluster the sla belongs to"
    clusterUuid: UUID!
    "The fid of the sla"
    id: String!
    "The name of the sla"
    name: String!
}

type ClusterSlaDomainForFilterConnection {
    count: Int!
    edges: [ClusterSlaDomainForFilterEdge!]!
    nodes: [ClusterSlaDomainForFilter!]!
    pageInfo: PageInfo!
}

type ClusterSlaDomainForFilterEdge {
    cursor: String!
    node: ClusterSlaDomainForFilter!
}

type ClusterType {
    enumValue: ClusterTypeEnum!
}

type Column {
    aggregate: Boolean!
    default: Boolean!
    dimensional: Boolean!
    displayName: String!
    name: String!
    nullable: Boolean!
    sortable: Boolean!
    type: DataTypeEnum!
}

type CommonNotificationConfig {
    hostname: String!
    networkType: NetworkProtocolTypeEnum!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
}

"Response of the operation to complete Azure Cloud Account OAuth."
type CompleteAzureCloudAccountOAuthResponse {
    "Specifies whether the OAuth authentication was completed successfully. When true, it means the authentication was successful."
    isSuccess: Boolean!
    "Subscriptions for which the OAuth user has read permission on Azure."
    subscriptions: [AzureCloudAccountSubscription!]!
}

type ComplianceStatus {
    enumValue: ComplianceStatusEnum!
}

type ConfigFilter {
    filter: ReportFilter!
    filterHeader: [String!]!
}

"Additional information about the connection status of the the replication pair Rubrik clusters."
type ConnectionStatusDetails {
    "Connection between source cluster and Rubrik (connected, disconnected, or not added)."
    sourceAndRubrik: ClusterConnectionStatus!
    "Connection between source and target Rubrik clusters (connected or disconnected)."
    sourceAndTarget: ConnectionStatusType!
    "Connection between target cluster and Rubrik (connected, disconnected, or not added)."
    targetAndRubrik: ClusterConnectionStatus!
}

type Context {
    status: UpgradeStatus
}

type CountOfObjectsProtectedBySLAsResult {
    slaObjectCounts: [SLAIdToObjectCount!]!
}

type Crawl {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    crawlObj(snappableFid: String!): CrawlObj!
    crawlObjConnection: CrawlObjConnection!
    endTime: Long!
    failedObjectCount: Int!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    id: String!
    name: String!
    progress: Float!
    snappableTypeSummaries: [SnappableTypeSummary!]!
    startTime: Long!
    status: CrawlStatusEnum!
    totalHits: Int!
    user: User
}

type CrawlConnection {
    count: Int!
    edges: [CrawlEdge!]!
    nodes: [Crawl!]!
    pageInfo: PageInfo!
}

type CrawlEdge {
    cursor: String!
    node: Crawl!
}

type CrawlObj {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    cluster: Cluster!
    crawlId: String!
    endTime: Long!
    error: String!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!
    ): FileResultConnection!
    filesAnalyzeable: Long!
    filesAnalyzed: Long!
    filesTotal: Long!
    filesWithHits: Long!
    progress: Float!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTime: Long!
    startTime: Long!
    status: SnappableCrawlStatus!
    totalHits: Int!
}

type CrawlObjConnection {
    count: Int!
    edges: [CrawlObjEdge!]!
    nodes: [CrawlObj!]!
    pageInfo: PageInfo!
}

type CrawlObjEdge {
    cursor: String!
    node: CrawlObj!
}

"AWS Exocompute Configs Create Response."
type CreateAwsExocomputeConfigsReply {
    "List of exocompute configurations."
    configs: [AwsExocomputeGetConfigResponse!]!
}

"Output for CreateCloudNativeAwsStorageSetting mutation"
type CreateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"Storage settings info for Azure"
type CreateCloudNativeAzureStorageSettingReply {
    targetMapping: TargetMapping!
}

"The status of Create label Rule request. It contains theid of the new label rule if request succeeds"
type CreateCloudNativeLabelRuleReply {
    labelRuleId: String!
}

"The status of Create tag Rule request. It contains theid of the new tag rule if request succeeds"
type CreateCloudNativeTagRuleReply {
    tagRuleId: String!
}

"Contains information about the snapshots placed on legal hold."
type CreateLegalHoldReply {
    "List of the snapshot IDs placed on legal hold."
    snapshotIds: [String!]!
}

"O365 create app kickoff response"
type CreateO365AppKickoffResp {
    appClientId: String!
    csrfToken: String!
    o365TenantId: String!
}

"Reply to Create on-demand job request."
type CreateOnDemandJobReply {
    jobId: Long!
    taskchainId: String!
}

"Contains the URLs for RBA installers"
type CreateRBAInstallerReply {
    debianUrl: String!
    rpmUrl: String!
    windowsUrl: String!
}

"Service account details"
type CreateServiceAccountReply {
    accessTokenUri: String!
    clientId: String!
    clientSecret: String!
    name: String!
}

"Reply Object for CreateSnapMirrorCloudRelationship"
type CreateSnapMirrorCloudRelationshipReply {
    output: RelationshipSummary
}

"CSR Information"
type Csr {
    csr: String!
    csrId: Long!
    hostnames: [String!]!
    name: String!
}

type CsrConnection {
    count: Int!
    edges: [CsrEdge!]!
    nodes: [Csr!]!
    pageInfo: PageInfo!
}

type CsrEdge {
    cursor: String!
    node: Csr!
}

"Current rolling upgrade node status information"
type CurrentStateInfo {
    "Completed stages"
    completedStates: [String!]!
    "Current stage"
    currentState: String!
    "Current task index in stage"
    currentTaskIndex: String!
    "Current task name"
    currentTaskName: String!
    "Pending stages"
    pendingStates: [String!]!
    "Current task result"
    result: String!
    "Current status"
    status: String!
}

type CustomAnalyzerMatch {
    endIndex: Int!
    startIndex: Int!
}

"Metadata for rendering a custom report."
type CustomReport {
    "The list of charts in the custom report."
    charts: [ReportChartType!]!
    "Time the report was created."
    createdAt: DateTime!
    "The filters applied to the data in the report."
    filters: CustomReportFilters!
    "The metrics focus of the custom report."
    focus: ReportFocusEnum!
    "ID of the custom report."
    id: Int!
    "True if report should be hidden from gallery view."
    isHidden: Boolean!
    "True if report is auto-generated and not allowed to be edited."
    isReadOnly: Boolean!
    "Name of the custom report."
    name: String!
    newestSyncDate: DateTime
    oldestSyncDate: DateTime
    "The creator of the custom report."
    owner: User!
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    "The list of tables in the custom report."
    tables: [ReportTableType!]!
    "Time the report was last updated (i.e., saved)."
    updatedAt: DateTime!
    "Time the report was last viewed / opened by the user."
    viewedAt: DateTime!
}

type CustomReportConnection {
    count: Int!
    edges: [CustomReportEdge!]!
    nodes: [CustomReport!]!
    pageInfo: PageInfo!
}

type CustomReportEdge {
    cursor: String!
    node: CustomReport!
}

"Filter configs for a report."
type CustomReportFilters {
    "List of activity object types to filter on."
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of clusters to filter on."
    cluster: [Cluster!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Anomalous value to filter data on."
    isAnomaly: Boolean
    "List of activity statuses to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    slaDomain: [SlaDomain!]
    "The time range for sla compliance report"
    slaTimeRange: SLAComplianceTimeRangeEnum
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRange
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

"CustomReport data with groupby info applied to it."
type CustomReportGroupBy {
    "The data groupby info."
    groupByInfo: CustomReportGroupByInfo!
    "Paginated snappable data."
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "sort order"
        sortOrder: SortOrderEnum
    ): CustomReportConnection!
    "Further provide groupings for the data."
    reportGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [CustomReportGroupBy!]!
}

type CustomReportGroupByConnection {
    count: Int!
    edges: [CustomReportGroupByEdge!]!
    nodes: [CustomReportGroupBy!]!
    pageInfo: PageInfo!
}

type CustomReportGroupByEdge {
    cursor: String!
    node: CustomReportGroupBy!
}

type DailyAnalysisDetails {
    anomalyEventCount: Long!
    createdDataBytes: Long!
    createdFileCount: Long!
    day: String!
    deletedDataBytes: Long!
    deletedFileCount: Long!
    modifiedDataBytes: Long!
    modifiedFileCount: Long!
    suspiciousDataBytes: Long!
    suspiciousFileCount: Long!
}

type DailySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

type DataLocation {
    clusterUuid: UUID!
    createDate: DateTime!
    id: String!
    isActive: Boolean!
    isArchived: Boolean!
    "the name of the data location"
    name: String!
    type: LocationTypeEnum!
}

"Cluster specific info for supported cluster"
type DataLocationSupportedCluster {
    name: String!
    uuid: String!
    version: String!
}

"Objects containing Datastore names for a given ESXi host"
type Datastore {
    name: String!
}

"Datastores for a given ESXi host"
type DatastoreListResponse {
    data: [Datastore!]!
    hasMore: Boolean
    total: Long
}

type DayOfWeekOpt {
    day: DayOfWeekEnum!
}

"Metadata specific to the Db2 instance."
type Db2InstanceMetaData {
    "Timestamp when last refresh job got triggered for the Db2 instance."
    lastRefreshTime: DateTime
    "The password for the Db2 instance."
    password: String!
    "Current status for the Db2 instance."
    status: Db2InstanceStatus!
    "Message associated with current status of the Db2 instance."
    statusMessage: [String!]!
    "The username for the Db2 instance."
    username: String!
}

"Represents a DB parameter group in AWS."
type DbParameterGroup {
    "Amazon Resource Name (ARN) of the DB parameter group."
    arn: String!
    "Family name of the DB parameter group."
    family: String!
    "Name of the DB parameter group."
    name: String!
}

"Reply for deletion of aws compute setting"
type DeleteAwsCloudComputeSettingReply {
    success: Boolean!
}

"AWS Exocompute Configs Delete Response."
type DeleteAwsExocomputeConfigsReply {
    "Deletion status for exocompute configurations."
    deletionStatus: [AwsExocomputeConfigsDeletionStatusType!]!
}

"Response for the request to delete IAM user-based AWS cloud account."
type DeleteAwsIamUserBasedCloudAccountReply {
    "Contains success response message."
    message: String
}

"Response of the operation to delete Azure Cloud Account."
type DeleteAzureCloudAccountResponse {
    "Status of the operation to delete Azure Cloud Account."
    status: [DeleteAzureCloudAccountStatus!]!
}

"Status of the operation to delete Azure Cloud Account."
type DeleteAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Error received during deletion of Azure Cloud Account."
    error: String!
    "Specifies whether the deletion of Azure Cloud Account was successful. When true, the deletion was successful."
    isSuccess: Boolean!
}

"Response of the operation to delete Azure Cloud Account without OAuth."
type DeleteAzureCloudAccountWithoutOAuthResponse {
    "Status of the operation to delete Azure Cloud Account."
    status: [DeleteAzureCloudAccountStatus!]!
}

type DeleteBlueprintRecoverySpecReply {
    recoverySpecIds: [RecoverySpecId!]!
}

"Statistic result for certain file/folder"
type DiffData {
    bytesCreated: Long!
    bytesDeleted: Long!
    bytesModified: Long!
    filesCreated: Long!
    filesDeleted: Long!
    filesModified: Long!
    isDeleted: Boolean!
    isFolder: Boolean!
    lastModifiedTime: Long!
    mode: Int!
    path: String!
    suspiciousFilesAdded: Long!
    totalSize: Long!
}

"Diff fmd result."
type DiffFMDReply {
    data: [DiffData!]!
    previousSnapshotDate: Long!
    previousSnapshotId: String!
}

"Taskchain ID of the taskchain to disable the specified project"
type DisableProjectReply {
    taskchainUuid: String!
}

type DisplayableValueBoolean implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Boolean
}

type DisplayableValueDateRange implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: PastDurationEnum
}

type DisplayableValueDateTime implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: DateTime
}

type DisplayableValueFloat implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Float
}

type DisplayableValueInteger implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Int
}

type DisplayableValueLong implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: Long
}

type DisplayableValueNull implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
}

type DisplayableValueString implements DisplayableValue {
    displayValue: String!
    reportHeader: String!
    serializedValue: String!
    value: String
}

"Contains information about the snapshots dissolved from legal hold."
type DissolveLegalHoldReply {
    "List of the snapshot IDs dissolved from  legal hold."
    snapshotIds: [String!]!
}

type DownloadActiveSlaWithReplicationCsvReply {
    downloadLink: String!
    isActiveSla: Boolean!
}

type DownloadCdmUpgradesPdfReply {
    downloadLink: String!
}

type DownloadCsvReply {
    "Status of queueing a download CSV job."
    isSuccessful: Boolean!
}

"The status of download cloud native files req. It contains thetaskchain id of the download job if succeeded"
type DownloadFilesReply {
    taskchainId: String!
}

type DownloadJobInfo {
    eventId: String!
    jobInstanceId: String!
    progress: Float!
    remainingTimeEstimateInSeconds: Long!
    status: String!
}

"Link to report"
type DownloadLink {
    "The link to the report."
    link: String!
}

type DownloadPackageReply {
    jobId: String!
}

type DownloadPackageReplyWithUuid {
    jobId: String!
    uuid: String!
}

type DownloadPackageStatusReply {
    availability: String!
    description: String!
    downloadJobInfo: DownloadJobInfo
    md5Sum: String!
    size: Long!
    version: String!
}

type DownloadResultsCsvReply {
    downloadLink: String!
}

type Ec2Blueprint implements Blueprint & HierarchyObject & HierarchySnappable & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [Ec2InstanceChild!]!
    "The cloud account of EC2 Blueprint"
    cloudAccount: AwsNativeAccount
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastTestFailoverTimeMillisOpt: Long
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: PolarisSnapshot
    "The newest snapshot ready for failover"
    newestFailoverReadySnapshot(isTestFailover: Boolean!): PolarisSnapshot
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    status: AppBlueprintStatusEnum!
}

type Ec2BlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    snappableId: String!
}

type Ec2InstanceChild implements BlueprintChild {
    bootPriority: Int!
    "failover instance of child snappable"
    failoverInstance: Ec2BlueprintChildFailoverInstance
    fid: UUID!
    "recoverySpec of child snappable"
    recoverySpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): RecoverySpec
    "resourceSpec of child snappable"
    resourceSpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): Ec2InstanceResourceSpec
    "the child snappable"
    snappable: AwsNativeEc2Instance
    snappableType: ObjectTypeEnum!
}

type Ec2InstanceNic {
    key: String!
    secGroup: SnappableSecurityGroup
    subnet: SnappableSubnet
}

type Ec2InstanceRecoverySpec implements RecoverySpec {
    availabilityZone: String
    awsNicSpecs: [AwsVMNicSpec!]!
    awsVolumeSpecs: [AwsVMVolumeSpec!]!
    dedicatedHostId: String
    hostAffinity: String
    instanceTypeId: Int!
    instanceTypeName: String!
    keyName: String
    placementGroup: String
    "Recovery point of the snappable."
    recoveryPointOpt: Long
    tenancy: AwsInstanceTenancyEnum!
    userData: String
    version: Long!
}

type Ec2InstanceResourceSpec implements ResourceSpec {
    ec2InstanceNics: [Ec2InstanceNic!]!
    ec2InstanceVolumeSpecs: [Ec2InstanceVolume!]!
    instanceType: String!
    instanceTypeMemoryMbs: Int!
    instanceTypeVCpus: Int!
    isArchived: Boolean!
    nativeId: String!
    osType: String!
    "Recovery point of the snappable."
    recoveryPointOpt: Long
    region: String!
    snappableId: String!
    snappableName: String!
    snapshotId: String!
}

type Ec2InstanceVolume {
    key: String!
    sizeGbs: Int!
}

"""

Supported in v5.1+
"""
type EffectiveSlaHolder {
    """

    Required. Supported in v5.1+
    v5.1: ID of the effective SLA domain
    v5.2+: The ID of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainId: String!
    """

    Required. Supported in v5.1+
    v5.1: name of the effective SLA domain
    v5.2+: The name of the SLA Domain that controls the protection of the Rubrik object.
    """
    effectiveSlaDomainName: String!
    """

    Supported in v5.1+
    v5.1: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.2+: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    v5.1: ID of the object from which the effective SLA domain is inherited.
    v5.2+: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectId: String
    """

    Supported in v5.1+
    v5.1: Name of the object from which the effective SLA domain is inherited.
    v5.2+: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
    """
    effectiveSlaSourceObjectName: String
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA Domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
}

"Status of 'enable automatic upload' service on certain cluster"
type EnableAutomaticFmdUploadReply {
    clusterId: String!
    enabled: Boolean!
}

"Toggle enable/disable app consistent protection for VM"
type EnableDisableAppConsistencyReply {
    failedSnappableIds: [String!]!
    successSnappableIds: [String!]!
}

"Status of 'enable lambda service' on certain cluster"
type EnableLambdaForSnappableReply {
    diffFmdEnabled: Boolean!
    fullFmdEnabled: Boolean!
    snappableFid: String!
}

type EventDigest {
    account: String!
    digestId: Int!
    digestName: String!
    eventDigestConfigJson: String!
    frequency: Int!
    includeAudits: Boolean!
    includeEvents: Boolean!
    isImmediate: Boolean!
    recipientUserId: String!
}

type ExocomputeStorageAccountIds {
    ids: [String!]!
}

"Taskchain ID of the taskchain to export GCP native disk"
type ExportDiskReply {
    taskchainUuid: String!
}

"Taskchain ID of the taskchain to export GCP native instance"
type ExportGCEInstanceReply {
    taskchainUuid: String!
}

"A protection task."
type Failover {
    "ID of the associated appblueprint."
    appBlueprintId: UUID!
    "Name of the associated appblueprint."
    appBlueprintName: String!
    "Duration of the appflows failover job, number of millis."
    duration: Long
    "The timestamp that the job ends."
    endTime: DateTime
    "The failover job status."
    failoverStatus: FailoverStatusEnum!
    "The type of the failover job."
    failoverType: FailoverTypeEnum!
    "ID of the failover job."
    id: String!
    "The status of the last test."
    lastTestStatus: LastTestStatusEnum
    "The timestamp of the last test."
    lastTestTime: DateTime
    "The report for the failover job."
    report(
        "failover report ID"
        failoverReportId: String!
    ): FailoverReport
    "Source of the snappable associated with this appflows failover job."
    source: String!
    "The timestamp that the job starts."
    startTime: DateTime!
    "Target site of the appflows failover job."
    targetSite: String!
    taskchainId: UUID!
}

type FailoverChart {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
}

type FailoverClusterApp implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterAppDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterId: String!
    failoverClusterType: String
    "Get the host failover cluster object of the failover cluster app"
    hostFailoverCluster: HostFailoverCluster!
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterAppPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: FailoverClusterStatusObject
    vips: [String!]!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppConfig {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSource
    """

    Required. Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String!
    failoverClusterType: FailoverClusterTypeEnum!
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String!
}

type FailoverClusterAppConnection {
    count: Int!
    edges: [FailoverClusterAppEdge!]!
    nodes: [FailoverClusterApp!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppDescendantTypeConnection {
    count: Int!
    edges: [FailoverClusterAppDescendantTypeEdge!]!
    nodes: [FailoverClusterAppDescendantType!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppDescendantTypeEdge {
    cursor: String!
    node: FailoverClusterAppDescendantType!
}

type FailoverClusterAppEdge {
    cursor: String!
    node: FailoverClusterApp!
}

type FailoverClusterAppPhysicalChildTypeConnection {
    count: Int!
    edges: [FailoverClusterAppPhysicalChildTypeEdge!]!
    nodes: [FailoverClusterAppPhysicalChildType!]!
    pageInfo: PageInfo!
}

type FailoverClusterAppPhysicalChildTypeEdge {
    cursor: String!
    node: FailoverClusterAppPhysicalChildType!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppSource {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrder!]!
    "Virtual IP addresses of the failover cluster."
    vips: [String!]!
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!]!
}

"""

Supported in v5.2+
"""
type FailoverClusterAppSummary {
    connectionStatus: FailoverClusterAppConnectionStatusEnum!
    effectiveSlaHolder: EffectiveSlaHolder
    failoverClusterAppConfig: FailoverClusterAppConfig
    """

    Supported in v5.3+
    The failover cluster name of the failover cluster app. The failover cluster is a group of hosts that provides high availability for running failover clustered applications.
    """
    failoverClusterName: String
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster app.
    """
    id: String!
    operatingSystemType: FailoverClusterOsTypeEnum
    """

    Required. Supported in v5.2+
    """
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignmentEnum
}

"""

Supported in v5.2+
"""
type FailoverClusterDetail {
    failoverClusterSummary: FailoverClusterSummary
    """

    Required. Supported in v5.2+
    Count of the number of failover cluster apps.
    """
    numApps: Int!
    """

    Required. Supported in v5.2+
    Count of the number of nodes on the failover cluster.
    """
    numNodes: Int!
}

"""

Supported in v5.2+
"""
type FailoverClusterNode {
    connectionStatus: FailoverClusterNodeConnectionStatusEnum!
    """

    Required. Supported in v5.2+
    ID of the node in the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Name of the node in the failover cluster.
    """
    name: String!
    """

    Supported in v5.3+
    Operating system of the node in the failover cluster.
    """
    operatingSystem: String
}

"""

Supported in v5.2+
"""
type FailoverClusterNodeOrder {
    """

    Required. Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String!
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int!
}

"Additional information about the status of the failover cluster"
type FailoverClusterStatusObject {
    connectivity: String!
    timestamp_millis: DateTime
}

"""

Supported in v5.2+
"""
type FailoverClusterSummary {
    connectionStatus: FailoverClusterConnectionStatusEnum!
    effectiveSlaHolder: EffectiveSlaHolder
    """

    Required. Supported in v5.2+
    ID assigned to the failover cluster.
    """
    id: String!
    """

    Required. Supported in v5.2+
    Cluster name assigned to the failover cluster.
    """
    name: String!
    """

    Required. Supported in v5.2+
    Details of the nodes of this failover cluster.
    """
    nodes: [FailoverClusterNode!]!
    operatingSystemType: FailoverClusterOsTypeEnum
    """

    Required. Supported in v5.2+
    """
    primaryClusterId: String!
    slaAssignable: SlaAssignable
    slaAssignment: SlaAssignmentEnum
}

type FailoverClusterTopLevelDescendantTypeConnection {
    count: Int!
    edges: [FailoverClusterTopLevelDescendantTypeEdge!]!
    nodes: [FailoverClusterTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type FailoverClusterTopLevelDescendantTypeEdge {
    cursor: String!
    node: FailoverClusterTopLevelDescendantType!
}

type FailoverConnection {
    count: Int!
    edges: [FailoverEdge!]!
    nodes: [Failover!]!
    pageInfo: PageInfo!
}

type FailoverEdge {
    cursor: String!
    node: Failover!
}

type FailoverEvent {
    message: String!
    seq: Int!
    startTime: Long!
    status: String!
}

"Appflows failover jobs data with groupby info applied to it."
type FailoverGroupBy {
    "Paginated appflows failover jobs data."
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field"
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order"
        sortOrder: SortOrderEnum = Desc
    ): FailoverConnection!
    failoverGroupBy(
        "group appflows failover jobs by a field"
        groupBy: FailoverGroupByEnum!
    ): [FailoverGroupBy!]!
    "The data groupby info."
    groupByInfo: FailoverGroupByInfo!
}

type FailoverGroupByConnection {
    count: Int!
    edges: [FailoverGroupByEdge!]!
    nodes: [FailoverGroupBy!]!
    pageInfo: PageInfo!
}

type FailoverGroupByEdge {
    cursor: String!
    node: FailoverGroupBy!
}

type FailoverJobReport {
    elapsedTime: Long!
    endTime: Long!
    jobId: String!
    jobType: String!
    progress: Float!
    startTime: Long!
    status: String!
    steps: [FailoverStep!]!
}

"Failover report."
type FailoverReport {
    expireTime: DateTime!
    id: String!
    reportUrl: String
    "status of the failover report"
    status: AppflowsBlueprintFailoverReportStatusEnum!
}

"All source sites."
type FailoverSource {
    "Source of the snappable associated with this appflows failover job."
    source: String!
}

type FailoverSourceConnection {
    count: Int!
    edges: [FailoverSourceEdge!]!
    nodes: [FailoverSource!]!
    pageInfo: PageInfo!
}

type FailoverSourceEdge {
    cursor: String!
    node: FailoverSource!
}

type FailoverStatus {
    enumValue: FailoverStatusEnum!
}

type FailoverStep {
    elapsedTime: Long!
    message: String!
    progress: Float!
    seq: Int!
    startTime: Long!
    status: String!
    subSteps: [FailoverSubStep!]!
}

type FailoverSubStep {
    events: [FailoverEvent!]!
    message: String!
    seq: Int!
}

type FailoverTable {
    focus: ReportFocusEnum!
    groupBy: [FailoverGroupByEnum!]
    name: String!
    selectedColumns: [FailoverTableColumnEnum!]!
    sortBy: FailoverSortByEnum
    sortOrder: SortOrderEnum
}

"All target sites."
type FailoverTargetSite {
    "Target site of the appflows failover job."
    targetSite: String!
}

type FailoverTargetSiteConnection {
    count: Int!
    edges: [FailoverTargetSiteEdge!]!
    nodes: [FailoverTargetSite!]!
    pageInfo: PageInfo!
}

type FailoverTargetSiteEdge {
    cursor: String!
    node: FailoverTargetSite!
}

type FailoverType {
    enumValue: FailoverTypeEnum!
}

"Contains the failure details about RBA connectivity taskchains"
type Failure {
    error: String!
    snappableId: String!
}

"Fake data"
type FakeData {
    data: String!
}

type FakeDataConnection {
    count: Int!
    edges: [FakeDataEdge!]!
    nodes: [FakeData!]!
    pageInfo: PageInfo!
}

type FakeDataEdge {
    cursor: String!
    node: FakeData!
}

"Feature specific details for a cloud account."
type FeatureDetail {
    "IAM user access key for feature. This field has a non-empty value only for accounts with an IAM user credential provider."
    accessKey: String
    "Aws regions."
    awsRegions: [AwsCloudAccountRegionEnum!]!
    "Feature enum."
    feature: CloudAccountFeatureEnum!
    "Role ARN for feature. This field has a non-empty value only for CFT-based accounts."
    roleArn: String!
    "Stack ARN for feature. This field has a non-empty value only for CFT-based accounts."
    stackArn: String!
    "Feature status for a cloud account."
    status: CloudAccountStatusEnum!
    "User ARN for feature. This field has a non-empty value only for accounts with an IAM user credential provider."
    userArn: String
}

"A flag with a dynamically computed value."
type FeatureFlag {
    "Name of the flag."
    name: FeatureFlagNameEnum!
    "Computed value of this flag."
    variant: String
}

"A collection of all feature flags"
type FeatureFlagAll {
    "List of flags."
    flags: [FeatureFlag!]!
}

"Feature along with permissions serialized in JSON format."
type FeaturePermission {
    "Name of the feature Rubrik provides to the customers. Ex- CLOUD_NATIVE_PROTECTION, CLOUD_NATIVE_ARCHIVAL"
    feature: CloudAccountFeatureEnum!
    "The permissions required for supporting the feature given by the feature field."
    permissionJson: String!
    version: Int!
}

type FederatedLoginStatus {
    enabled: Boolean!
    inventoryCardEnabled: Boolean!
}

type FileAccessResult {
    accessType: ActivityAccessTypeEnum!
    directory: String!
    filename: String!
    nativePath: String!
    numAccesses: Int!
}

type FileResult {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerResults: [AnalyzerResult!]!
    directory: String!
    errorCode: AnalyzerErrorCodeEnum!
    filename: String!
    filesWithHits: Hits
    hits: Hits!
    lastAccessTime: Long!
    lastModifiedTime: Long!
    mode: DataGovFileModeEnum!
    nativePath: String!
    numActivities: Long!
    numActivitiesBreakdown: [ActivityResult!]!
    numActivitiesDelta: Long!
    numDescendantErrorFiles: Long!
    numDescendantFiles: Int!
    numDescendantFolders: Long!
    numDescendantSkippedExtFiles: Long!
    numDescendantSkippedSizeFiles: Long!
    openAccessFiles: Hits
    openAccessFilesWithHits: Hits
    openAccessFolders: Hits
    openAccessStaleFiles: Hits
    openAccessType: OpenAccessTypeEnum!
    owner: String!
    paginationId: String!
    size: Long!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTimestamp: Long!
    staleFiles: Hits
    staleFilesWithHits: Hits
    stalenessType: StalenessTypeEnum!
    stdPath: String!
}

type FileResultConnection {
    count: Int!
    edges: [FileResultEdge!]!
    nodes: [FileResult!]!
    pageInfo: PageInfo!
}

type FileResultEdge {
    cursor: String!
    node: FileResult!
}

"""

Supported in v5.0+
"""
type FileVersion {
    """

    Supported in v5.0+
    The type of file, either a regular file or a directory.
    """
    fileMode: String
    """

    Supported in v5.0+
    """
    lastModified: String
    """

    Supported in v5.0+
    """
    size: Long
    """

    Supported in v5.0+
    The snapshot this file belongs to.
    """
    snapshotId: String
    """

    Supported in v5.0+
    The location where the file is stored, either in the cloud or locally.
    """
    source: String
}

"""

Supported in v5.0+
"""
type FilesetArraySpec {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"""

Supported in v5.0+
"""
type FilesetDetail {
    """

    Supported in v5.0+
    """
    archiveStorage: Long
    """

    Supported in v5.0+
    """
    archivedSnapshotCount: Int
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    filesetSummary: FilesetSummary
    filesetUpdate: FilesetUpdate
    """

    Supported in v5.0+
    """
    localStorage: Long
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    """

    Supported in v5.0+
    """
    protectionDate: DateTime
    """

    Required. Supported in v5.0+
    """
    snapshotCount: Int!
    """

    Supported in v5.0+
    """
    snapshots: [FilesetSnapshotSummary!]!
}

"""

Supported in v5.0+
"""
type FilesetDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type FilesetOptions {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"""

Supported in v5.0+
"""
type FilesetSnapshotDetail {
    filesetSnapshotSummary: FilesetSnapshotSummary
    """

    Required. Supported in v5.0+
    """
    lastModified: String!
    """

    Required. Supported in v5.0+
    """
    size: Long!
    """

    Supported in v5.0+
    """
    verbose: FilesetSnapshotVerbose
}

"""

Supported in v5.0+
"""
type FilesetSnapshotSummary {
    baseSnapshotSummary: BaseSnapshotSummary
    """

    Supported in v5.0+
    """
    fileCount: Long
    """

    Required. Supported in v5.0+
    """
    filesetName: String!
    """

    Supported in v5.1+
    """
    snapdiffUsed: Boolean
}

"""

Supported in v5.0+
"""
type FilesetSnapshotVerbose {
    """

    Required. Supported in v5.0+
    Whether or not the fileset snapshot has fingerprint info.
    """
    hasFingerprint: Boolean!
    """

    Required. Supported in v5.0+
    List a partition paths for the fileset snapshot.
    """
    partitionPaths: [String!]!
}

"""

Supported in v5.0+
"""
type FilesetSummary {
    """

    Supported in v5.0+
    """
    arraySpec: FilesetArraySpec
    """

    Supported in v5.0+
    v5.0: The ID of the effective SLA domain for this Fileset
    v5.1+: The ID of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainId: String
    """

    Supported in v5.0+
    v5.0: The name of the effective SLA domain for this Fileset
    v5.1+: The name of the effective SLA Domain for this fileset.
    """
    effectiveSlaDomainName: String
    """

    Supported in v5.0+
    v5.0: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
    v5.1+: Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
    """
    effectiveSlaDomainPolarisManagedId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    """

    Supported in v5.0+
    """
    exceptions: [String!]!
    """

    Supported in v5.0+
    """
    excludes: [String!]!
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    """

    Supported in v5.3+
    The name of the failover cluster app.
    """
    failoverClusterAppName: String
    filesetOptions: FilesetOptions
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Required. Supported in v5.0+
    """
    hostName: String!
    """

    Required. Supported in v5.0+
    """
    includes: [String!]!
    """

    Supported in v5.1+
    An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
    """
    isEffectiveSlaDomainRetentionLocked: Boolean
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    """

    Required. Supported in v5.0+
    """
    isRelic: Boolean!
    """

    Supported in v5.0+
    """
    operatingSystemType: String
    """

    Supported in v5.2+
    v5.2: Describes any pending SLA Domain assignment to this object.
    v5.3+: Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    """

    Supported in v5.0+
    """
    shareId: String
    slaAssignable: SlaAssignable
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    """

    Required. Supported in v5.0+
    """
    templateId: String!
    """

    Required. Supported in v5.0+
    """
    templateName: String!
}

type FilesetTemplate implements CdmHierarchyObject & HierarchyObject {
    allowBackupHiddenFoldersInNetworkMounts: Boolean!
    allowBackupNetworkMounts: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    backupScriptErrorHandling: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FilesetTemplateDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    exceptions: [String!]!
    excludes: [String!]!
    "The fid of the hierarchy object."
    id: UUID!
    includes: [String!]!
    isArrayEnabled: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    osType: FilesetOSType!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FilesetTemplatePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    postBackupScript: String!
    preBackupScript: String!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "Share type of this fileset template"
    shareType: ShareTypeEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type FilesetTemplateConnection {
    count: Int!
    edges: [FilesetTemplateEdge!]!
    nodes: [FilesetTemplate!]!
    pageInfo: PageInfo!
}

"""

Supported in v5.0+
"""
type FilesetTemplateCreate {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!]!
    """

    Supported in v5.0+
    """
    excludes: [String!]!
    filesetOptions: FilesetOptions
    """

    Required. Supported in v5.0+
    """
    includes: [String!]!
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Required. Supported in v5.0+
    """
    name: String!
    operatingSystemType: FilesetTemplateCreateOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplateCreateShareTypeEnum
}

type FilesetTemplateDescendantTypeConnection {
    count: Int!
    edges: [FilesetTemplateDescendantTypeEdge!]!
    nodes: [FilesetTemplateDescendantType!]!
    pageInfo: PageInfo!
}

type FilesetTemplateDescendantTypeEdge {
    cursor: String!
    node: FilesetTemplateDescendantType!
}

"""

Supported in v5.0+
"""
type FilesetTemplateDetail {
    filesetTemplateCreate: FilesetTemplateCreate
    """

    Supported in v5.0+
    Number of hosts where this template has been applied.
    """
    hostCount: Int
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    """
    isArchived: Boolean
    """

    Supported in v6.0+
    Specifies whether this is created by a Kupr Host.
    """
    isCreatedByKupr: Boolean
    """

    Required. Supported in v5.0+
    """
    primaryClusterId: String!
    """

    Supported in v5.0+
    Number of shares where this template has been applied.
    """
    shareCount: Int
}

"""

Supported in v5.0+
"""
type FilesetTemplateDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [FilesetTemplateDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type FilesetTemplateEdge {
    cursor: String!
    node: FilesetTemplate!
}

type FilesetTemplatePhysicalChildTypeConnection {
    count: Int!
    edges: [FilesetTemplatePhysicalChildTypeEdge!]!
    nodes: [FilesetTemplatePhysicalChildType!]!
    pageInfo: PageInfo!
}

type FilesetTemplatePhysicalChildTypeEdge {
    cursor: String!
    node: FilesetTemplatePhysicalChildType!
}

"""

Supported in v5.0+
"""
type FilesetUpdate {
    """

    Supported in v5.0+
    v5.0-v5.1: Assign Fileset to SLA domain
    v5.2+: Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
    """
    forceFull: Boolean
    """

    Supported in v5.2+
    Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
    """
    forceFullPartitionIds: [Int!]!
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
}

type FilterOption {
    displayValue: String!
    value: String
}

"Process delete of aws cloud account."
type FinalizeAwsCloudAccountDeletionReply {
    "Contains success response message."
    message: String
}

"Response for the operation to finalize protection for AWS cloud accounts."
type FinalizeAwsCloudAccountProtectionReply {
    "Contains success response message."
    awsChildAccounts: [AwsCloudAccount!]!
    "Contains success response message."
    message: String
}

"Detail of the Gcp Cloud Account Add operations."
type GcpCloudAccountAddProjectDetail {
    error: String!
    projectId: String!
    uuid: String!
}

"Gcp Cloud Account Add Projects Response."
type GcpCloudAccountAddProjectsResponse {
    details: [GcpCloudAccountAddProjectDetail!]!
}

"Details of the Gcp Cloud Account feature."
type GcpCloudAccountFeatureDetail {
    feature: CloudAccountFeatureEnum!
    status: CloudAccountStatusEnum!
}

"List of permissions missing for project addition for projects ineligible for addition."
type GcpCloudAccountMissingPermissionsForAddition {
    missingPermissions: [String!]!
    projectId: String!
}

"Gcp Cloud Account OAuth Complete Response."
type GcpCloudAccountOAuthCompleteResponse {
    userInfo: GcpOAuthUserInfo
}

"Gcp Cloud Account OAuth Initiate Response."
type GcpCloudAccountOAuthInitiateResponse {
    clientId: String!
    redirectUrl: String!
    scope: [String!]!
    sessionId: String!
    state: String!
}

"GCP Cloud Account Project."
type GcpCloudAccountProject {
    "Rubrik ID of the GCP project."
    id: String!
    "Name of the GCP project."
    name: String!
    "Native ID of the GCP Project."
    projectId: String!
    "Native Project Number of the GCP Project."
    projectNumber: Long!
    roleId: String!
    "Whether the GCP project uses global configuration for authentication."
    usesGlobalConfig: Boolean!
}

"Status of the Gcp Cloud Account delete operation."
type GcpCloudAccountProjectDeleteStatus {
    error: String!
    projectUuid: String!
    success: Boolean!
}

"Details of the Gcp Cloud Account project configured for a feature."
type GcpCloudAccountProjectDetail {
    featureDetail: GcpCloudAccountFeatureDetail
    project: GcpCloudAccountProject
}

"Status of the Gcp Cloud Account upgrade operation."
type GcpCloudAccountProjectUpgradeStatus {
    error: String!
    projectUuid: String!
    success: Boolean!
}

"Gcp List Projects For OAuth Response"
type GcpListProjectsForOAuthResponse {
    missingPermissions: [String!]
    name: String!
    projectId: String!
}

"Represents the attachment details of a GCP native disk "
type GcpNativeAttachmentDetails {
    deviceName: String!
    diskID: String!
    diskName: String!
    instanceID: String!
    instanceName: String!
    instanceZone: String!
    isBootDisk: Boolean!
    isExcluded: Boolean!
    sizeInGBs: Int!
}

type GcpNativeDisk implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Instances to which the disk is attached"
    attachedInstances: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskID: String!
    diskName: String!
    diskType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "GCP Project of the Disk"
    gcpNativeProject: GcpNativeProject!
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    kmsKey: String!
    labels: [Label!]!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectId: String!
    region: String!
    replicaZones: [String!]!
    sizeInGBs: Int!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    zone: String!
}

type GcpNativeDiskConnection {
    count: Int!
    edges: [GcpNativeDiskEdge!]!
    nodes: [GcpNativeDisk!]!
    pageInfo: PageInfo!
}

type GcpNativeDiskEdge {
    cursor: String!
    node: GcpNativeDisk!
}

"Represents a GCP native firewall rule"
type GcpNativeFirewallRule {
    name: String!
    targetTags: [String!]!
}

type GcpNativeGCEInstance implements GcpNativeProjectDescendantType & GcpNativeProjectLogicalChildType & HierarchyObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "Attached disks"
    attachedDisks: [GcpNativeAttachmentDetails!]!
    "The authorized operations on the object."
    authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "GCP Project of the GCE Instance"
    gcpNativeProject: GcpNativeProject!
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    labels: [Label!]!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    machineType: String!
    "The name of the hierarchy object."
    name: String!
    nativeId: String!
    nativeName: String!
    networkHostProjectNativeId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectId: String!
    region: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    vpcName: String!
    zone: String!
}

type GcpNativeGCEInstanceConnection {
    count: Int!
    edges: [GcpNativeGCEInstanceEdge!]!
    nodes: [GcpNativeGCEInstance!]!
    pageInfo: PageInfo!
}

type GcpNativeGCEInstanceEdge {
    cursor: String!
    node: GcpNativeGCEInstance!
}

"Represents a GCP native VPC network"
type GcpNativeNetwork {
    firewallRules: [GcpNativeFirewallRule!]!
    name: String!
    nativeProjectId: String!
    subnetworks: [GcpNativeSubnetwork!]!
}

type GcpNativeProject implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    diskCount: Int!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "List of all GCE instances under this GCP project"
    gcpNativeGceInstanceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): GcpNativeGCEInstanceConnection!
    "The fid of the hierarchy object."
    id: UUID!
    lastRefreshedAt: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): GcpNativeProjectLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    nativeId: String!
    nativeName: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    organizationName: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    projectNumber: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: GcpNativeProjectStatusEnum!
    vmCount: Int!
}

type GcpNativeProjectConnection {
    count: Int!
    edges: [GcpNativeProjectEdge!]!
    nodes: [GcpNativeProject!]!
    pageInfo: PageInfo!
}

type GcpNativeProjectEdge {
    cursor: String!
    node: GcpNativeProject!
}

type GcpNativeProjectLogicalChildTypeConnection {
    count: Int!
    edges: [GcpNativeProjectLogicalChildTypeEdge!]!
    nodes: [GcpNativeProjectLogicalChildType!]!
    pageInfo: PageInfo!
}

type GcpNativeProjectLogicalChildTypeEdge {
    cursor: String!
    node: GcpNativeProjectLogicalChildType!
}

"Represents a GCP native region"
type GcpNativeRegion {
    name: String!
    zones: [String!]!
}

"Represents a GCP native subnetwork"
type GcpNativeSubnetwork {
    name: String!
    region: String!
}

type GcpOAuthUserInfo {
    domain: String!
    emailId: String!
    firstName: String!
}

type GcpPermission {
    permission: String!
}

"TOTP secret for a user."
type GenerateTotpSecretReply {
    "TOTP secret key."
    secret: String!
    "TOTP secret URI."
    secretUri: String!
}

type GenericSnapshotConnection {
    count: Int!
    edges: [GenericSnapshotEdge!]!
    nodes: [GenericSnapshot!]!
    pageInfo: PageInfo!
}

type GenericSnapshotEdge {
    cursor: String!
    node: GenericSnapshot!
}

type GenericTimeRange {
    absoluteTimeRange: TimeRange
    relativeTimeRange: RelativeTimeRange
}

type GeoLocation {
    address: String!
    latitude: Float!
    longitude: Float!
}

type GetAppBlueprintOngoingFailoverTaskchainUuidsRsp {
    taskchains: [TaskchainInfo!]!
}

type GetAppBlueprintSnapshotCloudImagesRsp {
    snapshotCloudImages: [AppBlueprintSnapshotCloudImage!]!
}

type GetAzureHostTypeResp {
    hostType: AzureHostTypeEnum!
}

type GetAzureO365ExocomputeResp {
    cluster: AzureO365ExocomputeCluster
}

"It contains the list of all label rules visible to the user"
type GetCloudNativeLabelRulesReply {
    labelRules: [LabelRule!]!
}

"It contains the list of all tag rules visible to the user"
type GetCloudNativeTagRulesReply {
    tagRules: [CloudNativeTagRule!]!
}

type GetDashboardSummaryReply {
    analyzerResults: [AnalyzerResult!]!
    policyResults: [AnalyzerGroupResult!]!
}

"get implicitly authorized ancestors response"
type GetImplicitlyAuthorizedAncestorSummariesResponse {
    objectSummaries: [ObjectSummary!]!
}

"get implicitly authorized objects response"
type GetImplicitlyAuthorizedObjectSummariesResponse {
    objectSummaries: [ObjectSummary!]!
}

"Lambda configuration details of given cluster"
type GetLambdaConfigReply {
    accountId: String!
    clusterId: String!
    defaultDiffFmdUploadPrefix: String!
    enableAutomaticFmdUpload: Boolean!
    enableFmdUploadForAllResources: Boolean!
    maxSnapshotsToUploadAutomatically: Int!
}

"Reply Object for GetLambdaMalwareScanDetail"
type GetLambdaMalwareScanDetailReply {
    output: MalwareScanDetail
}

"MFA settings for an account."
type GetMfaSettingReply {
    "Boolean value indicating whether TOTP is globally enforced."
    isTotpEnforcedGlobal: Boolean!
    "Boolean value indicating whether TOTP global enforcement is locked."
    isTotpGlobalEnforceLocked: Boolean!
    "Integer value indicating the time of remembering the MFA login in hours."
    mfaRememberHours: Int!
    "Integer value indicating the period of showing TOTP configuration reminder in hours."
    totpReminderHours: Int!
}

type GetMosaicRecoverableRangeResponse {
    "Object with details of Any Point In Time restore Range"
    data: MosaicRecoverableRangeObject
    "Response Message string"
    message: String
    "Return Code"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

type GetO365ServiceStatusResp {
    lastUpdated: DateTime
    status: O365ServiceStatusEnum!
}

type GetO365StorageStatsResp {
    dailyGrowthInBytes: Long!
    estimatedThirtyDaysStorageInBytes: Long!
    liveDataSizeInBytes: Long!
    physicalDataSizeInBytes: Long!
    physicalDataSizeTimeSeries: [O365PhysicalDataSizeTimeStamp!]!
    storageEfficiencyPercent: Long!
}

"Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs"
type GetPipelineHealthReply {
    failedAnalysis: Long!
    failedBackup: Long!
    failedIndexing: Long!
    totalAnalysis: Long!
    totalBackup: Long!
    totalIndexing: Long!
}

type GetPoliciesTimelineReply {
    policyFilesHitsEntries: [TimelineEntry!]!
    policyHitsEntries: [TimelineEntry!]!
    policyOaFilesHitsEntries: [TimelineEntry!]!
    policyStaleFilesHitsEntries: [TimelineEntry!]!
    policySummaries: [ClassificationPolicySummary!]!
    totalFilesHitsEntries: [TimelineEntry!]!
    totalHitsEntries: [TimelineEntry!]!
    totalOaFilesEntries: [TimelineEntry!]!
    totalOaFilesHitsEntries: [TimelineEntry!]!
    totalOaFoldersEntries: [TimelineEntry!]!
    totalStaleFilesHitsEntries: [TimelineEntry!]!
    totalStaleOaFilesEntries: [TimelineEntry!]!
}

type GetSMTPConfigurationReply {
    defaultFromEmail: String!
    hostname: String!
    isValid: Boolean!
    port: Int!
    securityType: SMTPSecurityTypeEnum!
    trustedCerts: String!
    username: String!
}

type GetSPExplicitReply {
    applicationCallbackUrl: String!
    encryptionCertificate: String!
    signingCertificate: String!
    spEntityId: String!
}

type GetSchemaResponse {
    "Object with schema details"
    data: CassandraSchemaObject
    "Response Message string"
    message: String
    "Return Code"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

"Get radar alert enablment for a snappable"
type GetSnappableAlertSettingReply {
    enabled: Boolean!
}

type GetSyslogConfigurationReply {
    conf: [SyslogConfig!]!
}

"Taskchain info reply"
type GetTaskchainInfoReply {
    account: String!
    endTime: DateTime
    error: String!
    jobId: Long!
    jobType: String!
    progress: Long!
    startTime: DateTime
    state: TaskchainStateEnum!
    taskchainId: String!
}

"Taskchain status reply"
type GetTaskchainStatusReply {
    taskchain: Taskchain
}

"TOTP status for a user."
type GetTotpStatusReply {
    "TOTP as 2FA is enabled."
    isEnabled: Boolean!
    "TOTP as 2FA is enforced."
    isEnforced: Boolean!
    isEnforcedUserLevel: Boolean!
    "Whether TOTP is supported for the user."
    isSupported: Boolean!
    "Timestamp of last TOTP configuration update."
    totpConfigUpdateAt: DateTime
    "Integer value indicating the period of showing TOTP configuration reminder in hours."
    totpReminderHours: Int!
}

type GetUserDetailReply {
    location: String!
    name: String!
    numFilesAccessible: Int!
    risk: RiskLevelTypeEnum!
}

"Get IP whitelist configuration"
type GetWhitelistReply {
    enabled: Boolean!
    ipCidrs: [String!]!
    mode: WhitelistModeEnum!
}

"Global manager connectivity status."
type GlobalManagerConnectivity {
    "URLs pinged to check connectivity."
    urls: [GlobalManagerUrl!]!
}

"URLs pinged to check connectivity."
type GlobalManagerUrl {
    "Whether or not the URL check has passed."
    isReachable: Boolean!
    "URL pinged to check connectivity."
    url: String!
}

"""

Supported in v5.1+
"""
type GlobalSearchApiResponse {
    """

    Required. Supported in v5.1+
    List of directories containing the file.
    """
    dirs: [String!]!
    """

    Required. Supported in v5.1+
    Filename of the file.
    """
    filename: String!
    """

    Required. Supported in v5.1+
    True if the returned path is not a directory.
    """
    isFile: Boolean!
    "Last time, in seconds, this file was modified since epoch."
    modifiedTime: Long
    "Number of snapshots containing the file."
    numSnapshots: Int
    "Size, in bytes, of the file."
    sizeInBytes: Long
    """

    Required. Supported in v5.1+
    Managed ID of the snappable containing the file.
    """
    snappableId: String!
    """

    Required. Supported in v5.1+
    Name of the snappable containing the file.
    """
    snappableName: String!
    "Time latest, in milliseconds, snapshot was taken with this file since epoch."
    snapshotTime: Long
}

"""

Supported in v5.1+
"""
type GlobalSearchApiResponseListResponse {
    """

    Supported in v5.1+
    List of matching objects.
    """
    data: [GlobalSearchApiResponse!]!
    """

    Supported in v5.1+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.1+
    Total list responses.
    """
    total: Long
}

"Metadata for rendering a global sla."
type GlobalSla implements SlaDomain {
    archivalSpec: ArchivalSpec
    archivalSpecList: [ArchivalSpec!]!
    backupWindows: [BackupWindow!]!
    baseFrequency: SlaDuration
    clusterToSyncStatusMap: [PolarisSLASyncStatus!]!
    clusterUUID: String!
    description: String!
    firstFullBackupWindows: [BackupWindow!]!
    id: String!
    isArchived: Boolean!
    isDefault: Boolean!
    localRetentionLimit: SlaDuration
    logConfig: LogConfigResult
    migrationInfo: SlaMigrationInfo
    name: String!
    objectSpecificConfigs: ObjectSpecificConfigs
    objectTypeList: [SLAObjectTypeEnum!]!
    protectedObjectCount: Int!
    replicationSpec: ReplicationSpec
    replicationSpecV2: [ReplicationSpecV2!]!
    snapshotSchedule: SnapshotSchedule
    snapshotScheduleLastUpdatedAt: DateTime
    stateVersion: Long!
    uiColor: String!
    version: String
}

"Metadata for rendering a sla for filter."
type GlobalSlaForFilter {
    id: String!
    name: String!
}

type GlobalSlaForFilterConnection {
    count: Int!
    edges: [GlobalSlaForFilterEdge!]!
    nodes: [GlobalSlaForFilter!]!
    pageInfo: PageInfo!
}

type GlobalSlaForFilterEdge {
    cursor: String!
    node: GlobalSlaForFilter!
}

type Group {
    groupId: String!
    roles: [Role!]!
    users: [User!]!
}

type GroupCount {
    count: Int!
    group: String!
}

type GroupCountListWithTotal {
    groupList: [GroupCount!]!
    totalCount: Int!
}

type HashDetail {
    "Required. Hash algorithm type."
    hashType: String!
    "Required. Hash value of the content at path."
    hashValue: String!
}

"""

Supported in v5.2+
"""
type HdfsBaseConfig {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHost!]!
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"""

Supported in v5.2+
"""
type HdfsHost {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String!
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int!
}

type HierarchyObjectConnection {
    count: Int!
    edges: [HierarchyObjectEdge!]!
    nodes: [HierarchyObject!]!
    pageInfo: PageInfo!
}

type HierarchyObjectEdge {
    cursor: String!
    node: HierarchyObject!
}

type HierarchySnappableConnection {
    count: Int!
    edges: [HierarchySnappableEdge!]!
    nodes: [HierarchySnappable!]!
    pageInfo: PageInfo!
}

type HierarchySnappableEdge {
    cursor: String!
    node: HierarchySnappable!
}

type HierarchySnappableFileVersion {
    fileMode: FileModeEnum!
    lastModified: DateTime!
    size: Long!
    snapshot: CdmSnapshot
    snapshotId: String!
    source: FileVersionSourceEnum!
}

type Hits {
    permittedHits: Int!
    permittedHitsDelta: Int!
    totalHits: Int!
    totalHitsDelta: Int!
    violations: Int!
    violationsDelta: Int!
}

"The connection status of a host"
type HostConnectionStatus {
    connectivity: HostConnectivityStatusEnum!
    timestampMillis: DateTime
}

"""

Supported in v5.0+
"""
type HostConnectivitySummary {
    """

    Required. Supported in v5.0+
    """
    action: String!
    """

    Required. Supported in v5.0+
    """
    status: String!
}

"""

Supported in v5.0+
"""
type HostDetail {
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik Backup Service (RBS) installed on the host.
    """
    agentId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.
    """
    compressionEnabled: Boolean
    hostSummary: HostSummary
    hostVfdDriverState: HostVfdStateEnum!
    hostVfdEnabled: HostVfdInstallConfigEnum
    """

    Supported in v5.2+
    v5.2: Specifies whether the host is an Oracle host. When the host is an Oracle host, the UI displays the Oracle discovery fields.
    v5.3: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    v6.0+: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
    """
    isOracleHost: Boolean
    """

    Required. Supported in v5.0+
    A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).
    """
    isRelic: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Boolean value that indicates whether the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v5.3: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
    v6.0+: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.
    """
    mssqlCbtDriverInstalled: Boolean!
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with sysdba privileges.
    """
    oracleSysDbaUser: String
}

"""

Supported in v5.0+
"""
type HostDetailListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [HostDetail!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type HostDiagnosisSummary {
    """

    Supported in v5.0+
    """
    connectivity: [HostConnectivitySummary!]!
}

type HostFailoverCluster implements CdmHierarchyObject & FailoverClusterTopLevelDescendantType & HierarchyObject {
    "The list of Hosts making up this Host Failover Cluster."
    allNodes: [PhysicalHost!]!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostFailoverClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The OS Type of this Host Failover Cluster"
    nodesOsType: GuestOsTypeEnum
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostFailoverClusterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: FailoverClusterStatusObject
}

type HostFailoverClusterConnection {
    count: Int!
    edges: [HostFailoverClusterEdge!]!
    nodes: [HostFailoverCluster!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterDescendantTypeConnection {
    count: Int!
    edges: [HostFailoverClusterDescendantTypeEdge!]!
    nodes: [HostFailoverClusterDescendantType!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterDescendantTypeEdge {
    cursor: String!
    node: HostFailoverClusterDescendantType!
}

type HostFailoverClusterEdge {
    cursor: String!
    node: HostFailoverCluster!
}

type HostFailoverClusterPhysicalChildTypeConnection {
    count: Int!
    edges: [HostFailoverClusterPhysicalChildTypeEdge!]!
    nodes: [HostFailoverClusterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type HostFailoverClusterPhysicalChildTypeEdge {
    cursor: String!
    node: HostFailoverClusterPhysicalChildType!
}

type HostShare implements CdmHierarchyObject & HierarchyObject & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostShareDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HostSharePhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HostShareConnection {
    count: Int!
    edges: [HostShareEdge!]!
    nodes: [HostShare!]!
    pageInfo: PageInfo!
}

type HostShareDescendantTypeConnection {
    count: Int!
    edges: [HostShareDescendantTypeEdge!]!
    nodes: [HostShareDescendantType!]!
    pageInfo: PageInfo!
}

type HostShareDescendantTypeEdge {
    cursor: String!
    node: HostShareDescendantType!
}

type HostShareEdge {
    cursor: String!
    node: HostShare!
}

type HostSharePhysicalChildTypeConnection {
    count: Int!
    edges: [HostSharePhysicalChildTypeEdge!]!
    nodes: [HostSharePhysicalChildType!]!
    pageInfo: PageInfo!
}

type HostSharePhysicalChildTypeEdge {
    cursor: String!
    node: HostSharePhysicalChildType!
}

"""

Supported in v5.0+
"""
type HostSummary {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.2+
    """
    hdfsBaseConfig: HdfsBaseConfig
    """

    Required. Supported in v5.0+
    Deprecated. Please use 'name' instead.
    """
    hostname: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Unique identifier for host.
    """
    id: String!
    mssqlCbtEffectiveStatus: MssqlCbtEffectiveStatusTypeEnum
    mssqlCbtEnabled: MssqlCbtStatusTypeEnum
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: IP address or hostname of the host.
    """
    name: String
    """

    Supported in v5.0+
    """
    nasBaseConfig: NasBaseConfig
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.
    """
    operatingSystem: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.
    """
    operatingSystemType: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned (set by envoy).
    """
    organizationId: String
    """

    Supported in v5.0+
    The name of the organization to which the host is assigned (set by envoy).
    """
    organizationName: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: ID of the Rubrik cluster to which the host belongs.
    """
    primaryClusterId: String
    """

    Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.
    """
    status: String
}

"""

Supported in v5.0+
"""
type HostVfdInstallResponse {
    """

    Supported in v5.0+
    """
    errorInfo: String
    """

    Required. Supported in v5.0+
    """
    hostId: String!
    hostVfdDriverState: HostVfdStateEnum!
}

"""

Supported in v5.0+
"""
type HostVolumeSummary {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: A boolean value that describes whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
    v5.3+: Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
    """
    isCurrentlyPresentOnSystem: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Windows ID on the Host
    v5.3+: The unique ID of the volume on the Windows host.
    """
    naturalId: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The Volume Group ID of the volume.
    v5.3+: The unique ID of the Volume Group.
    """
    volumeGroupId: String
    volumeGroupSnapshotVolumeSummary: VolumeGroupSnapshotVolumeSummary
}

type HourlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

type HyperVCluster implements CdmHierarchyObject & HierarchyObject & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVClusterDescendantTypeConnection {
    count: Int!
    edges: [HyperVClusterDescendantTypeEdge!]!
    nodes: [HyperVClusterDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVClusterDescendantTypeEdge {
    cursor: String!
    node: HyperVClusterDescendantType!
}

type HyperVClusterLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVClusterLogicalChildTypeEdge!]!
    nodes: [HyperVClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVClusterLogicalChildTypeEdge {
    cursor: String!
    node: HyperVClusterLogicalChildType!
}

type HyperVSCVMM implements CdmHierarchyObject & HierarchyObject & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVSCVMMDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVSCVMMLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVSCVMMDescendantTypeConnection {
    count: Int!
    edges: [HyperVSCVMMDescendantTypeEdge!]!
    nodes: [HyperVSCVMMDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVSCVMMDescendantTypeEdge {
    cursor: String!
    node: HyperVSCVMMDescendantType!
}

type HyperVSCVMMLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVSCVMMLogicalChildTypeEdge!]!
    nodes: [HyperVSCVMMLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVSCVMMLogicalChildTypeEdge {
    cursor: String!
    node: HyperVSCVMMLogicalChildType!
}

type HyperVServer implements CdmHierarchyObject & HierarchyObject & HyperVClusterDescendantType & HyperVClusterLogicalChildType & HyperVSCVMMDescendantType & HyperVSCVMMLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVServerDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVServerLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type HyperVServerDescendantTypeConnection {
    count: Int!
    edges: [HyperVServerDescendantTypeEdge!]!
    nodes: [HyperVServerDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVServerDescendantTypeEdge {
    cursor: String!
    node: HyperVServerDescendantType!
}

type HyperVServerLogicalChildTypeConnection {
    count: Int!
    edges: [HyperVServerLogicalChildTypeEdge!]!
    nodes: [HyperVServerLogicalChildType!]!
    pageInfo: PageInfo!
}

type HyperVServerLogicalChildTypeEdge {
    cursor: String!
    node: HyperVServerLogicalChildType!
}

type HyperVTopLevelDescendantTypeConnection {
    count: Int!
    edges: [HyperVTopLevelDescendantTypeEdge!]!
    nodes: [HyperVTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type HyperVTopLevelDescendantTypeEdge {
    cursor: String!
    node: HyperVTopLevelDescendantType!
}

type HyperVVirtualMachine implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HyperVClusterDescendantType & HyperVSCVMMDescendantType & HyperVServerDescendantType & HyperVServerLogicalChildType & HyperVTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type HyperVVirtualMachineConnection {
    count: Int!
    edges: [HyperVVirtualMachineEdge!]!
    nodes: [HyperVVirtualMachine!]!
    pageInfo: PageInfo!
}

type HyperVVirtualMachineEdge {
    cursor: String!
    node: HyperVVirtualMachine!
}

type IdentityProvider {
    entityId: String!
    expirationDate: DateTime
    name: String!
    signInUrl: String!
    signOutUrl: String!
    spInitiatedSignInUrl: String!
    spInitiatedTestUrl: String!
}

type IndicatorOfCompromise {
    iocType: IndicatorOfCompromiseTypeEnum!
    "Required. Type specific payload."
    iocValue: String!
}

type InfrastructureChart {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
}

type InfrastructureTable {
    focus: ReportFocusEnum!
    groupBy: [ClusterGroupByEnum!]
    name: String!
    selectedColumns: [InfrastructureTableColumnEnum!]!
    sortBy: ClusterSortByEnum
    sortOrder: SortOrderEnum
}

"Response of the operation to initiate Azure Cloud Account OAuth."
type InitiateAzureCloudAccountOAuthResponse {
    "Client ID of the application configured for authentication of the Azure tenant."
    clientId: String!
    "Session ID of the current OAuth session."
    sessionId: String!
}

type InstalledVersionGroupCount {
    count: Int!
    group: String!
    isUpgradeRecommended: Boolean!
}

"Interface CIDR Info."
type InterfaceCidr {
    cidr: String!
    interfaceType: InterfaceTypeEnum!
    selected: Boolean!
}

type InternalBulkUpdateHostResponse {
    items: [HostDetail!]!
}

type InternalChangeVfdOnHostResponse {
    items: [HostVfdInstallResponse!]!
}

type InventoryRoot {
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
}

type InventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HierarchyObjectConnection!
}

"Link to download investigation results as CSV."
type InvestigationCsvDownloadLinkReply {
    "Link for the CSV file which can be downloaded."
    downloadLink: String!
}

"It checks if the rule name is unique or not"
type IsCloudNativeTagRuleNameUniqueReply {
    isUnique: Boolean!
}

"A boolean specifying whether the volume snapshot is restorable"
type IsVolumeSnapshotRestorableReply {
    isRestorable: Boolean!
}

type Issue {
    events: [IssueEvent!]!
    fileResult: FileResult!
    id: String!
    latestPolicyObj: PolicyObj!
    openTime: Long!
    paginationId: String!
    policies: [ClassificationPolicySummary!]!
    resolvedTime: Long!
    violations: Int!
}

type IssueConnection {
    count: Int!
    edges: [IssueEdge!]!
    nodes: [Issue!]!
    pageInfo: PageInfo!
}

type IssueEdge {
    cursor: String!
    node: Issue!
}

type IssueEvent {
    snapshotFid: String!
    timestamp: Long!
    type: IssueEventTypeEnum!
    violations: Int!
    violationsDelta: Int!
}

type JobMetadata {
    createdAt: DateTime
    currentInstance: Int!
    id: Long!
    info: String!
    jobType: String!
    lastFailure: DateTime
    lastOwner: String!
    lastSkipped: DateTime
    lastSuccess: DateTime
    logLevel: LogLevelEnum!
    numScheduledRuns: Int!
    numSuccessfulRuns: Int!
    owner: String!
    progress: String!
    progressedAt: DateTime
    retryAttempts: Int!
    startTime: DateTime
    startedAt: DateTime
    state: String!
    updatedAt: DateTime
}

type JobReply {
    clusterName: String!
    clusterUuid: String!
    customerAccount: String!
    metadata: JobMetadata
    version: String!
}

type JobsReply {
    jobs: [JobReply!]!
}

type K8sCluster implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "Information about the Kubernetes cluster."
    clusterInfo: K8sClusterInfo!
    "List of IPs for the Kubernetes cluster."
    clusterIp: [String!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): K8sClusterDescendantConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Namespaces belonging to the Kubernetes cluster."
    k8sDescendantNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sNamespaceConnection!
    lastRefreshTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "Range of ports that are allowed to be accessed."
    rbsPortRanges: [K8sRbsInfo!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: K8sClusterStatus!
}

type K8sClusterConnection {
    count: Int!
    edges: [K8sClusterEdge!]!
    nodes: [K8sCluster!]!
    pageInfo: PageInfo!
}

type K8sClusterDescendantConnection {
    count: Int!
    edges: [K8sClusterDescendantEdge!]!
    nodes: [K8sClusterDescendant!]!
    pageInfo: PageInfo!
}

type K8sClusterDescendantEdge {
    cursor: String!
    node: K8sClusterDescendant!
}

type K8sClusterEdge {
    cursor: String!
    node: K8sCluster!
}

type K8sClusterInfo {
    associatedCdm: Cluster
    k8sVersion: String
    kuprClusterUUID: UUID!
    port: Int!
    type: K8sClusterDBType!
}

type K8sNamespace implements HierarchyObject & HierarchySnappable & K8sClusterDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    apiVersion: String!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    clusterScoped: Boolean!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "Namespace is archived and has > 1 snapshots."
    isRelic: Boolean!
    "Kubernetes cluster ID."
    k8sClusterID: String!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Name of the namespace."
    namespaceName: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "Number of persistent volume claims."
    numPvcs: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "Number of workloads."
    numWorkloads: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    resouceVersion: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

type K8sNamespaceConnection {
    count: Int!
    edges: [K8sNamespaceEdge!]!
    nodes: [K8sNamespace!]!
    pageInfo: PageInfo!
}

type K8sNamespaceEdge {
    cursor: String!
    node: K8sNamespace!
}

type K8sRbsInfo {
    kuprClusterUUID: UUID!
    maxPort: Int!
    minPort: Int!
}

"Represents a fully qualified GCP native KMS Crypto Key"
type KMSCryptoKey {
    key: String!
    keyRing: String!
    location: String!
    projectNativeId: String!
}

type KMSKey {
    arn: String!
    id: String!
    name: String!
}

"A KMS key in AWS realm."
type KmsEncryptionKey {
    aliases: [String!]!
    arn: String!
    "ID of KMS key."
    id: String!
}

type LDAPConfig {
    clusterId: String!
    domain: String!
    id: Long!
    ldapName: String!
    password: String!
    userName: String!
}

type Label {
    key: String!
    value: String!
}

"A single Label Rule"
type LabelRule {
    Label: CloudNativeLabel
    cloudNativeAccounts: [CloudNativeAccountIdWithName!]!
    effectiveSla: TagRuleEffectiveSla
    hasPermissionToModify: Boolean!
    id: String!
    name: String!
    objectType: ManagedObjectType!
}

"History of Radar and Sonar features."
type LambdaFeatureHistory {
    "True is Radar was ever enabled."
    wasRadarEverEnabled: Boolean!
    "True is Sonar was ever enabled."
    wasSonarEverEnabled: Boolean!
}

type LambdaSettings {
    anomalyThreshold: Float
    isAnomalyAlertEnabled: Boolean
    ransomwareThreshold: Float
}

type LastTestStatus {
    enumValue: LastTestStatusEnum!
}

"Ldap Integration Information"
type LdapIntegration {
    "BaseDn for your LDAP integration."
    baseDn: String!
    "BindUserName for your LDAP integration."
    bindUserName: String!
    "Dynamic DNS name for your LDAP integration."
    dynamicDnsName: String!
    "Group member attribute for your LDAP integration."
    groupMemberAttr: String
    "Group membership attribute for your LDAP integration."
    groupMembershipAttr: String
    "Group search filter for your LDAP integration."
    groupSearchFilter: String
    "ID for your LDAP integration."
    id: String!
    "Whether TOTP as 2FA is enforced for the LDAP integration."
    isTotpEnforced: Boolean!
    "LdapServers for your LDAP integration."
    ldapServers: [LdapServer!]!
    "Name for your LDAP integration."
    name: String!
    "TrustedCerts for your LDAP integration."
    trustedCerts: String
    "User name attribute for your LDAP integration."
    userNameAttr: String
    "User search filter for your LDAP integration."
    userSearchFilter: String
}

type LdapIntegrationConnection {
    count: Int!
    edges: [LdapIntegrationEdge!]!
    nodes: [LdapIntegration!]!
    pageInfo: PageInfo!
}

type LdapIntegrationEdge {
    cursor: String!
    node: LdapIntegration!
}

"Ldap Server Information"
type LdapServer {
    "Hostname for the LDAP server."
    hostname: String!
    "Port used by the LDAP server."
    port: Int!
    "Whether the LDAP server uses TLS."
    useTls: Boolean!
}

"TOTP status for a LDAP principal."
type LdapTotpStatus {
    "TOTP as 2FA is enabled."
    isEnabled: Boolean!
    "TOTP as 2FA is enforced."
    isEnforced: Boolean!
    "Whether TOTP is supported for the LDAP principal."
    isSupported: Boolean!
}

"Contains information about the legal hold placed on the Snapshot."
type LegalHoldInfo {
    "Boolean which describes whether snapshot has to be held in place."
    shouldHoldInPlace: Boolean!
}

"""

Supported in v5.0+
"""
type Link {
    """

    Required. Supported in v5.0+
    v5.0: The link's destination.
    v5.1+: The destination of the link.
    """
    href: String!
    """

    Required. Supported in v5.0+
    v5.0: The relation of this link's destination to the current resource.
    v5.1+: The relation of the destination of this link to the current resource.
    """
    rel: String!
}

type LinuxFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterApp: FailoverClusterApp
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

"List CIDRs for Compute Setting."
type ListCidrsForComputeSetting {
    clusterInterfaceCidrs: [ClusterInfCidrs!]!
}

"Response object for list store on mosaic."
type ListStoreResponse {
    "Object with Response from ListStore"
    data: [MosaicStoreObject!]!
    "Error message in case of failure"
    message: String
    "Return Code"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

"List of locations where customer's GCP disks are present"
type ListStoredDiskLocationsReply {
    regions: [String!]!
    zones: [String!]!
}

"Response object for list version on mosaic."
type ListVersionResponse {
    "Object with Response from ListVersion"
    data: [MosaicVersionObject!]!
    "Error message in case of failure"
    message: String
    "Return Code"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

type LogConfigResult {
    slaLogFrequencyConfig: SlaLogFrequencyConfigResult
}

type MalwareMatch {
    "Required. Index into MalwareScanConfig.indicators_of_compromise."
    indicatorIndex: Int!
    "Required. "
    paths: [PathInfo!]!
}

type MalwareScanConfig {
    "Criteria to restrict files to scan."
    fileScanCriteria: MalwareScanFileCriteria
    "Required. List of IOCs to scan for."
    indicatorsOfCompromise: [IndicatorOfCompromise!]!
    "Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one."
    maxMatchesPerSnapshot: Int
    "Required. Snappable IDs to scan for malware."
    objectIds: [String!]!
    "Additional information required for files with malware matches."
    requestedMatchDetails: RequestedMatchDetails
    "Limit which snapshots to include in the malware scan."
    snapshotScanLimit: MalwareScanSnapshotLimit
}

type MalwareScanDetail {
    "Required. The malware scan config."
    config: MalwareScanConfig
    "The end time of the scan."
    endTime: DateTime
    "Required. The malware scan ID."
    id: String!
    "Required. A array of object ID and list of snapshot IDs which are the the target of the scan."
    snapshots: [ObjectIdToSnapshotIds!]!
    "The start time of the scan."
    startTime: DateTime
}

type MalwareScanDetailListResponse {
    "List of matching objects."
    data: [MalwareScanDetail!]!
    "If there is more."
    hasMore: Boolean
    "Total list responses."
    total: Int
}

type MalwareScanFileCriteria {
    "Specify the smallest and largest files to scan."
    fileSizeLimits: MalwareScanFileSizeLimits
    "Please see /fileset_template for a detailed description of how includes, excludes, and exceptions are interpreted."
    pathFilter: MalwareScanPathFilter
}

type MalwareScanFileSizeLimits {
    "Maximum size of files to scan. Files that are bigger than this size are ignored."
    maximumSizeInBytes: Long
    "Minimum size of files to scan. Files smaller than this size are ignored."
    minimumSizeInBytes: Long
}

type MalwareScanInSnapshotResult {
    "ID of the most recent job run against this snapshot, if any."
    lastJobId: String
    "Required. List of malware matches found in this snapshot."
    matches: [MalwareMatch!]!
    "Stats collected during the scan.  Note that the stats capture what was actually scanned.  It's possible a scan for a snapshot terminates early;  it's also possible a scan is retried after an error. This means the counts could be less than or more than the actual count of entites (files, bytes, etc.) in the snapshot."
    scanStats: MalwareScanStats
    "Required. Date of the snapshot."
    snapshotDate: DateTime
    "Required. ID of the snapshot."
    snapshotId: String!
    status: MalwareScanInSnapshotStatusEnum!
}

"Please see v1/fileset_template API doc for a detailed description of how includes, excludes, & exceptions are interpreted."
type MalwareScanPathFilter {
    "Paths to exempt from exclusion."
    exceptions: [String!]!
    "Paths to exclude."
    excludes: [String!]!
    "Paths to include."
    includes: [String!]!
}

type MalwareScanResult {
    "Required. "
    objectId: String!
    "Required. "
    snapshotResults: [MalwareScanInSnapshotResult!]!
}

type MalwareScanResults {
    "Required. ID of the malware detection."
    id: String!
    "Required. List of IOCs to scan for."
    indicatorsOfCompromise: [IndicatorOfCompromise!]!
    "Required. "
    results: [MalwareScanResult!]!
}

type MalwareScanSnapshotLimit {
    "Maximum snapshot time.  Any snapshots taken after this time will be elided."
    endTime: DateTime
    "Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots."
    maxSnapshotsPerObject: Int
    "A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified."
    snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]!
    "Minimum snapshot time.  Any snapshots taken before this time will be elided."
    startTime: DateTime
}

type MalwareScanStats {
    "Required. The number of files encountered during the scan.  This may be less than the total number of files in the snapshot if the scan terminates early."
    numFiles: Long!
    "Required. The number of files scanned."
    numFilesScanned: Long!
    "Required. The total file size of the files scanned.  This may differ from the actual number of bytes read as part of the scan.  For example a YARA rule might only need to read a part of a file at a specific offset, whereas other rules might need to read the entire file to compute a hash."
    totalFilesScannedSizeBytes: Long!
}

"""

Supported in v5.2+
"""
type ManagedObjectPendingSlaInfo {
    """

    Supported in v5.2+
    """
    isPendingSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.2+
    Managed ID of the object.
    """
    objectId: String!
    """

    Required. Supported in v5.2+
    """
    pendingSlaDomainId: String!
    """

    Required. Supported in v5.2+
    """
    pendingSlaDomainName: String!
}

type ManagedVolume implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type ManagedVolumeConnection {
    count: Int!
    edges: [ManagedVolumeEdge!]!
    nodes: [ManagedVolume!]!
    pageInfo: PageInfo!
}

type ManagedVolumeEdge {
    cursor: String!
    node: ManagedVolume!
}

type Metadata {
    key: String!
    value: Value
}

"Response containing taskchain information for the migration of SLAs."
type MigrateSlasRes {
    "List of objects containing SLA taskchain information."
    slasTaskchainInfo: [SlaTaskchainInfo!]!
}

type MinuteSnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
}

"""

Supported in v5.0+
"""
type MissedSnapshot {
    """

    Required. Supported in v5.0+
    """
    archivalLocationType: [String!]!
    """

    Required. Supported in v5.0+
    """
    missedSnapshotTime: DateTime
    """

    Required. Supported in v5.0+
    """
    missedSnapshotTimeUnits: [MissedSnapshotTimeUnitConfig!]!
}

"The missed snapshot object associated with the vm"
type MissedSnapshotCommon {
    archivalLocationType: [String!]!
    date: DateTime!
}

type MissedSnapshotCommonConnection {
    count: Int!
    edges: [MissedSnapshotCommonEdge!]!
    nodes: [MissedSnapshotCommon!]!
    pageInfo: PageInfo!
}

type MissedSnapshotCommonEdge {
    cursor: String!
    node: MissedSnapshotCommon!
}

"Missed Snapshot data with groupby info applied to it."
type MissedSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: MissedSnapshotGroupByInfo!
    "Paginated missed snapshot data."
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "sort snapshots by field"
        sortBy: MissedSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): MissedSnapshotCommonConnection!
    "Further provide groupings for the data."
    missedSnapshotGroupBy(
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!
    ): [MissedSnapshotGroupBy!]!
}

type MissedSnapshotGroupByConnection {
    count: Int!
    edges: [MissedSnapshotGroupByEdge!]!
    nodes: [MissedSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type MissedSnapshotGroupByEdge {
    cursor: String!
    node: MissedSnapshotGroupBy!
}

"""

Supported in v5.0+
"""
type MissedSnapshotListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MissedSnapshot!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type MissedSnapshotTimeUnitConfig {
    dayOfTime: MissedSnapshotDayOfTimeUnitEnum
    """

    Required. Supported in v5.0+
    """
    frequency: Int!
    """

    Required. Supported in v5.0+
    """
    retention: Int!
    timeUnit: SlaTimeUnitEnum!
}

type MonthlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfMonth: DayOfMonthEnum!
}

type MosaicAsyncResponse {
    "Mosaic Job ID of submitted job in case of successful job submission. This job id can be used to track progress of the request."
    data: String
    "Error message in case of failure"
    message: String
    "Return Code from Mosaic"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

type MosaicRecoverableRangeObject {
    earliestTimestamp: Int
    latestTimestamp: Int
}

type MosaicRecoveryRangeObject {
    "Start timestamp of recovery range"
    earliestTimestamp: Int
    "End timestamp of recovery range"
    latestTimestamp: Int
}

type MosaicRecoveryRangeResponse {
    "Object with details of Any Point In Time restore Range"
    data: MosaicRecoveryRangeObject
    "Response Message string"
    message: String
    "Return Code"
    returnCode: Long
    "Status of the request"
    status: Boolean
}

"Mosaic Snapshot information."
type MosaicSnapshot {
    "UUID of the Mosaic cluster."
    clusterUuid: UUID!
    "Snapshot size information."
    dbInfo: String
    "Time of expiration."
    expirationTime: DateTime
    "Id of the snapshot."
    id: String!
    "Duration of the snapshot job."
    jobDuration: Int
    snappableId: String!
    "Time of the snapshot version."
    version: DateTime!
    "State of the snapshot version."
    versionState: String
}

type MosaicSnapshotConnection {
    count: Int!
    edges: [MosaicSnapshotEdge!]!
    nodes: [MosaicSnapshot!]!
    pageInfo: PageInfo!
}

type MosaicSnapshotEdge {
    cursor: String!
    node: MosaicSnapshot!
}

"Mosaic Snapshot data with groupby info applied to it."
type MosaicSnapshotGroupByType {
    "Further provide groupings for the data."
    allSnapshotGroupBys(
        "Group mosaic snapshots by field."
        groupBy: MosaicSnapshotGroupBy!
    ): [MosaicSnapshotGroupByType!]!
    "The data groupby info."
    groupByInfo: MosaicSnapshotGroupByInfo!
    "Paginated snapshot data."
    snapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort mosaic snapshots by field."
        sortBy: MosaicSnapshotSortBy = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): MosaicSnapshotConnection!
}

type MosaicSnapshotGroupByTypeConnection {
    count: Int!
    edges: [MosaicSnapshotGroupByTypeEdge!]!
    nodes: [MosaicSnapshotGroupByType!]!
    pageInfo: PageInfo!
}

type MosaicSnapshotGroupByTypeEdge {
    cursor: String!
    node: MosaicSnapshotGroupByType!
}

"Object for stores added on mosaic."
type MosaicStoreObject {
    "Required. UUID of the store"
    id: String!
    "Metadata information for store"
    storeMetadata: StoreMetadata
    "Required. Name of the store"
    storeName: String!
    storeType: MosaicStoreObjectStoreTypeEnum!
    "Required. Store path/url."
    storeUrl: String!
    "Url for nfs server."
    surlNfs: String
}

"Object for mosaic versions."
type MosaicVersionObject {
    "Information of version space"
    dbInfo: String
    "Expiration time of the version"
    expirationTime: Int
    "UUID of group policy"
    groupPolicyId: String
    "UUID of the version"
    id: String
    "Type of interval"
    intervalType: Int
    "Duration of the backup job"
    jobDuration: Int
    "Need sstable loader"
    needSstableLoaderStr: String
    "Replica set"
    rsList: String
    "Name of the management object"
    sourceMgmtObj: String
    "Name of the source"
    sourceName: String
    "Type of the source"
    sourceType: String
    "UUID of system policy"
    systemPolicyId: String
    "Timestamp of the version"
    timestamp: Int
    versionState: MosaicVersionObjectVersionStateEnum
}

"Details about the mounted volume."
type MountedVolume {
    "Volume's file system type."
    fileSystemType: String!
    "Path where the volume is mounted on the host."
    hostMountPath: String
    "Id of the mounted volume."
    id: String!
    "Volume's mount points."
    originalMountPoints: [String!]!
    "Size of the mounted volume."
    size: Int!
    "Volume's Smb Path."
    smbPath: String
}

type MssqlAvailabilityGroup implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlAvailabilityGroupDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "The list of instances associated with an Availability Group."
    instances: [MssqlInstance!]!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlAvailabilityGroupLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type MssqlAvailabilityGroupDescendantTypeConnection {
    count: Int!
    edges: [MssqlAvailabilityGroupDescendantTypeEdge!]!
    nodes: [MssqlAvailabilityGroupDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlAvailabilityGroupDescendantTypeEdge {
    cursor: String!
    node: MssqlAvailabilityGroupDescendantType!
}

type MssqlAvailabilityGroupLogicalChildTypeConnection {
    count: Int!
    edges: [MssqlAvailabilityGroupLogicalChildTypeEdge!]!
    nodes: [MssqlAvailabilityGroupLogicalChildType!]!
    pageInfo: PageInfo!
}

type MssqlAvailabilityGroupLogicalChildTypeEdge {
    cursor: String!
    node: MssqlAvailabilityGroupLogicalChildType!
}

"""

Supported in v5.2+
"""
type MssqlBackup {
    """

    Required. Supported in v5.2+
    The unique identifier for the object.
    """
    backupId: String!
    """

    Required. Supported in v5.2+
    The total uncompressed size of the files in bytes.
    """
    backupSize: Long!
    backupType: MssqlBackupTypeEnum!
    """

    Required. Supported in v5.2+
    Timestamp of the backup.
    """
    date: DateTime
    """

    Required. Supported in v5.2+
    LSN of the backup.
    """
    lsn: String!
    """

    Required. Supported in v5.2+
    The file path the backup will be stored at in downloaded zip files containing it.
    """
    path: String!
    """

    Required. Supported in v5.2+
    GUID of the recovery fork attached to the LSN.
    """
    recoveryForkGuid: String!
}

"""

Supported in v5.2+
"""
type MssqlBackups {
    """

    Required. Supported in v5.2+
    A list of snapshots and logs.
    """
    items: [MssqlBackup!]!
}

type MssqlDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & MssqlAvailabilityGroupDescendantType & MssqlAvailabilityGroupLogicalChildType & MssqlInstanceDescendantType & MssqlInstanceLogicalChildType & MssqlTopLevelDescendantType & PhysicalHostDescendantType & WindowsClusterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The list of snapshots taken for a MSSQL database."
    cdmSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "sort order"
        sortOrder: SortOrderEnum
    ): CDMSnapshotConnection!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    copyOnly: Boolean!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hasPermissions: Boolean!
    "The fid of the hierarchy object."
    id: UUID!
    isInAvailabilityGroup: Boolean!
    isLogShippingSecondary: Boolean!
    isOnline: Boolean!
    isRelic: Boolean!
    "List of live mounts for a MSSQL database."
    liveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for Mssql database live mounts."
        filters: [MssqlDatabaseLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Mssql database live mounts."
        sortBy: MssqlDatabaseLiveMountSortByInput
    ): CdmMssqlDatabaseLiveMountConnection!
    logBackupFrequencyInSeconds: Float!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    postBackupScript: String!
    preBackupScript: String!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    recoveryModel: String!
    replicas: [CdmMssqlDbReplica!]!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    unprotectableReasons: [String!]!
}

type MssqlDatabaseConnection {
    count: Int!
    edges: [MssqlDatabaseEdge!]!
    nodes: [MssqlDatabase!]!
    pageInfo: PageInfo!
}

type MssqlDatabaseEdge {
    cursor: String!
    node: MssqlDatabase!
}

"""

Supported in v5.0+
"""
type MssqlDbDetail {
    """

    Supported in v5.0+
    """
    archiveStorage: Long
    blackoutWindowResponseInfo: BlackoutWindowResponseInfo
    """

    Supported in v5.0+
    """
    isLocal: Boolean
    """

    Supported in v5.0+
    This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    isStandby: Boolean
    latestRecoveryPointV50: String
    latestRecoveryPointV51: String
    latestRecoveryPointV52: String
    latestRecoveryPointV53: String
    latestRecoveryPointV60: DateTime
    latestRecoveryPointV70: DateTime
    """

    Supported in v5.0+
    """
    localStorage: Long
    """

    Supported in v5.0+
    """
    maxDataStreams: Int
    mssqlDbSummary: MssqlDbSummary
    oldestRecoveryPointV50: String
    oldestRecoveryPointV51: String
    oldestRecoveryPointV52: String
    oldestRecoveryPointV53: String
    oldestRecoveryPointV60: DateTime
    oldestRecoveryPointV70: DateTime
    """

    Supported in v5.0+
    """
    postBackupScript: MssqlScriptDetail
    """

    Supported in v5.0+
    """
    preBackupScript: MssqlScriptDetail
    protectionDateV50: String
    protectionDateV51: String
    protectionDateV52: String
    protectionDateV53: String
    protectionDateV60: DateTime
    protectionDateV70: DateTime
    """

    Supported in v5.0+
    This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    recoveryForkGuid: String
    """

    Required. Supported in v5.0+
    """
    snapshotCount: Int!
}

"""

Supported in v5.0+
"""
type MssqlDbReplica {
    """

    Supported in v5.0+
    For an availability database, provides additional information about a database replica.
    """
    availabilityInfo: MssqlDbReplicaAvailabilityInfo
    """

    Required. Supported in v5.0+
    `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.
    """
    hasPermissions: Boolean!
    """

    Required. Supported in v5.0+
    ID of the SQL Server instance managing the replica.
    """
    instanceId: String!
    """

    Required. Supported in v5.0+
    Name of the SQL Server instance managing the replica.
    """
    instanceName: String!
    """

    Required. Supported in v5.0+
    Deprecated. Please use 'isDeleted' instead.
    """
    isArchived: Boolean!
    """

    Required. Supported in v5.0+
    `True` when the replica is deleted.
    """
    isDeleted: Boolean!
    """

    Required. Supported in v5.0+
    `True` when the replica is in standby mode.
    """
    isStandby: Boolean!
    """

    Supported in v5.0+
    The recovery fork GUID of the replica.
    """
    recoveryForkGuid: String
    recoveryModel: MssqlDbReplicaRecoveryModelEnum!
    """

    Required. Supported in v5.0+
    """
    rootProperties: MssqlRootProperties
    """

    Required. Supported in v5.0+
    The state of the replica.
    """
    state: String!
}

"""

Supported in v5.0+
"""
type MssqlDbReplicaAvailabilityInfo {
    role: MssqlDbReplicaAvailabilityInfoRoleEnum!
}

"""

Supported in v5.0+
"""
type MssqlDbSummary {
    """

    Supported in v5.0+
    For an availability database, the ID of the availability group that the database belongs to.
    """
    availabilityGroupId: String
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean!
    """

    Supported in v5.1+
    Information about the current backup task.
    """
    currentBackupTaskInfo: BackupTaskDiagnosticInfo
    """

    Required. Supported in v5.0+
    v5.0: Boolean value that specifies whether the cluster has permission to backup the database.
    v5.1: Boolean value that specifies whether the cluster has permission to back up the database.
    v5.2+: A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.
    """
    hasPermissions: Boolean!
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.1+
    True/false value indicating if backup task information is included in the response.
    """
    includeBackupTaskInfo: Boolean
    """

    Supported in v5.0+
    This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    instanceId: String
    """

    Supported in v5.0+
    This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    instanceName: String
    """

    Required. Supported in v5.0+
    """
    isInAvailabilityGroup: Boolean!
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
    """
    isLiveMount: Boolean!
    """

    Required. Supported in v5.0+
    Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
    """
    isLogShippingSecondary: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: Boolean value that specifies whether the database state is ONLINE.
    v5.2+: A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.
    """
    isOnline: Boolean!
    """

    Required. Supported in v5.0+
    """
    isRelic: Boolean!
    """

    Supported in v5.1+
    v5.1: The timestamp of the previous snapshot
    v5.2-v5.3: The timestamp of the previous snapshot. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    v6.0+: The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    """
    lastSnapshotTime: DateTime
    """

    Required. Supported in v5.0+
    """
    logBackupFrequencyInSeconds: Int!
    """

    Required. Supported in v5.0+
    Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
    """
    logBackupRetentionHours: Int!
    """

    Required. Supported in v5.0+
    """
    name: String!
    """

    Supported in v5.1+
    v5.1: An integer that specifies the number of missed snapshots.
    v5.2+: An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
    """
    numMissedSnapshot: Int
    """

    Supported in v5.2+
    v5.2: Describes any pending SLA assignment on this object.
    v5.3+: Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    """

    Required. Supported in v5.0+
    """
    primaryClusterId: String!
    recoveryModel: MssqlDbSummaryRecoveryModelEnum
    """

    Required. Supported in v5.0+
    List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.
    """
    replicas: [MssqlDbReplica!]!
    """

    Required. Supported in v5.0+
    """
    rootProperties: MssqlRootProperties
    snappable: CDMSnappable
    """

    Supported in v5.0+
    This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
    """
    state: String
    "A list of reasons that a SQL Server database cannot be protected by Rubrik."
    unprotectableReasonsV50: [MssqlUnprotectableReason!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV51: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV52: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV53: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV60: [String!]!
    "A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM."
    unprotectableReasonsV70: [String!]!
}

type MssqlInstance implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType & WindowsClusterDescendantType & WindowsClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlInstanceDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlInstanceLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    unprotectableReasons: [String!]!
}

type MssqlInstanceDescendantTypeConnection {
    count: Int!
    edges: [MssqlInstanceDescendantTypeEdge!]!
    nodes: [MssqlInstanceDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlInstanceDescendantTypeEdge {
    cursor: String!
    node: MssqlInstanceDescendantType!
}

type MssqlInstanceLogicalChildTypeConnection {
    count: Int!
    edges: [MssqlInstanceLogicalChildTypeEdge!]!
    nodes: [MssqlInstanceLogicalChildType!]!
    pageInfo: PageInfo!
}

type MssqlInstanceLogicalChildTypeEdge {
    cursor: String!
    node: MssqlInstanceLogicalChildType!
}

"""

Supported in v5.0+
"""
type MssqlInstanceSummary {
    """

    Supported in v5.0+
    The address of the instance in a Windows server failover cluster, populated only if it belongs to one.
    """
    clusterInstanceAddress: String
    """

    Supported in v5.0+
    SLA Domain ID assigned to instance.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.0+
    SLA Domain name assigned to instance.
    """
    configuredSlaDomainName: String
    """

    Supported in v5.2+
    Specifies whether the SLA Domain is used for protection or retention.
    """
    configuredSlaDomainType: String
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    """
    internalTimestamp: Long
    """

    Supported in v5.1+
    Boolean value that identifies a Retention Lock SLA Domain. Value is true when the SLA Domain assigned to the instance is Retention Locked and false when it is not.
    """
    isRetentionLocked: Boolean
    mssqlNonSlaProperties: MssqlNonSlaProperties
    mssqlSlaRelatedProperties: MssqlSlaRelatedProperties
    """

    Supported in v5.0+
    """
    name: String
    """

    Required. Supported in v5.0+
    """
    primaryClusterId: String!
    protectionDateV50: String
    protectionDateV51: String
    protectionDateV52: String
    protectionDateV53: String
    protectionDateV60: DateTime
    protectionDateV70: DateTime
    """

    Required. Supported in v5.0+
    """
    rootProperties: MssqlRootProperties
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by Rubrik."
    unprotectableReasonsV50: [MssqlUnprotectableReason!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV51: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV52: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV53: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV60: [String!]!
    "A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM."
    unprotectableReasonsV70: [String!]!
    """

    Supported in v5.0+
    """
    version: String
}

"""

Supported in v5.0+
"""
type MssqlInstanceSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlInstanceSummary!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.3+
"""
type MssqlLogShippingDetailV2 {
    """

    Required. Supported in v5.3+
    """
    links: MssqlLogShippingLinks
    mssqlLogShippingSummaryV2: MssqlLogShippingSummaryV2
    """

    Supported in v5.3+
    Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. This value is returned only when the secondary database is in standby mode.
    """
    shouldDisconnectStandbyUsers: Boolean
}

"""

Supported in v5.0+
"""
type MssqlLogShippingLinks {
    """

    Required. Supported in v5.0+
    """
    primaryDatabase: Link
    """

    Supported in v5.0+
    """
    secondaryDatabase: Link
    """

    Required. Supported in v5.0+
    """
    secondaryInstance: Link
    """

    Supported in v5.0+
    """
    seedRequest: Link
}

"""

Supported in v5.0+
"""
type MssqlLogShippingStatusInfo {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Detailed message describing the current status of the log shipping configuration.
    v5.3+: Detailed message describing the status of the log shipping configuration.
    """
    message: String!
    status: MssqlLogShippingStatusEnum!
}

"""

Supported in v5.0+
"""
type MssqlLogShippingSummary {
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The ID assigned to the log shipping configuration object.
    v5.3+: ID assigned to the log shipping configuration object.
    """
    id: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The number of milliseconds between the time the latest backup was applied to the secondary database and when that backup was taken on the primary database.
    v5.3+: Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
    """
    lagTime: Long
    """

    Supported in v5.0+
    v5.0-v5.2: The timestamp of the last transaction that was applied using the specified log shipping configuration object.
    v5.3+: Timestamp of the last transaction applied using the specified log shipping configuration object.
    """
    lastAppliedPoint: DateTime
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The location of a specified secondary database in the format "host/instance".
    v5.3+: Location of a specified secondary database. Location uses this format: "host/instance".
    """
    location: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The ID of the primary database.
    v5.3+: ID of the primary database.
    """
    primaryDatabaseId: String!
    """

    Supported in v5.2+
    v5.2: Configured log backup frequency of the primary database, in seconds.
    v5.3+: Log backup frequency, in seconds, of the primary database.
    """
    primaryDatabaseLogBackupFrequency: Long
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The name of the primary database.
    v5.3+: Name of the primary database.
    """
    primaryDatabaseName: String!
    """

    Supported in v5.0+
    v5.0-v5.2: The ID of the secondary database.
    v5.3+: ID of the secondary database.
    """
    secondaryDatabaseId: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2: The name of the secondary database.
    v5.3+: Name of the secondary database.
    """
    secondaryDatabaseName: String!
    """

    Supported in v5.0+
    The current state of the secondary database.
    """
    state: String
    """

    Required. Supported in v5.0+
    """
    status: MssqlLogShippingStatusInfo
}

"""

Supported in v5.3+
"""
type MssqlLogShippingSummaryV2 {
    """

    Supported in v5.3+
    Maximum number of makeup reseed attempts during a 24 hour period.
    """
    makeupReseedLimit: Int
    mssqlLogShippingSummary: MssqlLogShippingSummary
}

"""

Supported in v5.0+
"""
type MssqlMissedRecoverableRange {
    """

    Required. Supported in v5.0+
    """
    beginTime: DateTime
    """

    Required. Supported in v5.0+
    """
    description: String!
    """

    Required. Supported in v5.0+
    """
    endTime: DateTime
    """

    Required. Supported in v5.0+
    """
    errorType: String!
    """

    Supported in v5.0+
    """
    firstError: MssqlMissedRecoverableRangeError
    """

    Supported in v5.0+
    """
    lastError: MssqlMissedRecoverableRangeError
}

"""

Supported in v5.0+
"""
type MssqlMissedRecoverableRangeError {
    """

    Supported in v5.0+
    """
    eventMessage: String
    """

    Supported in v5.0+
    """
    eventSeriesId: String
    """

    Required. Supported in v5.0+
    """
    time: DateTime
}

"""

Supported in v5.0+
"""
type MssqlMissedRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlMissedRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0
"""
type MssqlNonSlaProperties {
    """

    Supported in v5.0
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.0
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.0
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"""

Supported in v5.0+
"""
type MssqlRecoverableRange {
    """

    Required. Supported in v5.0+
    """
    beginTime: DateTime
    """

    Required. Supported in v5.0+
    """
    endTime: DateTime
    """

    Required. Supported in v5.0+
    """
    isMountAllowed: Boolean!
    """

    Required. Supported in v5.0+
    """
    status: String!
}

"""

Supported in v5.0+
"""
type MssqlRecoverableRangeListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [MssqlRecoverableRange!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"""

Supported in v5.0+
"""
type MssqlRestoreFile {
    """

    Required. Supported in v5.0+
    Original file ID of the database file to be restored.
    """
    fileId: Long!
    fileType: MssqlDatabaseFileTypeEnum!
    """

    Required. Supported in v5.0+
    Logical name of the database file to be restored.
    """
    logicalName: String!
    """

    Required. Supported in v5.0+
    Original filename of the database file to be restored.
    """
    originalName: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Original path of the database file to be restored.
    v5.3+: Original path to the database file to be restored.
    """
    originalPath: String!
}

"""

Supported in v5.0+
"""
type MssqlRootProperties {
    """

    Supported in v5.0+
    ID of the root of this object.
    """
    rootId: String
    """

    Required. Supported in v5.0+
    Name of the root of this object.
    """
    rootName: String!
    """

    Supported in v5.3+
    Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.
    """
    rootRole: String
    rootType: MssqlRootPropertiesRootTypeEnum!
}

"""

Supported in v5.0+
"""
type MssqlScriptDetail {
    scriptErrorAction: ScriptErrorActionEnum!
    """

    Required. Supported in v5.0+
    The script to be run.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"""

Supported in v5.1+
"""
type MssqlSlaRelatedProperties {
    """

    Supported in v5.1+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.1+
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.1+
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

type MssqlTopLevelDescendantTypeConnection {
    count: Int!
    edges: [MssqlTopLevelDescendantTypeEdge!]!
    nodes: [MssqlTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type MssqlTopLevelDescendantTypeEdge {
    cursor: String!
    node: MssqlTopLevelDescendantType!
}

"""

Supported in v5.0
"""
type MssqlUnprotectableReason {
    """

    Required. Supported in v5.0
    A reason that a SQL Server database or instance cannot be protected by Rubrik.
    """
    message: String!
    unprotectableType: MssqlUnprotectableTypeEnum!
}

type Mutation {
    "Acknowledges and resets cluster status"
    ackAndResetStatus(
        "Cluster state to be acknowledged and reset"
        AckClusterStatus: AckClusterStatus!,
        "Cluster uuid"
        clusterUuid: UUID!
    ): Boolean!
    activateUser(
        "List of IDs."
        ids: [String!]!
    ): [String!]!
    "Add AD Groups to O365 hierarchy."
    addADGroupsToHierarchy(
        "List of Azure natural IDs of AD Groups."
        naturalIds: [UUID!]!,
        orgId: UUID!
    ): RequestStatus!
    "Adds an IAM user-based AWS cloud account and enables the features specified in the input after successful validation of the request."
    addAwsIamUserBasedCloudAccount(
        "Input to add IAM user-based AWS cloud account for native protection."
        input: AddAwsIamUserBasedCloudAccountInput!
    ): AddAwsIamUserBasedCloudAccountReply!
    "Add the Azure Subscriptions cloud account for the given feature."
    addAzureCloudAccount(
        "Input for adding an Azure Cloud Account."
        input: AddAzureCloudAccountInput!
    ): AddAzureCloudAccountResponse!
    "Add Exocompute configurations for an Azure Cloud Account."
    addAzureCloudAccountExocomputeConfigurations(
        "Input for adding Exocompute configurations for an Azure Cloud Account."
        input: AddAzureCloudAccountExocomputeConfigurationsInput!
    ): AddAzureCloudAccountExocomputeConfigurationsResponse!
    "Add the Azure Subscription cloud account for the given feature without OAuth."
    addAzureCloudAccountWithoutOAuth(
        "Input for adding an Azure Cloud Account without OAuth."
        input: AddAzureCloudAccountWithoutOAuthInput!
    ): AddAzureCloudAccountWithoutOAuthResponse!
    "Add Certificate"
    addCertificate(
        "Certificate"
        certificate: String!,
        "CSR id"
        csrId: Long,
        "Certificate description"
        description: String,
        "Certificate name"
        name: String!,
        "Certificate private key"
        privateKey: String
    ): Long!
    "Mutation to add a new Db2 instance."
    addDb2Instance(
        "Input for V1AddDb2Instance."
        input: AddDb2InstanceInput!
    ): AddDb2InstanceReply!
    "Add ldap config"
    addLdapConfig(adDomain: String!, clusterUuid: String!, ldapName: String!, password: String!, userName: String!): UpdateLdapConfigReply!
    """

    Add a New Store

    Supported in m3.2
    Add a new store to Mosaic cluster.
    """
    addMosaicStore(
        "Input for V2AddMosaicStore"
        input: AddMosaicStoreInput!
    ): MosaicAsyncResponse!
    addO365Org(exocomputeClusterId: String!, o365AppTypes: [String!]!, stateToken: String!, tenantId: String!): AddO365OrgResponse!
    "Add policies to objects."
    addPolicyObjects(objectIds: [String!]!, policyIds: [String!]!): String!
    addRoleAssignments(adGroupIds: [String!], roleIds: [String!]!, userIds: [String!]): Boolean!
    addSapHanaSystem(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Add a SAP HANA system to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a SAP HANA system."
        sapHanaSystem: SapHanaSystemConfigInput!
    ): SapHanaAddSystemResponse!
    addSyslogConfiguration(
        "Host name for your SMTP configuration"
        hostName: String!,
        "Network type to use"
        networkProtocolType: NetworkProtocolTypeEnum!,
        "Port number for your SMTP configuration"
        port: Int!,
        "Syslog facility to filter for syslog"
        syslogFacility: SyslogFacilityTypeEnum!,
        "Syslog severity to filter for syslog"
        syslogSeverity: SyslogSeverityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String!,
        "Use TLS or not"
        useTLS: Boolean!
    ): Boolean!
    "Add Vm App consistent specs info"
    addVmAppConsistentSpecs(
        "Whether to cancel backup if pre snapshot script failed to execute on VM"
        cancelBackupIfPreScriptFails: Boolean!,
        "Object type for enabling app consistent protection"
        objectType: CloudNativeVmAppConsistentObjectType!,
        "Path of post snapshot script in VM"
        postSnapshotScriptPath: String,
        "Timeout (in seconds) for post snapshot script to run in VM"
        postSnapshotScriptTimeoutInSeconds: Int,
        "Path of pre snapshot script in VM"
        preSnapshotScriptPath: String,
        "Timeout (in seconds) for pre snapshot script to run in VM"
        preSnapshotScriptTimeoutInSeconds: Int,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): AddVmAppConsistentSpecsReply!
    "Archive a crawl"
    archiveCrawl(crawlId: String!): String!
    "Archive a Kubernetes cluster."
    archiveK8sCluster(
        "UUID of Kubernetes Cluster to Archive."
        input: ArchiveK8sClusterInput!
    ): UUID!
    "Assign SLA domain properties to Mssql objects."
    assignMssqlSlaDomainProperties(
        "Input for V1AssignMssqlSlaProperties"
        input: AssignMssqlSlaPropertiesInput!
    ): ResponseSuccess!
    "Assign protection to cassandra objects."
    assignProtection(
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Arguments for protection backup."
        input: MosaicSlaInfoInput!,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!
    ): SlaAssignResult!
    assignRetentionSLAToSnappables(
        "Provide optional snappable type under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. This allows an SLA to be set for one/more specific snappable types under the object, instead of applying the SLA for all the snappable types. For example, an AWS account object can potentially have 2 different snappable types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA only gets applied to snappables of the selected type under that account. If the SLA must be applicable for all the snappable types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA to a snappable or to an object that does not support multiple snappable types."
        applicableSnappableType: SnappableLevelHierarchyTypeEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
        shouldApplyToNonPolicySnapshots: Boolean
    ): SlaAssignResult!
    assignRetentionSLAToSnapshots(
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "List of UUIDs of objects"
        snapshotFids: [UUID!]!
    ): SlaAssignResult!
    assignSla(
        "Provide optional snappable type under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. This allows an SLA to be set for one/more specific snappable types under the object, instead of applying the SLA for all the snappable types. For example, an AWS account object can potentially have 2 different snappable types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA only gets applied to snappables of the selected type under that account. If the SLA must be applicable for all the snappable types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA to a snappable or to an object that does not support multiple snappable types."
        applicableSnappableType: SnappableLevelHierarchyTypeEnum,
        "Choose what to do with existing snapshot in case of do not protect slas"
        globalExistingSnapshotRetention: GlobalExistingSnapshotRetentionEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        "Boolean value to indicate whether to apply changes made to the SLA to existing snapshots."
        shouldApplyToExistingSnapshots: Boolean,
        "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
        shouldApplyToNonPolicySnapshots: Boolean
    ): SlaAssignResult!
    assignSlasForSnappableHierarchies(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Choose what to do with existing snapshot in case of do not protect slas"
        globalExistingSnapshotRetention: GlobalExistingSnapshotRetentionEnum,
        "Corresponds to the assignment type for the global SLA"
        globalSlaAssignType: SlaAssignTypeEnum!,
        "Corresponds to optional global SLA forever UUID in Polaris tables"
        globalSlaOptionalFid: UUID,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        "Boolean value to indicate whether to apply changes made to the SLA to existing snapshots."
        shouldApplyToExistingSnapshots: Boolean,
        "Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain."
        shouldApplyToNonPolicySnapshots: Boolean
    ): [SlaAssignResult!]!
    "This endpoint is deprecated."
    awsCloudAccountInitiate(
        "Arguments for initiate aws cloud accounts for creation."
        awsCloudAccountInitiateArg: AwsCloudAccountInitiateInput!
    ): AwsCloudAccountCreateResponse! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountUpdateFeature(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!
    ): AwsCloudAccountUpdateFeatureResponse! @deprecated(reason : "Please use prepareFeatureUpdateForAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsCloudAccountValidate(
        "Arguments for validate aws cloud accounts."
        awsCloudAccountValidateArg: AwsCloudAccountValidateInput!
    ): AwsCloudAccountValidateResponse! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount instead.")
    "This endpoint is deprecated."
    awsNativeProtectionAccountAdd(
        "Arguments to add account for native protection."
        awsNativeProtectionAccountAddArg: AwsNativeProtectionAccountAddRequest!
    ): AwsNativeProtectionAccountAddResponse! @deprecated(reason : "Please use validateAndCreateAwsCloudAccount and finalizeAwsCloudAccountProtection instead.")
    azureOAuthConsentComplete(azureAppID: String, azureAppSecret: String, azureCloudType: O365AzureCloudTypeEnum!, code: String!, redirectUrl: String!, stateToken: String!, tenantId: String!): RequestStatus!
    azureOAuthConsentKickoff: AzureOAuthConsentKickoffResp!
    "backup mailbox snappable"
    backupO365Mailbox(
        "The list of mailbox UUIDs to backup."
        mailboxIds: [UUID!]!
    ): BatchAsyncJobStatus!
    "backup onedrive snappable"
    backupO365Onedrive(
        "The list of onedrive UUIDs to backup."
        onedriveUUIDs: [UUID!]!
    ): BatchAsyncJobStatus!
    "backup sharepoint snappable"
    backupO365SharepointDrive(
        "The list of sharepoint UUIDs to backup."
        sharepointDriveUUIDs: [UUID!]!
    ): BatchAsyncJobStatus!
    "Take on-demand snapshot for SharePoint list."
    backupO365SharepointList(input: BackupO365SharePointListInput!): CreateOnDemandJobReply!
    "backup O365Team snappable"
    backupO365Team(
        "The list of team UUIDs to backup."
        teamUUIDs: [UUID!]!
    ): BatchAsyncJobStatus!
    batchDeassignRoleFromUserGroups(userGroupToRoles: [UserGroupToRolesInput!]!): Boolean!
    blueprintFailoverReportGenerate(failoverReportGeneratorJobConfig: BlueprintFailoverReportGeneratorJobInfo!): CreateOnDemandJobReply!
    "Bootstrap a cluster."
    bootstrapClusterAsync(
        "BootstrapClusterReqInput params."
        input: bootstrapClusterInput!
    ): CcProvisionJobReply!
    "List snapshots and logs from a Mssql Database. This endpoint is only used to fetch data, but uses a mutation instead of a query due to limitations with the CDM API."
    browseMssqlDatabaseSnapshot(
        "Input for V1BrowseMssqlBackupFiles"
        input: BrowseMssqlBackupFilesInput!
    ): MssqlBackups!
    "Install or uninstall volume filter driver on hosts."
    bulkChangeVfdOnHost(
        "Input for InternalChangeVfdOnHost"
        input: ChangeVfdOnHostInput!
    ): InternalChangeVfdOnHostResponse!
    bulkCreateFilesetTemplates(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Provide an array containing a separate object for each fileset template definition."
        definitions: [FilesetTemplateCreateInput!]!
    ): FilesetTemplateDetailListResponse!
    bulkCreateFilesets(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "For each fileset, specify a template id along with either host id or share id. If a share id is provided, the host id will be inferred from the host share."
        definitions: [FilesetCreateInput!]!
    ): FilesetDetailListResponse!
    "Take a bulk on-demand backup of a Microsoft SQL Database."
    bulkCreateOnDemandMssqlBackup(
        "Input for V1CreateOnDemandMssqlBatchBackupV1"
        input: CreateOnDemandMssqlBatchBackupV1Input!
    ): AsyncRequestStatus!
    """

    Create one or more SnapMirror Cloud protected objects for multiple NetApp volumes

    Supported in v7.0
    Create multiple SnapMirror Cloud protected objects, one for each specified NetApp volume.
    """
    bulkCreateSnapMirrorCloud(
        "Input for V1BulkCreateSnapMirrorCloud"
        input: BulkCreateSnapMirrorCloudInput!
    ): SnapMirrorCloudDetailList!
    "Bulk Delete cassandra sources."
    bulkDeleteCassandraSources(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "List of names of sources to be deleted"
        sourceData: BulkDeleteSourceRequestInput!
    ): MosaicAsyncResponse!
    bulkDeleteFilesetTemplates(
        "Provide an array with the ID of each fileset template to remove."
        ids: [String!]!,
        "Flag to indicate whether to convert snapshots of filesets of the deleted templates to relics or to delete them. Applies to all templates being deleted. Default is true."
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    bulkDeleteFilesets(
        "Provide a comma-separated list of fileset IDs."
        ids: [String!]!,
        "Flag to indicate whether to convert snapshots of all deleted filesets to relics or to delete them. Applies to all filesets. Default is true."
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    bulkDeleteHosts(
        "Provide the ID of each host to deregister."
        ids: [String!]!
    ): ResponseSuccess!
    bulkEditFilesetTemplates(
        "Provide an array containing a separate object for each fileset template being modified."
        definitions: [FilesetTemplatePatchInput!]!
    ): FilesetTemplateDetailListResponse!
    bulkEditHosts(
        "Properties to update for each host."
        hostUpdateProperties: [HostUpdateIdInput!]!
    ): InternalBulkUpdateHostResponse!
    bulkRegisterHosts(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Array containing a registration definition for each host."
        hosts: [HostRegisterInput!]!
    ): HostDetailListResponse!
    "Update multiple Microsoft SQL databases with the specified properties."
    bulkUpdateMssqlDbs(
        "Input for V1BulkUpdateMssqlDbV1"
        input: BulkUpdateMssqlDbV1Input!
    ): V1BulkUpdateMssqlDbV1Response!
    cancelActivitySeries(
        "The id of the activity series"
        activitySeriesId: UUID!,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Boolean!
    cancelBlueprintFailover(taskchainId: UUID!): Result!
    "Cancels download package job of a cluster"
    cancelDownloadPackage(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CancelJobReply!
    "Cancels scheduled upgrade job of a cluster"
    cancelScheduledUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CancelJobReply!
    cancelTaskchain(taskchainId: String!): RequestStatus!
    changePassword(
        "User credentials required to change a user's password."
        input: ChangePasswordInput!
    ): Boolean!
    cleanupBlueprintFailover(cleanupJobconfig: CleanupFailoverJobInfo!): CreateOnDemandJobReply!
    "Check RBA connectivity for the VMs"
    cloudNativeCheckRBAConnectivity(
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): CheckRBAConnectivityReply!
    "Download files from cloudnative snapshot"
    cloudNativeDownloadFiles(
        "Create the download location"
        createDownloadLoaction: Boolean!,
        "Location where the files would be downloaded"
        downloadLocation: String!,
        "Rubrik ID of the account from which exocompute is launched during recovery. Only applicable when snapshot type is ARCHIVED."
        exocomputeCloudNativeAccountId: UUID,
        "Cloud account region where Rubrik Exocompute is launched during recovery. Only applicable when snapshot type is ARCHIVED."
        exocomputeRegion: String,
        "File/Directory(s) to download"
        filePaths: [String!]!,
        "Snapshot UUID"
        snapshotId: UUID!,
        "Use a snapshot type of SOURCE, REPLICATED or ARCHIVED for recovery."
        snapshotType: SnapshotType,
        "List of key-value pairs for tags."
        tags: [TagType!]
    ): DownloadFilesReply!
    "Complete the Azure OAuth flow and pass the authorization code."
    completeAzureCloudAccountOAuth(
        "Input for completing authentication of the Azure Cloud Accounts."
        input: CompleteAzureCloudAccountOAuthInput!
    ): CompleteAzureCloudAccountOAuthResponse!
    "Configure DNS server addresses."
    configureDns(
        "DNS Addresses."
        dnsAddresses: [String!]!
    ): Boolean!
    "Configure NTP server addresses."
    configureNtp(
        "NTP Addresses."
        ntpAddresses: [String!]!
    ): Boolean!
    createAppBlueprint(children: [AppBlueprintChildInput!]!, name: String!, primaryClusterUuid: UUID!): Blueprint!
    createAppBlueprintDownloadSnapshotJobFromCloud(appSnapshotFid: UUID!): Result!
    createAppBlueprintExport(
        exportJobConfig: AppBlueprintExportSnapshotJobConfig!,
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    createAppBlueprintInstantRecovery(
        "The Polaris UUID for the object."
        fid: UUID!,
        instantRecoveryJobConfig: InstantRecoveryJobConfig
    ): Result!
    createAppBlueprintMount(
        "The Polaris UUID for the object."
        fid: UUID!,
        mountJobConfig: AppBlueprintMountSnapshotJobConfig!
    ): Result!
    createAutomaticAwsTargetMapping(automaticAwsTargetMappingCreateRequest: AutomaticAwsTargetMappingCreateRequest!): TargetMapping!
    createAutomaticAzureTargetMapping(automaticAzureTargetMappingCreateRequest: AutomaticAzureTargetMappingCreateRequest!): TargetMapping!
    createAwsAccount(
        "Request arg for creating a new AWS account"
        awsAccountCreateRequest: AwsAccountCreateRequest!
    ): CloudAccount!
    createAwsComputeSetting(
        "Request for creating a new Aws Compute Setting"
        awsComputeSettingsCreateRequest: AwsComputeSettingsCreateRequest!
    ): AwsComputeSettings!
    "Create AWS Exocompute configs."
    createAwsExocomputeConfigs(
        "Input to create AWS exocompute configurations."
        input: CreateAwsExocomputeConfigsInput!
    ): CreateAwsExocomputeConfigsReply!
    createAwsTarget(
        "Request for creating a new AWS target"
        awsTargetCreateRequest: AwsTargetCreateRequest!
    ): Target!
    createAzureAccount(
        "Request arg for creating a new Azure account"
        azureAccountCreateRequest: AzureAccountCreateRequest!
    ): CloudAccount!
    "Create a cluster in Azure."
    createAzureClusterAsync(
        "CreateAzureClusterArg params for Azure."
        input: CreateAzureClusterInput!
    ): CcProvisionJobReply!
    createAzureTarget(
        "Request for creating a new Azure target"
        azureTargetCreateRequest: AzureTargetCreateRequest!
    ): Target!
    "Create set of azure vms."
    createAzureVms(
        "CreateAzureClusterArg params for Azure."
        input: CreateAzureClusterInput!
    ): AzureClusterCreateReply!
    createBlueprint(
        children: [AppBlueprintChildInput!]!,
        "Flag to mark if hydration is enabled for the blueprint."
        enableHydration: Boolean,
        name: String!,
        "The id of the source location."
        sourceLocationId: String!,
        "The type of the source location."
        sourceLocationType: BlueprintLocationTypeEnum! = CDM,
        "The status of the blueprint."
        status: BlueprintStatusEnum! = Uncompleted,
        "The id of the intended remote target location."
        targetLocationId: String,
        "The type of the intended remote target location."
        targetLocationType: BlueprintLocationTypeEnum = CDM
    ): BlueprintNew!
    "create a list of blueprint recovery specs with a list of child snappable/snapshot recovery specs"
    createBlueprintRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "Indicate if its not a default recovery spec request."
        isDefaultRecoverySpec: Boolean,
        "configurations of the recovery specs"
        recoveryConfigs: [AppBlueprintRecoverySpecCreateReqInputType!]!,
        "the type of the recovery specs (AWS_EC2, VMWARE_VM)"
        specType: RecoverySpecTypeEnum!
    ): [BlueprintRecoverySpec!]!
    createBlueprintSnapshot(
        BaseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfig,
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    "Create a cassandra source."
    createCassandraSource(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Source Object with details of source to be added."
        sourceData: SourceInput!
    ): MosaicAsyncResponse!
    createCloudNativeAwsStorageSetting(input: CreateCloudNativeAwsStorageSettingInput!): CreateCloudNativeAwsStorageSettingReply!
    "Creates Storage Settings for the archival of azure cloud native protected objects"
    createCloudNativeAzureStorageSetting(input: CreateCloudNativeAzureStorageSettingInput!): CreateCloudNativeAzureStorageSettingReply!
    "Create cloud native label rule"
    createCloudNativeLabelRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables."
        globalSlaOptionalFid: UUID,
        "Label key-value pair for label rule."
        label: LabelType!,
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA."
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): CreateCloudNativeLabelRuleReply!
    "Create cloud native tag rule"
    createCloudNativeTagRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables."
        globalSlaOptionalFid: UUID,
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA."
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!,
        "Tag key-value pair for tag rule."
        tag: TagType!
    ): CreateCloudNativeTagRuleReply!
    "Create a new custom analyzer"
    createCustomAnalyzer(analyzer: AnalyzerInput!): Analyzer!
    createCustomReport(config: CustomReportCreate!): CustomReport!
    createFailoverCluster(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Create configuration parameters for a failover cluster."
        config: FailoverClusterConfigInput!
    ): FailoverClusterDetail!
    "Create a failover cluster app."
    createFailoverClusterApp(
        "Create configuration parameters for a failover cluster app."
        config: FailoverClusterAppConfigInput!
    ): FailoverClusterAppSummary!
    createFilesetSnapshot(
        "Configuration for the on-demand backup."
        config: BaseOnDemandSnapshotConfigInput!,
        "ID of the Fileset."
        id: String!
    ): AsyncRequestStatus!
    createGcpTarget(
        "Request for creating a new Gcp target"
        input: GcpTargetCreateInput!
    ): Target!
    createGlobalSla(globalSlaCreateRequest: GlobalSlaCreateRequest!): GlobalSla!
    "Add a Kubernetes cluster."
    createK8sCluster(
        "Request for creating a new K8s cluster."
        k8sClusterCreateRequest: K8sClusterCreateInput!
    ): OnboardingSetupReply!
    "Place legal hold on snapshots."
    createLegalHold(
        "Create Legal Hold Request."
        input: CreateLegalHoldInput!
    ): CreateLegalHoldReply!
    createManualTargetMapping(manualTargetMappingCreateRequest: ManualTargetMappingCreateRequest!): TargetMapping!
    "Create live mount of a Microsoft SQL Database."
    createMssqlLiveMount(
        "Input for V1CreateMssqlMount"
        input: CreateMssqlMountInput!
    ): AsyncRequestStatus!
    createNfsTarget(
        "Request for creating a new NFS target"
        nfsTargetCreateRequest: NfsTargetCreateRequest!
    ): Target!
    createO365AppComplete(o365AppClientId: String!, stateToken: String!, tenantId: String!): RequestStatus!
    createO365AppKickoff(o365AppType: String!, o365SubscriptionName: String!): CreateO365AppKickoffResp!
    "Take an on-demand backup of a Microsoft SQL Database"
    createOnDemandMssqlBackup(
        "Input for V1CreateOnDemandMssqlBackup"
        input: CreateOnDemandMssqlBackupInput!
    ): AsyncRequestStatus!
    """

    Create on-demand snapshot for the Volume Group

    Supported in v5.3+
    Create an on-demand snapshot for the given Volume Group ID.
    """
    createOnDemandVolumeGroupBackup(
        "Input for V1CreateOnDemandVolumeGroupBackup"
        input: CreateOnDemandVolumeGroupBackupInput!
    ): AsyncRequestStatus!
    createOrg(name: String!): UUID!
    "Create a classification policy"
    createPolicy(policy: ClassificationPolicyInput!): ClassificationPolicyDetail!
    createRcsTarget(
        "Request for creating a new RCS Azure location"
        rcsAzureTargetCreateRequest: RcsTargetCreateRequest!
    ): Target!
    createReport(reportConfig: ReportConfigInput!): Int!
    createRole(description: String!, name: String!, permissions: [PermissionInput!]!): UUID!
    createS3CompatibleTarget(
        "Request for creating a new S3Compatible target"
        input: S3CompatibleTargetCreateInput!
    ): Target!
    createSapHanaDatabaseSnapshot(
        "Configuration for the on demand backup."
        config: BaseOnDemandSnapshotConfigInput!,
        "ID of the Fileset."
        id: String!
    ): AsyncRequestStatus!
    createScheduledReport(scheduledReport: ScheduledReportCreate!): ScheduledReport!
    createServiceAccount(
        "Description of the service account"
        description: String,
        "Name of the service account"
        name: String!,
        "IDs of roles to be assigned to the service account"
        roleIds: [String!]!
    ): CreateServiceAccountReply!
    """

    Create a SnapMirror Cloud protected object for a NetApp volume

    Supported in v7.0
    Create a SnapMirror Cloud protected object for a NetApp volume.
    """
    createSnapMirrorCloud(
        "Input for V1CreateSnapMirrorCloud"
        input: CreateSnapMirrorCloudInput!
    ): SnapMirrorCloudDetail!
    """

    Create a SnapMirrorCloud relationship on NetApp server between the volume and the cloud target

    Supported in v7.0
    Creates a SnapMirrorCloud relationship on NetApp server between the volume and the cloud target which are configured on the SnapMirrorCloud protected object.
    """
    createSnapMirrorCloudRelationship(
        "Input for V1CreateSnapMirrorCloudRelationship"
        input: CreateSnapMirrorCloudRelationshipInput!
    ): CreateSnapMirrorCloudRelationshipReply!
    """

    Create restore job to restore multiple files/directories or the NetApp volume

    Supported in v7.0
    Launches a job to restore a source NetApp volume or a subset of the files and directories in that volume to a target volume. The target volume can be the same as the source volume.
    """
    createSnapMirrorCloudRestoreJob(
        "Input for V1CreateSnapMirrorCloudRestoreJob"
        input: CreateSnapMirrorCloudRestoreJobInput!
    ): AsyncRequestStatus!
    """

    Initiate an on-demand backup for SnapMirror Cloud protected object

    Supported in v7.0
    Create an on-demand backup request for the specified SnapMirror Cloud protected object.
    """
    createSnapMirrorCloudSnapshot(
        "Input for V1CreateSnapMirrorCloudBackupJob"
        input: CreateSnapMirrorCloudBackupJobInput!
    ): ResponseSuccess!
    createUser(email: String!, roleIds: [String!]!): String!
    createUserWithPassword(
        "User credentials required to create a new user."
        input: CreateUserWithPasswordInput!
    ): String!
    "Add a vCenter server"
    createVsphereVcenter(
        "Input for V2CreateVcenterV2"
        input: CreateVcenterV2Input!
    ): VcenterCreateResponse!
    "Deactivate a custom analyzer"
    deactivateCustomAnalyzer(analyzerId: String!): String!
    "Deactivate a classification policy"
    deactivatePolicy(policyId: String!, runAsync: Boolean!): [String!]!
    deactivateUser(
        "List of IDs."
        ids: [String!]!
    ): [String!]!
    "Delete AD Groups from O365 hierarchy."
    deleteADGroupsFromHierarchy(
        "List of Polaris internal group IDs."
        groupIds: [UUID!]!,
        orgId: UUID!
    ): RequestStatus!
    "Delete account settings value."
    deleteAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!
    ): Boolean!
    deleteAppBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Boolean!
    deleteAppBlueprintSnapshot(
        "The Polaris UUID for the object."
        fid: UUID!,
        location: String!
    ): Result!
    deleteAppBlueprintSnapshots(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Result!
    deleteAwsComputeSetting(
        "Id of aws compute setting."
        awsComputeSettingId: UUID!
    ): DeleteAwsCloudComputeSettingReply!
    "Deletes AWS Exocompute configs."
    deleteAwsExocomputeConfigs(
        "List of AWS exocompute configuration IDs."
        input: DeleteAwsExocomputeConfigsInput!
    ): DeleteAwsExocomputeConfigsReply!
    "Deletes IAM user-based AWS cloud account."
    deleteAwsIamUserBasedCloudAccount(
        "Input to delete IAM user-based AWS cloud account."
        input: DeleteAwsIamUserBasedCloudAccountInput!
    ): DeleteAwsIamUserBasedCloudAccountReply!
    "Delete the Azure Subscriptions cloud account for the given feature."
    deleteAzureCloudAccount(
        "Input for deleting an Azure Cloud Account."
        input: DeleteAzureCloudAccountInput!
    ): DeleteAzureCloudAccountResponse!
    "Delete Exocompute configurations for an Azure Cloud Account."
    deleteAzureCloudAccountExocomputeConfigurations(
        "Input for adding Exocompute configurations for an Azure Cloud Account."
        input: DeleteAzureCloudAccountExocomputeConfigurationsInput!
    ): deleteAzureCloudAccountExocomputeConfigurationsResponse!
    "Delete the Azure Subscriptions cloud account for the given feature without OAuth."
    deleteAzureCloudAccountWithoutOAuth(
        "Input for deleting an Azure Cloud Account without OAuth."
        input: DeleteAzureCloudAccountWithoutOAuthInput!
    ): DeleteAzureCloudAccountWithoutOAuthResponse!
    "Delete a cluster in Azure."
    deleteAzureClusterAsync(
        "DeleteAzureClusterInput params for Azure."
        input: DeleteAzureClusterInput!
    ): CcProvisionJobReply!
    deleteBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Boolean!
    "Delete a cassandra source."
    deleteCassandraSource(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Name of the Mosaic source to be deleted."
        sourceName: String!
    ): MosaicAsyncResponse!
    "Delete Certificate"
    deleteCertificate(
        "Certificate id"
        certificateId: Long!
    ): Boolean!
    "Delete cloud native label rule"
    deleteCloudNativeLabelRule(
        "UUID for the tag or label rule"
        ruleId: UUID!
    ): String!
    "Delete cloud native tag rule"
    deleteCloudNativeTagRule(
        "UUID for the tag or label rule"
        ruleId: UUID!
    ): String!
    deleteCustomReport(id: Int!): Int!
    "Mutation to delete existing Db2 instance."
    deleteDb2Instance(
        "Input to delete the Db2 Instance."
        input: DeleteDb2InstanceInput!
    ): AsyncRequestStatus!
    deleteEventDigest(recipientUserIDs: [String!]!): Boolean!
    deleteFailoverCluster(
        "ID of the failover cluster."
        id: String!,
        """

        v5.2-v5.3: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0+: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    "Delete failover cluster application."
    deleteFailoverClusterApp(
        "ID of the failover cluster app."
        id: String!,
        """

        v5.2-v5.3: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0+: A Boolean that specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    "Delete failover cluster applications."
    deleteFailoverClusterApps(
        "The ID of each failover cluster application to delete."
        ids: [String!]!,
        """

        v5.3: Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0+: Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    deleteFailoverClusters(
        "The ID of each failover cluster to delete."
        ids: [String!]!,
        """

        v5.3: Specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true.'
        v6.0+: Specifies whether to preserve the snapshots of the fileset which belong to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
        """
        preserveSnapshots: Boolean
    ): ResponseSuccess!
    deleteFilesetSnapshots(
        "ID of the fileset."
        id: String!
    ): ResponseSuccess!
    deleteGlobalSla(
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!
    ): SlaResult!
    deleteIdentityProvider: IdentityProvider!
    deleteLdapPrincipals(principalIds: [String!]!): Boolean!
    """

    Remove the store by store_name

    Supported in m3.2
    Remove a store from Mosaic cluster
    """
    deleteMosaicStore(
        "Input for V2DeleteMosaicStore"
        input: DeleteMosaicStoreInput!
    ): MosaicAsyncResponse!
    "Delete snapshots of a Microsoft SQL Database."
    deleteMssqlDbSnapshots(
        "Input for V1DeleteMssqlDbSnapshots"
        input: DeleteMssqlDbSnapshotsInput!
    ): ResponseSuccess!
    """

    Delete a registered NAS system

    Supported in v7.0
    Delete a NAS system by specifying the NAS system ID.
    """
    deleteNasSystem(
        "Input for V1DeleteNasSystem"
        input: DeleteNasSystemInput!
    ): AsyncRequestStatus!
    deleteO365AzureApp(o365AppClientId: String!, o365AppType: String!): RequestStatus!
    deleteO365Org(orgId: UUID!): CreateOnDemandJobReply!
    deleteO365ServiceAccount(orgId: UUID!): RequestStatus!
    "Deletes the polaris on-demand snapshot by id"
    deletePolarisSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): Boolean!
    "delete the recovery specs with the given app blueprint"
    deleteRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "List of plan types (PROD, TEST, PROD_LOCAL) that will be excluded from spec deletion."
        excludePlanTypes: [PlanNameEnum!]!
    ): DeleteBlueprintRecoverySpecReply!
    deleteReport(reportID: Int!): Boolean!
    deleteRole(roleId: String!): Boolean!
    "Delete SMTP configuration value."
    deleteSMTPConfiguration: Boolean!
    deleteSapHanaDatabaseSnapshot(
        "ID assigned to a SAP HANA database full snapshot."
        id: String!
    ): ResponseSuccess!
    deleteSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!
    ): AsyncRequestStatus!
    deleteScheduledReport(id: Int!): Int!
    deleteServiceAccountsFromAccount(
        "List of service account IDs to be deleted"
        ids: [String!]!
    ): Boolean!
    """

    Delete a SnapMirror Cloud protected object

    Supported in v7.0
    Delete a SnapMirror Cloud protected object specified by the object ID.
    """
    deleteSnapMirrorCloud(
        "Input for V1DeleteSnapMirrorCloud"
        input: DeleteSnapMirrorCloudInput!
    ): ResponseSuccess!
    """

    Delete the SnapMirrorCloud relationship on the NetApp server between the volume and the cloud target

    Supported in v7.0
    Deletes the SnapMirrorCloud relationship on the NetApp server between the volume and the cloud target. Also deletes objects on the NetApp server used to establish the relationship.
    """
    deleteSnapMirrorCloudRelationship(
        "Input for V1DeleteSnapMirrorCloudRelationship"
        input: DeleteSnapMirrorCloudRelationshipInput!
    ): ResponseSuccess!
    deleteSnapshotsOfUnmanagedObjects(
        "List of UUIDs of objects"
        objectIds: [UUID!]!
    ): RequestSuccess!
    deleteSyslogConfiguration(
        "Syslog ids to delete"
        ids: [String!]!
    ): Boolean!
    deleteTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetDeleteResult!
    deleteTargetMapping(targetMappingDeleteRequest: TargetMappingDeleteRequest!): TargetMappingDeletionResult!
    "Reset TOTP configuration for a user. Return true when the operation succeeds."
    deleteTotpConfig(
        "User ID."
        userId: String!
    ): Boolean!
    "Reset TOTP configuration for users in batch. Return true when the operation succeeds."
    deleteTotpConfigs(
        "Input required for resetting TOTP for users in batch."
        input: DeleteTotpConfigsInput!
    ): Boolean!
    deleteUnmanagedSnapshots(
        "List of UUIDs of snapshots"
        snapshotIds: [UUID!]!
    ): RequestSuccess!
    deleteUsersFromAccount(
        "List of IDs."
        ids: [String!]!
    ): Boolean!
    """

    Requst to delete a mount

    Supported in v5.0+
    Create a request to delete a mount. If there are volumes mounted on a target host, this will use best-effort to unmount those volumes from the host, and proceed to unmount storage on Rubrik.
    """
    deleteVolumeGroupMount(
        "Input for InternalDeleteVolumeGroupSnapshotMount"
        input: DeleteVolumeGroupSnapshotMountInput!
    ): AsyncRequestStatus!
    "A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this resumes replication from that source cluster to the target cluster."
    disableReplicationPause(
        "Input for V1DisablePerLocationPause"
        input: DisablePerLocationPauseInputVariable!
    ): ResponseSuccess!
    "Dissolve legal hold on snapshots."
    dissolveLegalHold(
        "Dissolve Legal Hold Request."
        input: DissolveLegalHoldInput!
    ): DissolveLegalHoldReply!
    downloadFile(fileType: FileTypeEnum!, reportConfig: ReportConfigInput, reportID: Int!): reportGenerateReply!
    downloadFilesetSnapshot(
        "ID of snapshot."
        id: String!
    ): AsyncRequestStatus!
    """

    Downloads a list of snapshot and log backups from a Microsoft SQL database

    Supported in v5.2+
    Downloads a list of snapshot and log backups from a Microsoft SQL database.
    """
    downloadMssqlDatabaseBackupFiles(
        "Input for V1CreateDownloadMssqlBackupFilesById"
        input: CreateDownloadMssqlBackupFilesByIdInput!
    ): AsyncRequestStatus!
    "Download Microsoft SQL Database backup files from archival location."
    downloadMssqlDatabaseFilesFromArchivalLocation(
        "Input for V1DownloadFromArchive"
        input: DownloadFromArchiveInput!
    ): AsyncRequestStatus!
    "Schedule a download CSV job for cross object files."
    downloadObjectFilesCsv(
        "Request for scheduling a download CSV job for cross object files."
        DownloadObjectFilesCsvInput: DownloadObjectFilesCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for objects list."
    downloadObjectsListCsv(
        "Request for scheduling a download CSV job for objects list."
        DownloadObjectsListCsvInput: DownloadObjectsListCsvInput!
    ): DownloadCsvReply!
    downloadReportCSVAsync(config: CustomReportCreate, id: Int!): AsyncDownloadReply!
    downloadReportPDFAsync(config: CustomReportCreate, id: Int!): AsyncDownloadReply!
    "Download file results csv"
    downloadResultsCsv(crawlId: String!, downloadFilter: DownloadResultsCsvFiltersInput): DownloadResultsCsvReply!
    "Download snapshot policy results csv"
    downloadSnapshotResultsCsv(downloadFilter: DownloadResultsCsvFiltersInput, snappableFid: String!, snapshotFid: String!): DownloadCsvReply!
    "Schedule a download CSV job for a user's activity."
    downloadUserActivityCsv(
        "Request for scheduling a download CSV job for a user's activity."
        DownloadUserActivityCsvInput: DownloadUserActivityCsvInput!
    ): DownloadCsvReply!
    "Schedule a download CSV job for user activity on a specific file."
    downloadUserFileActivityCsv(
        "Request for scheduling a download CSV job for a user activity on a specific file."
        DownloadUserFileActivityCsvInput: DownloadUserFileActivityCsvInput!
    ): DownloadCsvReply!
    """

    Download files from Volume Group snapshot

    Supported in v5.0+
    Create a download files request.
    """
    downloadVolumeGroupSnapshotFiles(
        "Input for InternalCreateVolumeGroupDownloadFilesJob"
        input: CreateVolumeGroupDownloadFilesJobInput!
    ): AsyncRequestStatus!
    editAutomaticAwsTargetMapping(automaticAwsTargetMappingEditRequest: AutomaticAwsTargetMappingEditRequest!): TargetMapping!
    editAutomaticAzureTargetMapping(automaticAzureTargetMappingEditRequest: AutomaticAzureTargetMappingEditRequest!): TargetMapping!
    editAwsAccount(
        "Request for editing an existing AWS account"
        awsAccountEditRequest: AwsAccountEditRequest!
    ): CloudAccount!
    editAwsTarget(
        "Request for updating an existing AWS target"
        awsTargetEditRequest: AwsTargetEditRequest!
    ): Target!
    editAzureAccount(
        "Request for editing an existing Azure account"
        azureAccountEditRequest: AzureAccountEditRequest!
    ): CloudAccount!
    editAzureTarget(
        "Request for updating an existing Azure target"
        azureTargetEditRequest: AzureTargetEditRequest!
    ): Target!
    "Edit Certificate"
    editCertificate(
        "Certificate"
        certificate: String,
        "Certificate id"
        certificateId: Long!,
        "Certificate description"
        description: String,
        "Certificate name"
        name: String
    ): Boolean!
    editClusterDefaultAddress(
        clusterDefaultAddress: String,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Cluster!
    editClusterLocation(
        clusterLocation: ClusterLocationEdit!,
        "The id of the cluster"
        clusterUuid: UUID!
    ): Cluster!
    editCustomReport(config: CustomReportCreate!, id: Int!): CustomReport!
    editGcpTarget(
        "Request for updating an existing Gcp target"
        input: GcpTargetEditInput!
    ): Target!
    editGlobalSla(globalSlaEditRequest: GlobalSlaEditRequest!): GlobalSla!
    editManualTargetMapping(manualTargetMappingEditRequest: ManualTargetMappingEditRequest!): TargetMapping!
    editNfsTarget(
        "Request for updating an existing NFS target"
        nfsTargetEditRequest: NfsTargetEditRequest!
    ): Target!
    editRcsTarget(
        "Request for editing a new RCS Azure location"
        rcsAzureTargetEditRequest: RcsTargetEditRequest!
    ): Target!
    editS3CompatibleTarget(
        "Request for updating an existing S3Compatible target"
        input: S3CompatibleTargetEditInput!
    ): Target!
    editSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!,
        "An object that contains the updated SLA Domain ID for the SAP HANA system."
        updateProperties: SapHanaSystemPatchInput!
    ): SapHanaPatchSystemResponse!
    editScheduledReport(id: Int!, scheduledReport: ScheduledReportCreate!): ScheduledReport!
    "Enable/disable auto fmd upload on given cluster"
    enableAutomaticFmdUpload(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Enable or disable lambda service."
        enabled: Boolean!
    ): EnableAutomaticFmdUploadReply!
    "Enable/ Disable App consistency for a VM"
    enableDisableAppConsistency(
        "Whether to enable app consistency on VMs"
        enable: Boolean!,
        "Object type for enabling app consistent protection"
        objectType: CloudNativeVmAppConsistentObjectType!,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): EnableDisableAppConsistencyReply!
    "Enable/disable lambda service for given snappable on given cluster"
    enableLambdaForSnappable(
        "Enable or disable diff fmd upload."
        enableDiffFmd: Boolean!,
        "Enable or disable full fmd upload."
        enableFullFmd: Boolean!,
        "the fid of the snappable"
        snappableId: UUID!
    ): EnableLambdaForSnappableReply!
    enableO365SharePoint(exocomputeClusterId: String!): RequestStatus!
    enableO365Teams(exocomputeClusterId: String!): RequestStatus!
    "A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this pauses replication from that source cluster to the target cluster."
    enableReplicationPause(
        "Input for V1EnablePerLocationPause"
        input: EnablePerLocationPauseInputVariable!
    ): ResponseSuccess!
    "Mark AWS Native EBS Volumes to be excluded from EC2 Instance snapshot. By default, all EBS Volumes are marked as included."
    excludeAwsNativeEbsVolumesFromSnapshot(
        "Input to mark EBS volumes to be excluded for EC2 snapshot."
        input: ExcludeAwsNativeEbsVolumeFromSnapshotInput!
    ): String!
    "Exclude the Managed Disks from snapshots, for the specified virtual machines."
    excludeAzureNativeManagedDisksFromSnapshot(
        "Input for excluding Azure Native Managed Disks from Snapshot."
        input: ExcludeAzureNativeManagedDisksFromSnapshotInput!
    ): String!
    "Create a request to export a Microsoft SQL database."
    exportMssqlDatabase(
        "Input for V1CreateExportMssqlDb"
        input: CreateExportMssqlDbInput!
    ): AsyncRequestStatus!
    exportO365Mailbox(exportConfig: ExportO365MailboxInput!): CreateOnDemandJobReply!
    filesetAddHost(
        "host name"
        hostName: String!,
        snappableFid: UUID!
    ): RequestSuccess!
    filesetDownloadSnapshotFiles(
        "Configuration information for a job to download files and folders from a fileset backup."
        config: FilesetDownloadFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        "ID assigned to a fileset backup object."
        id: String!,
        nextSnapshotFid: UUID
    ): AsyncRequestStatus!
    filesetExportSnapshotFiles(
        "The configuration of a job that exports one or more files or folders from a fileset backup."
        config: FilesetExportFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        "ID of snapshot."
        id: String!,
        nextSnapshotFid: UUID,
        "os type"
        osType: GuestOsTypeEnum!,
        "share type"
        shareType: ShareTypeEnum! = NoShareType
    ): AsyncRequestStatus!
    filesetRecoverFiles(
        "Configuration for job to restore one or more files or folders from a fileset backup."
        config: FilesetRestoreFilesJobConfigInput!,
        deltaTypeFilter: [DeltaTypeEnum!],
        nextSnapshotFid: UUID,
        "os type"
        osType: GuestOsTypeEnum!,
        "List of restore path pairs"
        restorePathPairList: [OldRestorePathPairInput!]!,
        "share type"
        shareType: ShareTypeEnum! = NoShareType,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): AsyncRequestStatus!
    "Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features."
    finalizeAwsCloudAccountDeletion(
        "Arguments to process AWS cloud accounts for deletion."
        input: FinalizeAwsCloudAccountDeletionInput!
    ): FinalizeAwsCloudAccountDeletionReply!
    "Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step."
    finalizeAwsCloudAccountProtection(
        "Arguments for process cloud accounts."
        input: FinalizeAwsCloudAccountProtectionInput!
    ): FinalizeAwsCloudAccountProtectionReply!
    "Adds a new cloud account for the GCP project which is not already added"
    gcpCloudAccountAddManualAuthProject(
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!,
        "The native project ID of the GCP project."
        gcpNativeProjectId: String!,
        "The project name of the GCP project."
        gcpProjectName: String!,
        "The project number of the GCP project."
        gcpProjectNumber: Long!,
        "[Optional] The name of the organization containing the project."
        organizationName: String,
        "[Optional] JWT config of the service account."
        serviceAccountJwtConfigOptional: String
    ): Boolean!
    "Add cloud account for Gcp Projects for the given features."
    gcpCloudAccountAddProjects(
        "List of cloud account project native Ids."
        cloudAccountsProjectIds: [String!]!,
        "List of Gcp project native Ids to be added for native protection."
        nativeProtectionProjectIds: [String!]!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of Gcp shared VPC host project native Ids."
        sharedVpcHostProjectIds: [String!]!
    ): GcpCloudAccountAddProjectsResponse!
    "Delete cloud account for the given Gcp Project UUIDs and feature."
    gcpCloudAccountDeleteProjects(
        "List of cloud account project native Uuids."
        cloudAccountsProjectUuids: [UUID!]!,
        "List of Gcp project native Uuids to be added for native protection."
        nativeProtectionProjectUuids: [UUID!]!,
        "Optional Session ID of the current OAuth session."
        sessionId: String,
        "List of Gcp shared VPC host project native Uuids."
        sharedVpcHostProjectUuids: [UUID!]!,
        "Flag that denotes if cleanup of GCP resources should be skipped. If this flag is set, then the session ID is ignored."
        skipResourceDeletion: Boolean!
    ): [GcpCloudAccountProjectDeleteStatus!]!
    "Complete the OAuth flow and pass the authorization code."
    gcpCloudAccountOAuthComplete(
        "Authorization code received after the oauth consent flow."
        authorizationCode: String!,
        "Redirect URL used in the oauth flow."
        redirectUrl: String!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): GcpCloudAccountOAuthCompleteResponse!
    "Initiate a session before doing Gcp OAuth flow."
    gcpCloudAccountOAuthInitiate(
        "Customer Url."
        customerUrl: String!
    ): GcpCloudAccountOAuthInitiateResponse!
    "Upgrade cloud account for the given Gcp Project UUIDs and feature."
    gcpCloudAccountUpgradeProjects(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "List of Gcp project UUIDs."
        projectUuids: [UUID!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountProjectUpgradeStatus!]!
    "Triggers GCPNative disable project job for the given project ID"
    gcpNativeDisableProject(
        "UUID of the Project"
        projectId: UUID!,
        "Whether to delete the native snapshots while disabling the project"
        shouldDeleteNativeSnapshots: Boolean!
    ): DisableProjectReply!
    gcpNativeExcludeDisksFromInstanceSnapshot(
        "Mapping from disk ID to excluded flag"
        diskIdToIsExcluded: [DiskIdToIsExcluded!]!,
        "GCP GCE instance ID"
        instanceId: UUID!
    ): String!
    "Trigger GCP native export disk job for the given disk snapshot"
    gcpNativeExportDisk(
        "Encryption type for created disk(s)"
        diskEncryptionType: DiskEncryptionType!,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKey"
        kmsCryptoKey: kmsCryptoKey,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKeyResourceId"
        kmsCryptoKeyResourceId: String,
        "Whether the exported disk should replace source disk from attached instance"
        replaceAttached: Boolean!,
        "The zones where the regional exported disk should be replicated"
        replicaZones: [String!],
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "The labels will be copied to the Rubrik created/manipulated resource from the source resource that were there at the time of taking the snapshot"
        shouldCopyLabels: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!,
        "The disk name of the to-be-created disk."
        targetDiskName: String!,
        "Size of the exported disk in GB"
        targetDiskSizeGb: Int!,
        "The disk type of the to-be-created disk."
        targetDiskType: String!,
        "The region of the to-be-created disk."
        targetRegion: String!,
        "The zone of the to-be-created disk."
        targetZone: String
    ): ExportDiskReply!
    "Trigger GCP native export instance job for the given instance snapshot"
    gcpNativeExportGceInstance(
        "Encryption type for created disk(s)"
        diskEncryptionType: DiskEncryptionType!,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKey"
        kmsCryptoKey: kmsCryptoKey,
        "Customer managed Key to encrypt created disk, applicable when encryption type is CustomerManagedKeyResourceId"
        kmsCryptoKeyResourceId: String,
        "Native ID of the shared VPC host project for the current service project"
        sharedVPCHostProjectNativeID: String,
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "The labels will be copied to the Rubrik created/manipulated resource from the source resource that were there at the time of taking the snapshot"
        shouldCopyLabels: Boolean!,
        "The to-be-created instance will be created in a powered-off state"
        shouldPowerOff: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!,
        "The instance name of the to-be-created instance."
        targetInstanceName: String!,
        "The machine type of the to-be-created instance."
        targetMachineType: String!,
        "The network tags of the to-be-created instance."
        targetNetworkTags: [String!],
        "The subnet name of the to-be-created instance."
        targetSubnetName: String!,
        "The zone of the to-be-created instance."
        targetZone: String!
    ): ExportGCEInstanceReply!
    "Trigger GCP native refresh project job for the given project IDs"
    gcpNativeRefreshProjects(
        "List of Project IDs"
        projectIds: [UUID!]!
    ): RefreshGCPNativeProjectsReply!
    "Triggers GCPNative restore instance job for the given snapshot ID"
    gcpNativeRestoreGceInstance(
        "Whether to allow Rubrik labels on Rubrik created/manipulated resources"
        shouldAddRubrikLabels: Boolean!,
        "Whether to restore labels of the instance from snapshot"
        shouldRestoreLabels: Boolean!,
        "Whether the restored instance should be started"
        shouldStartRestoredInstance: Boolean!,
        "UUID of snapshot"
        snapshotId: UUID!
    ): RestoreGCEInstanceReply!
    "Sets the default service account auth key"
    gcpSetDefaultServiceAccountJwtConfig(
        "The JWT config for a service account in customer project."
        serviceAccountJWTConfig: String!,
        "The name of the service account"
        serviceAccountName: String!
    ): Boolean!
    "Generate CSR"
    generateCSR(
        "City for your CSR"
        city: String,
        "Country for your CSR"
        country: String,
        "Email for your CSR"
        email: String,
        "Hostnames for your CSR"
        hostnames: [String!]!,
        "Name for your CSR"
        name: String!,
        "Organization for your CSR"
        organization: String,
        "Organization unit for your CSR"
        organizationUnit: String,
        "State for your CSR"
        state: String,
        "Surname for your CSR"
        surname: String,
        "User id for your CSR"
        userId: String
    ): Csr!
    "Generate a JWT that can be used to register clusters with Polaris. If ManagedByPolarisArg is not given, the product type is inferred automatically."
    generateClusterRegistrationToken(
        "If true, generate a token for registering a Hybrid cluster. If false, generate a token for registering LifeOfDevice cluster. If it's not passed, the product type is inferred automatically."
        managedByPolaris: Boolean
    ): ClusterRegistrationToken!
    "Generate TOTP secret for a user."
    generateTotpSecret(
        "User ID."
        userId: String!
    ): GenerateTotpSecretReply!
    getDownloadUrl(downloadId: Long!): UserDownloadUrl!
    "Initiates a session before doing Azure OAuth flow. Returns client ID of the default app if the domain name of the tenant is not specified. If a custom app is configured for the tenant, the client ID of the custom app is returned. Otherwise, the client ID of the default app is returned."
    initiateAzureCloudAccountOAuth(
        "Input for initiating authentication of the Azure Cloud Accounts."
        input: InitiateAzureCloudAccountOAuthInput!
    ): InitiateAzureCloudAccountOAuthResponse!
    """

    Initiate a live mount for a given Volume Group snapshot

    Supported in v5.0+
    Create a live mount request for a Volume Group snapshot.
    """
    initiateVolumeGroupMount(
        "Input for InternalCreateVolumeGroupMount"
        input: CreateVolumeGroupMountInput!
    ): AsyncRequestStatus!
    insertCustomerO365App(o365AppClientId: String!, o365AppClientSecret: String!, o365AppType: String!, o365SubscriptionName: String!): RequestStatus!
    "List CIDRs for compute setting."
    listCidrsForComputeSetting(
        "Optional List of Cluster UUIDs."
        clusterIdsArg: [UUID!]
    ): ListCidrsForComputeSetting!
    "Login to Rubrik support portal using username and password"
    loginToRubrikSupportPortal(
        "Support portal hostname"
        hostname: String! = "rubrik.force.com",
        "Support portal organization ID"
        organizationId: String! = "00D40000000N3x2",
        "Support portal password to login"
        password: String!,
        "Support portal username to login"
        username: String!
    ): SupportPortalLoginReply!
    "Logout from Rubrik support portal using username"
    logoutFromRubrikSupportPortal: SupportPortalLogoutReply!
    "Migrate SLAs from the Rubrik clusters."
    migrateSlas(
        "List of Rubrik cluster SLAs."
        slaIds: [UUID!]!
    ): MigrateSlasRes!
    "Mutate LDAP Integration"
    mutateLdapIntegration(
        "BaseDn for your LDAP integration."
        baseDn: String,
        "BindUserName for your LDAP integration."
        bindUserName: String!,
        "BindUserPassword for your LDAP integration."
        bindUserPassword: String!,
        "Dynamic DNS name for your LDAP integration."
        dynamicDnsName: String,
        "Group member attribute for your LDAP integration."
        groupMemberAttr: String,
        "Group membership attribute for your LDAP integration."
        groupMembershipAttr: String,
        "Group search filter for your LDAP integration."
        groupSearchFilter: String,
        "ID for your LDAP integration."
        id: UUID,
        "LdapServers for your LDAP integration."
        ldapServers: [LdapServerInput!],
        "Name for your LDAP integration."
        name: String!,
        "TrustedCerts for your LDAP integration."
        trustedCerts: String,
        "User name attribute for your LDAP integration."
        userNameAttr: String,
        "User search filter for your LDAP integration."
        userSearchFilter: String
    ): String!
    mutateRole(description: String!, name: String!, permissions: [PermissionInput!]!, protectableClusters: [String!]!, roleId: String): UUID!
    o365OAuthConsentComplete(code: String!, o365ResourceNaturalID: String!, redirectUrl: String!, stateToken: String!, tenantId: String!): O365OAuthConsentCompleteResp!
    o365OAuthConsentKickoff(o365AppType: String!, orgId: UUID!): O365OAuthConsentKickoffResp!
    o365SaaSSetupComplete(o365AppTypes: [String!]!, regionName: String!, stateToken: String!, tenantId: String!): AddO365OrgResponse!
    o365SaaSSetupKickoff: O365SaaSSetupKickoffResp!
    o365SetupKickoff: O365SetupKickoffResp!
    "Open a support tunnel in cluster"
    openSupportTunnel(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Close existing tunnel if any, before attempting to open the tunnel"
        force: Boolean! = false,
        "Activity timeout of support tunnel"
        timeout: Int! = 0
    ): OpenSupportTunnelReply!
    "Pause/Resume Global SLA on the given clusters."
    pauseSla(
        "Pause SLA request."
        input: PauseSlaRequest!
    ): SlaResult!
    pauseTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetPauseResult!
    "Prepare deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account."
    prepareAwsCloudAccountDeletion(
        "Args for initiate aws cloud accounts for deletion."
        input: PrepareAwsCloudAccountDeletionInput!
    ): PrepareAwsCloudAccountDeletionReply!
    "Prepare manual update features to latest version."
    prepareFeatureUpdateForAwsCloudAccount(
        "Input to prepare feature update for AWS cloud account."
        input: PrepareFeatureUpdateForAwsCloudAccountInput!
    ): PrepareFeatureUpdateForAwsCloudAccountReply!
    "Recover a cassandra source."
    recoverCassandraSource(
        "Input for V2MosaicRestoreData"
        input: MosaicRestoreDataInput!
    ): MosaicAsyncResponse!
    refreshGlobalManagerConnectivityStatus(
        "The id of the cluster"
        clusterUuid: UUID!
    ): GlobalManagerConnectivity!
    refreshHost(
        "ID assigned to a host object."
        id: String!
    ): HostDetail!
    "Refresh resources of a Kubernetes cluster."
    refreshK8sCluster(
        "Request for refreshing resources in a K8s cluster."
        k8sClusterRefreshRequest: K8sClusterRefreshInput!
    ): CreateOnDemandJobReply!
    refreshO365Org(orgId: UUID!): CreateOnDemandJobReply!
    refreshSapHanaSystem(
        "The ID of the SAP HANA system."
        id: String!
    ): AsyncRequestStatus!
    """

    Register a NAS System

    Supported in v7.0
    Register a NAS system such as a NetApp or an Isilon cluster to be protected.
    """
    registerNasSystem(
        "Input for V1RegisterNasSystem"
        input: RegisterNasSystemInput!
    ): NasSystemSummary!
    removeCdmCluster(
        "Cluster UUID of cdm cluster"
        clusterUUID: String!,
        "Number of days after which data from polaris is removed"
        expireInDays: Long,
        isForce: Boolean!
    ): Boolean!
    "Remove LDAP Integration"
    removeLdapIntegration(
        "ID for your LDAP integration."
        id: UUID!
    ): Boolean!
    "Remove policies from objects."
    removePolicyObjects(objectIds: [String!]!, policyIds: [String!]!, runAsync: Boolean!): [String!]!
    "Restore Kubernetes Namespace Snapshot."
    restoreK8sNamespace(
        "Request to restore K8s Namespace Snapshot."
        k8sNamespaceRestoreRequest: K8sNamespaceRestore!
    ): CreateOnDemandJobReply!
    "Create a request to restore a Microsoft SQL database."
    restoreMssqlDatabase(
        "Input for V1CreateRestoreMssqlDb"
        input: CreateRestoreMssqlDbInput!
    ): AsyncRequestStatus!
    restoreO365Mailbox(restoreConfig: RestoreO365MailboxInput!): CreateOnDemandJobReply!
    restoreO365Snappable(
        "Restore task type i.e Recover/Export."
        actionType: O365RestoreActionType!,
        destSnappableUUID: UUID!,
        snappableRestoreConfig: SnappableRestoreConfig!,
        snappableType: SnappableTypeEnum!,
        sourceSnappableUUID: UUID!
    ): CreateOnDemandJobReply!
    restoreO365TeamsConversations(
        channelInfoForFullRestore: O365TeamConvChannelInput,
        destTeamsChannelInfo: TeamsChannelInfo,
        o365AppID: String!,
        refreshTokenEncrypted: String!,
        shouldCreateDestChannel: Boolean!,
        shouldRestoreFileAttachments: Boolean!,
        "List of channel objects (naturalId and name)."
        teamConvChannels: [O365TeamConvChannelInput!]!,
        teamUUID: UUID!,
        teamsConversationsSearchFilter: TeamsConversationsSearchFilter
    ): CreateOnDemandJobReply!
    restoreO365TeamsFiles(
        "Restore task type i.e Recover/Export."
        actionType: O365RestoreActionType!,
        destTeamsChannelInfo: TeamsChannelInfo,
        filesToRestore: [FileInfo!]!,
        foldersToRestore: [FolderInfo!]!,
        shouldCreateDestChannel: Boolean!
    ): CreateOnDemandJobReply!
    """

    Restore files from the Volume Group snapshot

    Supported in v5.0+
    Restore filess to the original Host.
    """
    restoreVolumeGroupSnapshotFiles(
        "Input for InternalRestoreVolumeGroupSnapshotFiles"
        input: RestoreVolumeGroupSnapshotFilesInput!
    ): AsyncRequestStatus!
    resumeTarget(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): TargetResumeResult!
    "Resumes previously failed upgrade"
    resumeUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}"
    ): StartUpgradeReply!
    "Initiates a retry of a failed job."
    retryBackup(backupObjects: [BackupObject!]!, backupRunConfig: BackupRunConfig): RetryBackupResp!
    "Retry the previous failed download package CDM job"
    retryDownloadPackageJob(
        "Cluster uuid"
        clusterUuid: UUID!
    ): DownloadPackageReply!
    "Rolls back the cluster to starting version of previously failed upgrade"
    rollbackUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}"
    ): StartUpgradeReply!
    rotateServiceAccountSecret(
        "ID of the service account"
        id: String!
    ): RotateServiceAccountSecretReply!
    runCustomAnalyzer(runCustomAnalyzerRequest: RunCustomAnalyzerInput!): RunCustomAnalyzerReply!
    saveEventDigest(eventDigestConfig: EventDigestConfig!, frequency: Int, includeAudits: Boolean, includeEvents: Boolean, isImmediate: Boolean, name: String, recipientUserIDs: [String!]!): [EventDigest!]!
    "Schedule an upgrade job in batch"
    scheduleUpgradeBatchJob(
        "Upgrade action"
        action: ActionEnum!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Upgrade mode"
        mode: String!,
        "ISO8601 Timestamp string"
        scheduleAt: DateTime!,
        "CDM upgrade tarball version"
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    "Schedule an upgrade job"
    scheduleUpgradeJob(
        "Upgrade action"
        action: ActionEnum!,
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "ISO8601 Timestamp string"
        scheduleAt: DateTime!,
        "CDM upgrade tarball version"
        version: String!
    ): UpgradeJobReply!
    "Seed account with enabled policies."
    seedEnabledPolicies: SeedEnabledPoliciesReply!
    "DEPRECATED (use seedEnabledPolicies instead) Seed account with initial policies."
    seedInitialPolicies: SeedInitialPoliciesReply!
    sendEmailNow(recipients: [String!]!, reportConfig: ReportConfigInput, reportID: Int!): reportGenerateReply!
    sendScheduledReport(id: Int!, recipients: [String!]!): Boolean!
    sendScheduledReportAsync(id: Int!, recipients: [String!]!): AsyncDownloadReply!
    sendTestSMTPEmail(
        "Email to use as from for your SMTP configuration"
        defaultFromEmail: String,
        "Host name for your SMTP configuration"
        hostName: String,
        "Password for your SMTP configuration"
        password: String,
        "Port number for your SMTP configuration"
        port: Int,
        "Recipient for test email"
        recipient: String!,
        "Security type to use "
        securityType: SMTPSecurityTypeEnum,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String,
        "Whether to use existing config or passed in config"
        useExisting: Boolean!,
        "User name for your SMTP configuration"
        userName: String
    ): Boolean!
    sendTestSyslog(
        "Syslog config to use"
        config: SyslogConfigInputType
    ): Boolean!
    "Set credentials for the customer application, for the tenant domain name."
    setAzureCloudAccountCustomerAppCredentials(
        "Input for setting the app credentials in the Azure Cloud Accounts."
        input: SetAzureCloudAccountCustomerAppCredentialsInput!
    ): Boolean!
    "Set federated login status."
    setFederatedLoginStatus(
        "Federated login status configuration."
        federatedLoginStatusArg: FederatedLoginStatusInput!
    ): Boolean!
    setIdentityProvider(
        "Entity id of your IdP"
        entityId: String!,
        "Sign-in URL id of your IdP"
        signInUrl: String!,
        "Signing certificate of your IdP"
        signingCertificate: String!
    ): IdentityProvider!
    setIpWhitelistEnabled(enabled: Boolean!): Boolean!
    "Update the MFA settings for the given LDAP integration. Return true when the operation succeeds."
    setLdapMfaSetting(
        "Input required for updating LDAP MFA settings."
        input: SetLdapMfaSettingInput!
    ): Boolean!
    "Update the MFA settings for the account. Return true when the operation succeeds."
    setMfaSetting(
        "Input required for updating MFA settings."
        input: SetMfaSettingInput!
    ): Boolean!
    setO365ServiceAccount(appPassword: String!, orgId: UUID!, username: String!): RequestStatus!
    setSMTPConfiguration(
        "Email to use as from for your SMTP configuration"
        defaultFromEmail: String!,
        "Host name for your SMTP configuration"
        hostName: String!,
        "Password for your SMTP configuration"
        password: String!,
        "Port number for your SMTP configuration"
        port: Int!,
        "Security type to use "
        securityType: SMTPSecurityTypeEnum!,
        "Trusted certificate to use for your SMTP configuration"
        trustedCerts: String!,
        "User name for your SMTP configuration"
        userName: String!
    ): Boolean!
    "Enable/disable alerts for given snappable on given cluster"
    setSnappableAlertSetting(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Enable or disable lambda service."
        enabled: Boolean!,
        "the fid of the snappable"
        snappableId: UUID!
    ): SetSnappableAlertSettingReply!
    "Setup TOTP configuration for a user. Return true when the operation succeeds."
    setTotpConfig(
        "Input required for setting up TOTP configuration."
        input: SetTotpConfigInput!
    ): Boolean!
    "Update the user-level TOTP enforcement for given users. Return true when the operation succeeds."
    setUserLevelTotpEnforcement(
        "Input required for updating user-level TOTP enforcement."
        input: SetUserLevelTotpEnforcementInput!
    ): Boolean!
    "Set user specific setting."
    setUserSetting(
        "User setting to add for specific user"
        userSetting: UserSettingInputType
    ): UserSetting!
    "Set WWW TLS certificate."
    setWwwTlsCert(
        "SetWwwTlsCert Input."
        input: SetWwwTlsCertInputType!
    ): Boolean!
    setupAzureO365Exocompute(exocomputeConfig: AzureO365ExocomputeConfig!, subscriptionId: UUID!, tenantId: String!): SetupAzureO365ExocomputeResp!
    "Snapshot Kubernetes Namespace."
    snapshotK8sNamespace(
        "Request for snapshot of K8s Namespace."
        k8sNamespaceSnapshotRequest: K8sNamespaceSnapshot!
    ): CreateOnDemandJobReply!
    "Starts a job to disable AWS Exocompute feature. When complete, the job will disable exocompute feature for the specified AWS Native account. "
    startAwsExocomputeDisableJob(
        "Input required to start the job to disable AWS Exocompute."
        input: StartAwsExocomputeDisableJobInput!
    ): AsyncJobStatus!
    "Starts a job to disable a specific AWS Native account. When complete, the job will disable protection for the specified AWS Native account. "
    startAwsNativeAccountDisableJob(
        "Input for AWS native account disable job."
        input: StartAwsNativeAccountDisableJobInput!
    ): AsyncJobStatus!
    "Start an on demand create snapshot job for AWS EC2 Instances.When completed, this will start taking an on-demand snapshot of the selected EC2 Instances  as per the SLA Policy assigned to the respective instances."
    startAwsNativeEc2InstanceSnapshotsJob(
        "Input for create AWS EC2 Instance snapshots job."
        input: StartAwsNativeEc2InstanceSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start job to create snapshots of RDS Instance with given IDs. When completed, this will start taking an on-demand snapshot of the selected RDS Instances  as per the SLA Policy assigned to the respective instances."
    startAwsNativeRdsInstanceSnapshotsJob(
        "Input to trigger job to create AWS RDS Instance snapshots."
        input: StartAwsNativeRdsInstanceSnapshotsInput!
    ): BatchAsyncJobStatus!
    startBlueprintFailover(failoverJobConfig: BlueprintFailoverJobConfig!): CreateOnDemandJobReply!
    "Start failover jobs for multiple blueprints."
    startBlueprintsFailover(failoverJobConfigs: [BlueprintFailoverJobConfig!]!): [CreateOnDemandJobReply!]!
    "Create index of cloudnative snapshots"
    startCloudNativeSnapshotsIndexJob(
        "Input for create snapshots index job."
        input: StartCloudNativeSnapshotsIndexJobInput!
    ): BatchAsyncJobStatus!
    "Start a crawl"
    startCrawl(analyzerGroups: [AnalyzerGroupInput!]!, extWhiteList: [String!], name: String!, resources: [ResourceInput!]!): StartCrawlReply!
    "Start job to create snapshots of EBS Volumes with given IDs. When completed, this will start taking an on-demand snapshot of the selected EBS Volumes  as per the SLA Policy assigned to the respective volumes."
    startCreateAwsNativeEbsVolumeSnapshotsJob(
        "Input for create AWS EBS volume create snapshots job."
        input: StartAwsNativeEbsVolumeSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to create snapshots of the Azure Native Managed Disks identified by the given IDs. When started, this will start taking an on-demand snapshot of the selected disks as per the SLA Policy assigned to the respective disks."
    startCreateAzureNativeManagedDiskSnapshotsJob(
        "Input for the job to create Azure Native Managed Disk Snapshots."
        input: StartCreateAzureNativeManagedDiskSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to create a snapshot for the Azure Native virtual machine identified by the IDs. When started, this will start taking an on-demand snapshot of the selected VMs as per the SLA Policy assigned to the respective VMs."
    startCreateAzureNativeVirtualMachineSnapshotsJob(
        "Input for the job to create Azure Native Virtual Machine snapshots."
        input: StartCreateAzureNativeVirtualMachineSnapshotsJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to disable protection for a specified Azure subscription."
    startDisableAzureNativeSubscriptionProtectionJob(
        "Input for the job to start disabling protection from the Azure Native Subscription."
        input: StartDisableAzureNativeSubscriptionProtectionJobInput!
    ): AsyncJobStatus!
    "Starts CDM job to download installer package in batch"
    startDownloadPackageBatchJob(
        "CDM download package version"
        downloadVersion: String,
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "MD5CheckSum of CDM installer package"
        md5checksum: String!,
        "CDM upgrade package URL"
        packageUrl: String!,
        "Size, in bytes of CDM package"
        size: Long
    ): [DownloadPackageReplyWithUuid!]!
    "Starts CDM job to download installer package"
    startDownloadPackageJob(
        "Cluster uuid"
        clusterUuid: UUID!,
        "CDM download package version"
        downloadVersion: String,
        "MD5CheckSum of CDM installer package"
        md5checksum: String!,
        "CDM upgrade package URL"
        packageUrl: String!,
        "Size, in bytes of CDM package"
        size: Long
    ): DownloadPackageReply!
    "Starts a job to export an EC2 Instance snapshot. The job creates a new EC2 Instance with the same properties as that of the snapshot that is exported."
    startEc2InstanceSnapshotExportJob(
        "Input to trigger export AWS native EC2 Instance snapshot job."
        input: StartAwsNativeEc2InstanceSnapshotExportJobInput!
    ): AsyncJobStatus!
    "Start a job to export EBS Volume. The job creates a new EBS Volume with the same properties as that of the snapshot that is exported."
    startExportAwsNativeEbsVolumeSnapshotJob(
        "Input to trigger export AWS native EBS volume snapshot job."
        input: StartAwsNativeEbsVolumeSnapshotExportJobInput!
    ): AsyncJobStatus!
    "Start a job to export the specified Azure Native Managed Disks to the desired destination. "
    startExportAzureNativeManagedDiskJob(
        "Input for the job to export the specified Azure Native Managed Disks to the specified destination."
        input: StartExportAzureNativeManagedDiskJobInput!
    ): AsyncJobStatus!
    "Start a job to export the Azure native virtual machine for a specified snapshot to a specified destination."
    startExportAzureNativeVirtualMachineJob(
        "Input for the job to export the specified Azure Native Virtual Machine to the specified destination."
        input: StartExportAzureNativeVirtualMachineJobInput!
    ): AsyncJobStatus!
    "Start a job to export Azure SQL Database. The job creates a new Azure SQL Database with the same properties as that of the instance that is exported."
    startExportAzureSqlDatabaseDbJob(
        "Input for the job to export the specified Azure SQL Database."
        input: StartExportAzureSqlDatabaseDbJobInput!
    ): AsyncJobStatus!
    "Start a job to export Azure SQL Managed Instance database. The job creates a new Azure SQL Managed Instance database with the same properties as that of the instance that is exported."
    startExportAzureSqlManagedInstanceDbJob(
        "Input for the job to export the specified Azure SQL Managed Instance database."
        input: StartExportAzureSqlManagedInstanceDbJobInput!
    ): AsyncJobStatus!
    "Start a job to export RDS Instance. The job creates a new RDS Instance with the same properties as that of the instance that is exported."
    startExportRdsInstanceJob(
        "Input to trigger export AWS native RDS Instance job."
        input: StartExportRdsInstanceJobInput!
    ): AsyncJobStatus!
    """

    Detect malware

    Supported in v7.0
    Initiate an asynchronous malware detection.
    """
    startMalwareDetection(
        "Input for InternalRunDetectMalware"
        input: RunDetectMalwareInput!
    ): AsyncRequestStatus!
    "Starts an on demand periodic upgrade prechecks job in CDM cluster"
    startPeriodicUpgradePrechecksOnDemandJob(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksJobReply!
    "Start an on demand job to refresh AWS accounts. The job updates the Rubrik platform with changes to the AWS Native accounts."
    startRefreshAwsNativeAccountsJob(
        "Input for refresh AWS native accounts job."
        input: StartAwsNativeAccountsRefreshJobInput!
    ): BatchAsyncJobStatus!
    "Start a job to refresh Azure Native subscription for the given subscription IDs. When started, this job will update the Rubrik platform with any changes that have been done on Azure for the respective subscription."
    startRefreshAzureNativeSubscriptionsJob(
        "Input for the job to refresh Azure Native subscriptions."
        input: StartRefreshAzureNativeSubscriptionsJobInput!
    ): BatchAsyncJobStatus!
    "Start an on demand restore snapshot job for AWS EC2 Instance. When completed, this will replace the original EC2 Instance with the selected snapshot."
    startRestoreAwsNativeEc2InstanceSnapshotJob(
        "Input for restore AWS EC2 Instance snapshot job."
        input: StartRestoreAwsNativeEc2InstanceSnapshotJobInput!
    ): AsyncJobStatus!
    "Start a job to restore Azure Native virtual machine with the selected snapshot. When started, this will replace the original VM with the selected snapshot."
    startRestoreAzureNativeVirtualMachineJob(
        "Input for the job to restore Azure Native Virtual Machine."
        input: StartRestoreAzureNativeVirtualMachineJobInput!
    ): AsyncJobStatus!
    "Starts the upgrade with given tarball path"
    startUpgrade(
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): StartUpgradeReply!
    "Starts cdm upgrades instantly, monitors the upgrade until terminal state is reached"
    startUpgradeBatchJob(
        "Upgrade action"
        action: ActionEnum!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): [UpgradeJobReplyWithUuid!]!
    "Starts cdm upgrade instantly, monitors the upgrade until terminal state is reached"
    startUpgradeJob(
        "Upgrade action"
        action: ActionEnum!,
        "Cluster uuid"
        clusterUuid: UUID!,
        "Context Tag"
        context_tag: String = "{\"client\": \"polaris\"}",
        "Upgrade mode"
        mode: String!,
        "CDM upgrade tarball version"
        version: String!
    ): UpgradeJobReply!
    "Issue request to stop a job instance. If successful, stop process for job instance is initiated. Job instance is stopped asynchronously in the background."
    stopJobInstance(
        "Args to stop a job instance."
        input: StopJobInstanceInput!
    ): StopJobInstanceReply!
    "Take an on-demand log backup for a Microsoft SQL database."
    takeMssqlLogBackup(
        "Input for V1CreateOnDemandMssqlLogBackup"
        input: CreateOnDemandMssqlLogBackupInput!
    ): AsyncRequestStatus!
    "Triggers on-demand snapshot for the given Snappables."
    takeOnDemandSnapshot(
        "The SLA ID."
        slaId: String!,
        "List of Snappable IDs"
        snappableIds: [UUID!]!
    ): TakeOnDemandSnapshotReply!
    toggleClassificationBannerSettings: Boolean!
    toggleClassificationLoginSettings: Boolean!
    toggleFeatureEnabled(enableFeature: Boolean!, featureName: FeatureNameEnum!): Boolean!
    toggleVMwareManagementEnabled(enableVmwareManagement: Boolean!): Boolean!
    "Trigger detect ransomware job for given snapshot"
    triggerRansomwareDetection(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to previous snapshot ID of the target snapshot"
        previousSnapshotId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): TriggerRansomwareDetectionReply!
    updateAccountOwner(
        "User ID."
        userId: String!
    ): Boolean!
    "This endpoint is deprecated."
    updateAccountSettings(
        "Flag to represent if email notification is enabled"
        isEmailNotificationEnabled: Boolean,
        "Flag to represent if the EULA has been accepted"
        isEulaAccepted: Boolean
    ): AccountSetting!
    updateAppBlueprint(
        children: [AppBlueprintChildInput!]!,
        "The Polaris UUID for the object."
        fid: UUID!,
        name: String!,
        primaryClusterUuid: UUID!
    ): Blueprint!
    "Updates regions, stack ARN, and role ARN for a feature for a given cloud account."
    updateAwsCloudAccount(
        "Arguments to save cloud account's role ARN, stack ARN and regions."
        input: UpdateAwsCloudAccountInput!
    ): UpdateAwsCloudAccountReply!
    updateAwsComputeSetting(
        "Request arguments for updating a Aws Compute Setting"
        awsComputeSettingsUpdateRequest: AwsComputeSettingsEditRequest!
    ): AwsComputeSettings!
    "Update names of the Azure Subscriptions cloud account and regions for the given feature."
    updateAzureCloudAccount(
        "Input for updating an Azure Cloud Account."
        input: UpdateAzureCloudAccountInput!
    ): UpdateAzureCloudAccountResponse!
    updateBlueprint(
        children: [AppBlueprintChildInput!]!,
        "Flag to mark if hydration is enabled for the blueprint."
        enableHydration: Boolean,
        "The Polaris UUID for the object."
        fid: UUID!,
        name: String!,
        "The id of the source location."
        sourceLocationId: String!,
        "The type of the source location."
        sourceLocationType: BlueprintLocationTypeEnum! = CDM,
        "The status of the blueprint."
        status: BlueprintStatusEnum! = Uncompleted,
        "The id of the intended remote target location."
        targetLocationId: String,
        "The type of the intended remote target location."
        targetLocationType: BlueprintLocationTypeEnum = CDM,
        "The version of the blueprint."
        version: Int!
    ): BlueprintNew!
    "Update a cassandra source."
    updateCassandraSource(
        "UUID used to identify the cluster the request goes to"
        clusterUuid: String!,
        "Source Object with details of source to be modified."
        sourceData: SourceInput!
    ): MosaicAsyncResponse!
    updateClassificationBannerSettings(
        "The classification banner settings to add or change for account."
        classificationBannerSettingsArg: ClassificationBannerSettingsInputType!
    ): Boolean!
    updateClassificationLoginSettings(
        "The classification login settings to add or change for account."
        classificationLoginSettingsArg: ClassificationLoginSettingsInputType!
    ): Boolean!
    updateCloudNativeAwsStorageSetting(input: UpdateCloudNativeAwsStorageSettingInput!): UpdateCloudNativeAwsStorageSettingReply!
    updateCloudNativeAzureStorageSetting(input: UpdateCloudNativeAzureStorageSettingInput!): UpdateCloudNativeAzureStorageSettingReply!
    "Update indexing status for cloudnative snappables"
    updateCloudNativeIndexingStatus(
        "Is indexing enabled or disabled for snappables"
        isIndexingEnabled: Boolean!,
        "List of snappable IDs"
        snappableIds: [UUID!]!
    ): UpdateCloudNativeIndexingStatusReply!
    "Update cloud native label rule"
    updateCloudNativeLabelRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables."
        globalSlaOptionalFid: UUID,
        "UUID for the tag or label rule"
        ruleId: UUID!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA."
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): String!
    "Update cloud native tag rule"
    updateCloudNativeTagRule(
        "cloud native accounts on which tag rule will be applied"
        cloudNativeAccountIds: CloudNativeIDs,
        "Corresponds to optional global SLA forever UUID in Polaris tables."
        globalSlaOptionalFid: UUID,
        "UUID for the tag or label rule"
        ruleId: UUID!,
        "Name for the rule"
        ruleName: String!,
        "Corresponds to the assignment type for the SLA."
        ruleSlaAssignType: TagRuleSlaAssignTypeEnum!
    ): String!
    "Update a custom analyzer"
    updateCustomAnalyzer(analyzer: AnalyzerInput!): Analyzer!
    "Mutation to update an existing Db2 instance."
    updateDb2Instance(
        "An object that contains the changed input to update the properties of the Db2 instance."
        input: UpdateDb2InstanceInput!
    ): UpdateDb2InstanceReply!
    "Update Eula Acceptance details"
    updateEulaAccepted: Boolean!
    updateFailoverCluster(
        "ID of failover cluster."
        id: String!,
        "Properties to update."
        updateProperties: FailoverClusterConfigInput!
    ): FailoverClusterDetail!
    "Update the failover cluster app with specified properties."
    updateFailoverClusterApp(
        "ID of failover cluster app."
        id: String!,
        "Properties to update."
        updateProperties: FailoverClusterAppConfigInput!
    ): FailoverClusterAppSummary!
    updateHostCertificate(
        "ID of the host."
        id: String!
    ): HostDetail!
    updateIpWhitelist(ipCidrs: [String!]!, whitelistMode: WhitelistModeEnum!): Boolean!
    updateLambdaSettings(
        "Probability threshold for anomaly detector"
        anomalyThreshold: Float,
        "Flag to represent if alert on anomaly snappable is enabled"
        isAnomalyAlertEnabled: Boolean,
        "Probability threshold for ransomware detector"
        ransomwareThreshold: Float
    ): LambdaSettings!
    "Update ldap config"
    updateLdapConfig(adDomain: String!, clusterUuid: String!, ldapId: Long!, ldapName: String!, password: String!, userName: String!): UpdateLdapConfigReply!
    """

    Modify a store

    Supported in m3.2
    """
    updateMosaicStore(
        "Input for V2ModifyMosaicStore"
        input: ModifyMosaicStoreInput!
    ): MosaicAsyncResponse!
    "Update log shipping configuration of a Microsoft SQL Database."
    updateMssqlLogShippingConfiguration(
        "Input for V2UpdateLogShippingConfigurationV2"
        input: UpdateLogShippingConfigurationV2Input!
    ): MssqlLogShippingDetailV2!
    """

    Modify the information for a registered NAS system

    Supported in v7.0
    Change the hostname that is associated with a NAS system. Update the credentials used to access the vendor-specific APIs.
    """
    updateNasSystem(
        "Input for V1UpdateNasSystem"
        input: UpdateNasSystemInput!
    ): NasSystemSummary!
    updateNetworkThrottle(
        "Input for InternalUpdateNetworkThrottle"
        input: UpdateNetworkThrottleInput!
    ): NetworkThrottleSummary!
    "Update a classification policy"
    updatePolicy(policy: ClassificationPolicyInput!): ClassificationPolicyDetail!
    "Update previewer cluster config"
    updatePreviewerClusterConfig(previewerClusterConfig: PreviewerClusterConfigInput!): Cluster!
    updateReport(reportConfig: ReportConfigInput!, reportID: Int!): Boolean!
    updateRole(description: String!, name: String!, permissions: [PermissionInput!]!, roleId: String!): Boolean!
    updateRoleAssignments(adGroupIds: [String!], roleIds: [String!]!, userIds: [String!]): Boolean!
    updateServiceAccount(
        "Description of the service account"
        description: String,
        "ID of the service account"
        id: String!
    ): Client!
    "API to open or close a support tunnel. nodeId must be the id of the current node, isTunnelEnabled is to open or close the tunnel, and inactivityTimeoutInSeconds is to set the timeout (if not provided, defaults to 4 days)"
    updateSupportTunnel(
        "The id of the cluster"
        clusterUuid: UUID!,
        inactivityTimeoutInSeconds: Long,
        isTunnelEnabled: Boolean!,
        nodeId: String!
    ): SupportTunnelInfoResp!
    """

    Update Volume Group properties

    Supported in v5.3+
    Patch Volume Group with specified properties.
    """
    updateVolumeGroup(
        "Input for V1PatchVolumeGroup"
        input: PatchVolumeGroupInput!
    ): VolumeGroupDetail!
    "Update whitelisted analyzers for a path"
    updateWhitelistedAnalyzers(analyzerIds: [String!]!, runAsync: Boolean!, snappableFid: String!, snapshotFid: String!, stdPath: String!): String!
    "Set IAM user-based AWS account features status to Connected from Missing Permissions state. It should be used by caution from cloud accounts only after latest required permissions are granted to authorized IAM user."
    upgradeAwsIamUserBasedCloudAccountPermissions(
        "Input to set status of IAM user-based AWS cloud account to connected from missing permissions state."
        input: UpgradeAwsIamUserBasedCloudAccountPermissionsInput!
    ): Boolean!
    "Update permissions of the Azure Subscriptions cloud account for given feature."
    upgradeAzureCloudAccount(
        "Input for upgrading an Azure Cloud Account."
        input: UpgradeAzureCloudAccountInput!
    ): UpgradeAzureCloudAccountResponse!
    "Set Azure Cloud Account feature status to Connected from Missing Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding missing permissions that are required."
    upgradeAzureCloudAccountPermissionsWithoutOauth(
        "Input to set status of azure cloud account to connected from missing permissions state without OAuth."
        input: UpgradeAzureCloudAccountPermissionsWithoutOauthInput!
    ): UpgradeAzureCloudAccountPermissionsWithoutOauthReply!
    "Set GCP Cloud Account feature status to Connected from Missing Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding missing permissions that are required."
    upgradeGcpCloudAccountPermissionsWithoutOauth(
        "Input to set status of GCP cloud account to connected from missing permissions state without OAuth."
        input: UpgradeGcpCloudAccountPermissionsWithoutOauthInput!
    ): UpgradeGcpCloudAccountPermissionsWithoutOauthReply!
    "Create (or update if already exists) the account settings value."
    upsertAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!,
        "Value of ASP in account setting table"
        aspValue: String!
    ): ASPValue!
    "Create a mass export for a group of VMs."
    vSphereVMBatchExport(
        "Input for V2BatchExport"
        input: BatchExportInput!
    ): BatchAsyncRequestStatus!
    vSphereVMBatchLiveMount(
        clusterUuid: UUID!,
        "Configuration object containing an array of virtual machine IDs, a way to indicate the snapshot to be chosen and mount configs."
        config: BatchMountSnapshotJobConfigInput!
    ): BatchAsyncRequestStatus!
    "Create a vSphere Export from a snapshot or a point-in-time"
    vSphereVMExportSnapshotV2(
        "Configuration for the Export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available."
        config: ExportSnapshotJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    "Initiate a mass instant recovery for a group of VMs."
    vSphereVMInitiateBatchInstantRecovery(
        "Input for V2BatchInstantRecover"
        input: BatchInstantRecoverInput!
    ): BatchAsyncRequestStatus!
    "Initiate a mass live mount for a group of VMs."
    vSphereVMInitiateBatchLiveMountV2(
        "Input for V2BatchMountSnapshotV2"
        input: BatchMountSnapshotV2Input!
    ): BatchAsyncRequestStatus!
    "Instantly recover a vSphere virtual machine from a snapshot or point-in-time"
    vSphereVMInitiateInstantRecoveryV2(
        "Configuration for the Instant Recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an instant recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an instant recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT instant recovery that uses the most recent time or snapshot available."
        config: InstantRecoveryJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    "Create a vSphere Live Mount from a snapshot or point-in-time"
    vSphereVMInitiateLiveMountV2(
        "Configuration for the Live Mount request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers a live mount using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers a live mount using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT live mount that uses the most recent time or snapshot available."
        config: MountSnapshotJobConfigV2Input!,
        "ID of a VM."
        id: String!
    ): AsyncRequestStatus!
    """

    Trigger in-place recovery jobs for a set of virtual machines

    Supported in v6.0+
    Trigger in-place recovery jobs for a set of virtual machines.
    """
    vSphereVmBatchInPlaceRecovery(
        "Input for V2BatchInPlaceRecover"
        input: BatchInPlaceRecoverInput!
    ): BatchAsyncRequestStatus!
    "Trigger an in-place recovery from a snapshot or point-in-time."
    vSphereVmInitiateInPlaceRecovery(
        "Input for V2CreateInPlaceRecoveryV2"
        input: CreateInPlaceRecoveryV2Input!
    ): AsyncRequestStatus!
    """

    Register Rubrik Backup Service

    Supported in v5.0+
    Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
    """
    vSphereVmRegisterAgent(
        "Input for V1VmRegisterAgent"
        input: VmRegisterAgentInput!
    ): RequestSuccess!
    "Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the \"message\" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection."
    validateAndCreateAwsCloudAccount(
        "Input to validate AWS cloud account arguments."
        input: ValidateAndCreateAwsCloudAccountInput!
    ): ValidateAndCreateAwsCloudAccountReply!
    "Validate the resource mapping, RBA status, cluster version of the given blueprint."
    validateBlueprint(
        "Blueprint validation config."
        input: ValidateBlueprintInput!
    ): ValidateBlueprintReply!
    "validate the recovery specs with the given app blueprint snappable or snapshot fid"
    validateBlueprintRecoverySpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "Flag to represent if it should validate snapshot recovery spec"
        validateSnapshotRecoverySpec: Boolean
    ): RecoverySpecValidityCheckReply!
    "Validate the resource mapping, RBA status, cluster version of all the given blueprints."
    validateBlueprints(
        "Multiple blueprint validation config."
        input: ValidateBlueprintsInput!
    ): ValidateBlueprintsReply!
    vpshereVMRecoveryPointMount(createDatastoreOnly: Boolean, datastoreName: String, disableNetwork: Boolean, hostID: String, keepMacAddresses: Boolean, powerOn: Boolean, recoveryPoint: String, removeNetworkDevices: Boolean, shouldRecoverTags: Boolean, snappableFid: UUID!, snapshotFid: UUID, unregsiterVm: Boolean, vlan: Int, vmName: String): vSphereAsyncRequestStatus!
    "Trigger a bulk on demand snapshot."
    vsphereBulkOnDemandSnapshot(
        "Input for V1BulkCreateOnDemandBackup"
        input: BulkCreateOnDemandBackupInput!
    ): BatchAsyncRequestStatus!
    vsphereCreateVCenter(caCert: String, clusterUuid: UUID!, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!): vSphereAsyncRequestStatus!
    vsphereDeleteVCenter(vcenterId: UUID!): vSphereAsyncRequestStatus!
    vsphereEditVCenter(caCert: String, conflictResolutionAuthz: ConflictResolutionAuthzEnum!, hostname: String!, password: String!, username: String!, vcenterId: UUID!): RequestSuccess!
    vsphereExcludeVMDisks(virtualDiskUpdate: [VmDiskUpdateInput!]!): RequestSuccess!
    vsphereExportSnapshotToStandaloneHost(
        datastoreName: String!,
        disableNetwork: Boolean,
        hostIpAddress: String!,
        hostPassword: String!,
        hostUsername: String!,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereOnDemandSnapshot(
        "The SLA id of the snappable"
        slaID: String,
        snappableFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereRefreshVCenter(vcenterId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMDeleteLiveMount(force: Boolean, livemountId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMDeleteSnapshot(
        location: String!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): RequestSuccess!
    vsphereVMDownloadSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereVMDownloadSnapshotFiles(
        deltaTypeFilter: [DeltaTypeEnum!],
        nextSnapshotFid: UUID,
        "paths of files"
        paths: [String!]!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): AsyncRequestStatus!
    vsphereVMExportSnapshot(
        datastoreId: UUID!,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        unregsiterVm: Boolean,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateDiskMount(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        targetVmID: String,
        vlan: Int,
        vmdkIDs: [String!]!
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateInstantRecovery(
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        preserveMOID: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): vSphereAsyncRequestStatus!
    vsphereVMInitiateLiveMount(
        createDatastoreOnly: Boolean,
        datastoreName: String,
        disableNetwork: Boolean,
        hostID: String,
        keepMacAddresses: Boolean,
        powerOn: Boolean,
        removeNetworkDevices: Boolean,
        shouldRecoverTags: Boolean,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!,
        vlan: Int,
        vmName: String
    ): vSphereAsyncRequestStatus!
    "Retrieve a list of the datastores for a specified ESXi host"
    vsphereVMListESXiDatastores(clusterUuid: UUID!, ipAddress: String!, password: String!, username: String!): DatastoreListResponse!
    vsphereVMMountRelocate(datastoreId: UUID!, livemountId: UUID!): vSphereAsyncRequestStatus!
    vsphereVMPowerOnOffLiveMount(livemountId: UUID!, powerStatus: Boolean!): VmwareVmMountDetailV1!
    vsphereVMRecoverFiles(
        "vm restore parameters"
        restoreConfig: RestoreConfig!,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): vSphereAsyncRequestStatus!
    vsphereVMRecoverFilesNew(
        clusterUuid: UUID!,
        "Configuration for the restore request."
        config: RestoreFilesJobConfigInput!,
        "The additional arguments needed for a delta recovery. A delta recovery performs a recovery with an an additional next snapshot delta."
        deltaRequest: DeltaRecoveryInput,
        "ID of a snapshot."
        id: String!
    ): AsyncRequestStatus!
    vsphereVMUpdate(
        isArrayIntegrationEnabled: Boolean,
        postBackupScript: PostBackupScriptInputType,
        postSnapScript: PostSnapScriptInputType,
        preBackupScript: PreBackupScriptInputType,
        snappableFid: UUID!,
        "The snapshot consistency mandate of the snappable."
        snapshotConsistencyMandate: String
    ): RequestSuccess!
    "Warm cache for search in cloud native snappables"
    warmCloudNativeIndexCache(
        "Snappable ID"
        snappableId: UUID!
    ): Boolean!
    warmSearchCache(snappableFid: UUID!): Boolean!
}

"""

Supported in v5.0+
"""
type NasBaseConfig {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    v5.0-v5.3: username to access NAS API
    v6.0+: Username to access NAS API.
    """
    apiUsername: String
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNetAppSnapDiffEnabled: Boolean
    """

    Supported in v6.0+
    Indicates whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata fetches during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time  during a backup job.
    """
    isNutanixCftEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    """

    Supported in v5.1
    If snapdiff is enabled on NetApp NAS host
    """
    isSnapdiffEnabled: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
    v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
    """
    vendorType: String!
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

type NasNamespace implements CdmHierarchyObject & HierarchyObject & NasSystemDescendantType & NasSystemLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasNamespaceDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasNamespaceLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type NasNamespaceDescendantTypeConnection {
    count: Int!
    edges: [NasNamespaceDescendantTypeEdge!]!
    nodes: [NasNamespaceDescendantType!]!
    pageInfo: PageInfo!
}

type NasNamespaceDescendantTypeEdge {
    cursor: String!
    node: NasNamespaceDescendantType!
}

type NasNamespaceLogicalChildTypeConnection {
    count: Int!
    edges: [NasNamespaceLogicalChildTypeEdge!]!
    nodes: [NasNamespaceLogicalChildType!]!
    pageInfo: PageInfo!
}

type NasNamespaceLogicalChildTypeEdge {
    cursor: String!
    node: NasNamespaceLogicalChildType!
}

type NasShare implements CdmHierarchyObject & HierarchyObject & NasNamespaceDescendantType & NasNamespaceLogicalChildType & NasSystemDescendantType & NasSystemLogicalChildType & NasVolumeDescendantType & NasVolumeLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type NasSystem implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasSystemDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    lastRefreshTime: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasSystemLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    osVersion: String
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "The total number of volumes in this NAS system."
    volumeCount: Int!
}

type NasSystemConnection {
    count: Int!
    edges: [NasSystemEdge!]!
    nodes: [NasSystem!]!
    pageInfo: PageInfo!
}

type NasSystemDescendantTypeConnection {
    count: Int!
    edges: [NasSystemDescendantTypeEdge!]!
    nodes: [NasSystemDescendantType!]!
    pageInfo: PageInfo!
}

type NasSystemDescendantTypeEdge {
    cursor: String!
    node: NasSystemDescendantType!
}

type NasSystemEdge {
    cursor: String!
    node: NasSystem!
}

type NasSystemLogicalChildTypeConnection {
    count: Int!
    edges: [NasSystemLogicalChildTypeEdge!]!
    nodes: [NasSystemLogicalChildType!]!
    pageInfo: PageInfo!
}

type NasSystemLogicalChildTypeEdge {
    cursor: String!
    node: NasSystemLogicalChildType!
}

type NasSystemSummary {
    "Required. The hostname of the NAS System."
    hostname: String!
    "Required. ID assigned to the NAS System."
    id: String!
    vendorType: NasVendorTypeEnum!
}

type NasVolume implements CdmHierarchyObject & HierarchyObject & NasNamespaceDescendantType & NasNamespaceLogicalChildType & NasSystemDescendantType & NasSystemLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasVolumeDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NasVolumeLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The NAS Namespace to which this NAS Volume belongs, if any"
    nasNamespace: NasNamespace
    "The NAS System to which this NAS Volume belongs"
    nasSystem: NasSystem!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type NasVolumeDescendantTypeConnection {
    count: Int!
    edges: [NasVolumeDescendantTypeEdge!]!
    nodes: [NasVolumeDescendantType!]!
    pageInfo: PageInfo!
}

type NasVolumeDescendantTypeEdge {
    cursor: String!
    node: NasVolumeDescendantType!
}

type NasVolumeLogicalChildTypeConnection {
    count: Int!
    edges: [NasVolumeLogicalChildTypeEdge!]!
    nodes: [NasVolumeLogicalChildType!]!
    pageInfo: PageInfo!
}

type NasVolumeLogicalChildTypeEdge {
    cursor: String!
    node: NasVolumeLogicalChildType!
}

"Represents a GCP native network host project"
type NetworkHostProject {
    name: String!
    nativeId: String!
    projectId: String!
}

"Replication network throttle information."
type NetworkThrottle {
    "Active network throttle limit."
    currentThrottleLimit: Float!
    "Default network throttle limit."
    defaultThrottleLimit: Float!
    "Status of network throttle enablement."
    isEnabled: Boolean!
}

"""

Supported in v5.0+
"""
type NetworkThrottleScheduleSummary {
    """

    Required. Supported in v5.0+
    Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
    """
    daysOfWeek: [Int!]!
    """

    Required. Supported in v5.0+
    An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    endTime: Long!
    """

    Required. Supported in v5.0+
    An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    startTime: Long!
    """

    Required. Supported in v5.0+
    Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    throttleLimit: Float!
}

"""

Supported in v5.0+
"""
type NetworkThrottleSummary {
    """

    Supported in v5.0+
    Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    defaultThrottleLimit: Float
    """

    Required. Supported in v5.0+
    Boolean value that determines whether a throttle limit is enabled.
    """
    isEnabled: Boolean!
    """

    Supported in v5.2+
    The network interface where outgoing traffic is throttled.
    """
    networkInterface: String
    resourceId: NetworkThrottleResourceIdEnum!
    """

    Required. Supported in v5.0+
    An array containing all of the scheduled throttle limits for the specified resource.
    """
    scheduledThrottles: [NetworkThrottleScheduleSummary!]!
}

"""

Supported in v5.0+
"""
type NetworkThrottleSummaryListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [NetworkThrottleSummary!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

"List of status for each node"
type NodeStatus {
    brikId: String!
    id: String!
    ipAddress: String
    status: String!
    supportTunnel: SupportTunnelInfoResp
}

"Response type for getting information on every node in a cluster"
type NodeStatusListResp {
    data: [NodeStatus!]!
    hasMore: Boolean
    id: String!
    total: Long
}

type NutanixCluster implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NutanixClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): NutanixClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type NutanixClusterConnection {
    count: Int!
    edges: [NutanixClusterEdge!]!
    nodes: [NutanixCluster!]!
    pageInfo: PageInfo!
}

type NutanixClusterDescendantTypeConnection {
    count: Int!
    edges: [NutanixClusterDescendantTypeEdge!]!
    nodes: [NutanixClusterDescendantType!]!
    pageInfo: PageInfo!
}

type NutanixClusterDescendantTypeEdge {
    cursor: String!
    node: NutanixClusterDescendantType!
}

type NutanixClusterEdge {
    cursor: String!
    node: NutanixCluster!
}

type NutanixClusterLogicalChildTypeConnection {
    count: Int!
    edges: [NutanixClusterLogicalChildTypeEdge!]!
    nodes: [NutanixClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type NutanixClusterLogicalChildTypeEdge {
    cursor: String!
    node: NutanixClusterLogicalChildType!
}

type NutanixVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NutanixClusterDescendantType & NutanixClusterLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type NutanixVmConnection {
    count: Int!
    edges: [NutanixVmEdge!]!
    nodes: [NutanixVm!]!
    pageInfo: PageInfo!
}

type NutanixVmEdge {
    cursor: String!
    node: NutanixVm!
}

type O365App implements O365AppObject {
    addedAt: DateTime!
    appId: String!
    appOwner: String!
    appType: String!
    isAuthenticated: Boolean!
    subscription: String!
}

type O365AppConnection {
    count: Int!
    edges: [O365AppEdge!]!
    nodes: [O365App!]!
    pageInfo: PageInfo!
}

type O365AppEdge {
    cursor: String!
    node: O365App!
}

type O365Calendar implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
}

type O365CalendarEvent implements O365ExchangeObject {
    attendees: [String!]!
    endDateTime: DateTime
    eventType: CalendarEventTypeEnum!
    id: String!
    name: String
    organizer: String
    parentFolderId: String
    snapshotId: UUID
    startDateTime: DateTime
    versionStartSnapshotId: UUID
}

type O365CalendarFolder implements O365ExchangeObject {
    id: String!
    name: String
    parentFolderId: String
    snapshotId: UUID
}

type O365Email implements O365ExchangeObject {
    from: String
    id: String!
    parentFolderId: String
    receivedDateTime: DateTime
    sentDateTime: DateTime
    snapshotId: UUID
    snapshotNum: Int
    subject: String
    toRecipients: [String!]!
}

type O365ExchangeObjectConnection {
    count: Int!
    edges: [O365ExchangeObjectEdge!]!
    nodes: [O365ExchangeObject!]!
    pageInfo: PageInfo!
}

type O365ExchangeObjectEdge {
    cursor: String!
    node: O365ExchangeObject!
}

type O365Folder implements O365ExchangeObject {
    id: String!
    name: String
    parentFolderId: String
    snapshotId: UUID
    snapshotNum: Int
}

"O365 Groups from O365 hierarchy."
type O365Group implements HierarchyObject & O365OrgDescendant & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "True, if the group is deleted in AD."
    deletedInAzure: Boolean!
    "DisplayName of AD Group."
    displayName: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "Rubrik internal UUID for group."
    groupID: String!
    "Group ID of o365 group object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "Natural ID of AD Group."
    naturalID: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Number of user that are member of group."
    userCount: Long!
}

type O365GroupConnection {
    count: Int!
    edges: [O365GroupEdge!]!
    nodes: [O365Group!]!
    pageInfo: PageInfo!
}

type O365GroupEdge {
    cursor: String!
    node: O365Group!
}

type O365Mailbox implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & O365UserDescendantMetadata & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    userPrincipalName: String!
}

type O365MailboxConnection {
    count: Int!
    edges: [O365MailboxEdge!]!
    nodes: [O365Mailbox!]!
    pageInfo: PageInfo!
}

type O365MailboxEdge {
    cursor: String!
    node: O365Mailbox!
}

type O365OAuthConsentCompleteResp {
    appId: String!
    encryptedRefreshToken: String!
}

type O365OAuthConsentKickoffResp {
    appClientId: String!
    csrfToken: String!
    tenantId: String!
}

type O365Onedrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365UserDescendant & O365UserDescendantMetadata & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    totalStorageInBytes: Long!
    usedStorageInBytes: Long!
    userID: String!
    userName: String!
    userPrincipalName: String!
}

type O365OnedriveConnection {
    count: Int!
    edges: [O365OnedriveEdge!]!
    nodes: [O365Onedrive!]!
    pageInfo: PageInfo!
}

type O365OnedriveEdge {
    cursor: String!
    node: O365Onedrive!
}

type O365OnedriveFile implements O365OnedriveObject {
    channelFolderName: String
    channelId: String
    channelName: String
    createTime: DateTime
    fileType: String
    id: String!
    modifiedTime: DateTime
    name: String
    parentFolderId: String
    size: Long
    snapshotId: UUID
    snapshotNum: Int
    snapshotTime: DateTime
}

type O365OnedriveFolder implements O365OnedriveObject {
    channelFolderName: String
    channelId: String
    channelName: String
    createTime: DateTime
    id: String!
    itemCount: Int
    modifiedTime: DateTime
    name: String
    parentFolderId: String
    size: Long
    snapshotId: UUID
    snapshotNum: Int
    snapshotTime: DateTime
}

type O365OnedriveObjectConnection {
    count: Int!
    edges: [O365OnedriveObjectEdge!]!
    nodes: [O365OnedriveObject!]!
    pageInfo: PageInfo!
}

type O365OnedriveObjectEdge {
    cursor: String!
    node: O365OnedriveObject!
}

type O365Org implements HierarchyObject & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "List of direct children of O365Org"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365UserConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    exocomputeId: String!
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    past1DayMailboxComplianceCount: Int!
    past1DayMailboxOutOfComplianceCount: Int!
    past1DayOnedriveComplianceCount: Int!
    past1DayOnedriveOutOfComplianceCount: Int!
    past1DaySharepointComplianceCount: Int!
    past1DaySharepointOutOfComplianceCount: Int!
    past1DayTeamsComplianceCount: Int!
    past1DayTeamsOutOfComplianceCount: Int!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "List of all descendants of O365Org"
    searchDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OrgDescendantConnection!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: OrgStatusEnum!
    "Number of O365 Users with no SLA assigned"
    unprotectedUsersCount: Int!
}

type O365OrgConnection {
    count: Int!
    edges: [O365OrgEdge!]!
    nodes: [O365Org!]!
    pageInfo: PageInfo!
}

type O365OrgDescendantConnection {
    count: Int!
    edges: [O365OrgDescendantEdge!]!
    nodes: [O365OrgDescendant!]!
    pageInfo: PageInfo!
}

type O365OrgDescendantEdge {
    cursor: String!
    node: O365OrgDescendant!
}

type O365OrgEdge {
    cursor: String!
    node: O365Org!
}

"The O365 subscription status and id info."
type O365OrgInfo {
    "Exchange colossus status."
    exchangeOnColossus: Boolean!
    "Polaris ID of O365 subscription."
    orgId: String!
    "Provision status of O365 subscription."
    status: ProvisionStatus!
}

type O365PhysicalDataSizeTimeStamp {
    physicalDataSizeInBytes: Long!
    timestamp: DateTime
}

"O365 SaaS setup kickoff response"
type O365SaaSSetupKickoffResp {
    appClientIdsPerType: [AppIDForType!]!
    csrfToken: String!
}

type O365ServiceAccountStatusResp {
    status: O365ServiceAccountStatusEnum!
    username: String!
}

"O365 setup kickoff response"
type O365SetupKickoffResp {
    appClientId: String!
    appClientIdsPerType: [AppIDForType!]!
    csrfToken: String!
}

type O365SharepointDrive implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    listNaturalId: String!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    objectId: String!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    title: String!
    totalStorageInBytes: Long!
    url: String!
    usedStorageInBytes: Long!
}

type O365SharepointDriveConnection {
    count: Int!
    edges: [O365SharepointDriveEdge!]!
    nodes: [O365SharepointDrive!]!
    pageInfo: PageInfo!
}

type O365SharepointDriveEdge {
    cursor: String!
    node: O365SharepointDrive!
}

type O365SharepointList implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The id of the O365 SharePoint list object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    objectId: String!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    title: String!
    url: String!
}

type O365SharepointObjectConnection {
    count: Int!
    edges: [O365SharepointObjectEdge!]!
    nodes: [O365SharepointObject!]!
    pageInfo: PageInfo!
}

type O365SharepointObjectEdge {
    cursor: String!
    node: O365SharepointObject!
}

type O365Site implements HierarchyObject & HierarchySnappable & O365OrgDescendant & O365SharepointObject & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hierarchyLevel: Int!
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    objectId: String!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentId: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    title: String!
    url: String!
}

type O365SiteConnection {
    count: Int!
    edges: [O365SiteEdge!]!
    nodes: [O365Site!]!
    pageInfo: PageInfo!
}

type O365SiteEdge {
    cursor: String!
    node: O365Site!
}

type O365TeamChildSnapshotIDs {
    mailboxSnapshotId: String
    spDriveSnapshotId: String
}

type O365TeamConvChannel {
    folderId: String!
    name: String!
    naturalId: String!
}

type O365TeamConvChannelConnection {
    count: Int!
    edges: [O365TeamConvChannelEdge!]!
    nodes: [O365TeamConvChannel!]!
    pageInfo: PageInfo!
}

type O365TeamConvChannelEdge {
    cursor: String!
    node: O365TeamConvChannel!
}

type O365TeamConversationsSender {
    displayName: String!
    naturalId: String!
}

type O365TeamConversationsSenderConnection {
    count: Int!
    edges: [O365TeamConversationsSenderEdge!]!
    nodes: [O365TeamConversationsSender!]!
    pageInfo: PageInfo!
}

type O365TeamConversationsSenderEdge {
    cursor: String!
    node: O365TeamConversationsSender!
}

type O365Teams implements HierarchyObject & HierarchySnappable & O365OrgDescendant & PolarisHierarchyObject & PolarisHierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    membersCount: Int!
    "The name of the hierarchy object."
    name: String!
    naturalId: String!
    "the newest snapshot that is indexed and unexpired, and therefore restorable."
    newestIndexedSnapshot: PolarisSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: PolarisSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: PolarisSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    orgID: String!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this snappable"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter polaris snapshot connection"
        filter: PolarisSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByConnection
    "GroupBy connection for this snappable's snapshots."
    snapshotGroupByNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "filter polaris snapshot connection"
        snapshotFilter: [PolarisSnapshotFilterNewInput!]!,
        "group polaris snapshots by field"
        snapshotGroupBy: SnapshotGroupByTimeEnum!,
        timezoneOffset: Float = 0.0
    ): PolarisSnapshotGroupByNewConnection
    "The list of snapshots taken for this snappable"
    snapshotsOfSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection
    teamName: String!
}

type O365TeamsChannel implements O365TeamsChannelObject {
    folderId: String
    folderName: String
    id: String
    name: String
    naturalId: String
}

type O365TeamsChannelConnection {
    count: Int!
    edges: [O365TeamsChannelEdge!]!
    nodes: [O365TeamsChannel!]!
    pageInfo: PageInfo!
}

type O365TeamsChannelEdge {
    cursor: String!
    node: O365TeamsChannel!
}

type O365TeamsConnection {
    count: Int!
    edges: [O365TeamsEdge!]!
    nodes: [O365Teams!]!
    pageInfo: PageInfo!
}

type O365TeamsConversations {
    channelId: String!
    channelName: String
    channelPostCount: Int!
}

type O365TeamsConversationsConnection {
    count: Int!
    edges: [O365TeamsConversationsEdge!]!
    nodes: [O365TeamsConversations!]!
    pageInfo: PageInfo!
}

type O365TeamsConversationsEdge {
    cursor: String!
    node: O365TeamsConversations!
}

type O365TeamsEdge {
    cursor: String!
    node: O365Teams!
}

type O365User implements HierarchyObject & O365OrgDescendant & PolarisHierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "List of direct children of O365User"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365UserDescendantConnection!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    emailAddress: String
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type O365UserConnection {
    count: Int!
    edges: [O365UserEdge!]!
    nodes: [O365User!]!
    pageInfo: PageInfo!
}

type O365UserDescendantConnection {
    count: Int!
    edges: [O365UserDescendantEdge!]!
    nodes: [O365UserDescendant!]!
    pageInfo: PageInfo!
}

type O365UserDescendantEdge {
    cursor: String!
    node: O365UserDescendant!
}

type O365UserDescendantMetadataConnection {
    count: Int!
    edges: [O365UserDescendantMetadataEdge!]!
    nodes: [O365UserDescendantMetadata!]!
    pageInfo: PageInfo!
}

type O365UserDescendantMetadataEdge {
    cursor: String!
    node: O365UserDescendantMetadata!
}

type O365UserEdge {
    cursor: String!
    node: O365User!
}

type ObjectIdToSnapshotIds {
    "Required. Object ID."
    id: String!
    "Required. Snapshot IDs."
    snapshots: [String!]!
}

type ObjectIdsForHierarchyType {
    objectIds: [String!]!
    snappableType: SnappableLevelHierarchyTypeEnum!
}

type ObjectSpecificConfigs {
    awsRdsConfig: AwsRdsConfig
    "SLA Domain configuration for Azure SQL Database DB object."
    azureSqlDatabaseDbConfig: AzureSqlDatabaseDbConfig
    "SLA Domain configuration for Azure SQL Managed Instance DB object."
    azureSqlManagedInstanceDbConfig: AzureSqlManagedInstanceDbConfig
    sapHanaConfig: SapHanaConfig
    vmwareVmConfig: VmwareVmConfig
}

type ObjectStatus {
    id: String!
    latestSnapshotResult: SnapshotResult
    policyStatuses: [PolicyStatus!]!
}

type ObjectSummary {
    id: String!
    isArchived: Boolean!
    mailAddress: String!
    name: String!
    objectType: ManagedObjectType!
}

type ObjectType {
    enumValue: ObjectTypeEnum!
}

"Create Kubernetes Cluster Response."
type OnboardingSetupReply {
    clusterId: String!
    yamlUrl: String!
}

type OpenSupportTunnelReply {
    currentPort: String!
    inactivityTimeout: String!
    isTunnelOpen: String!
    nodeId: String!
}

"Represents option group in AWS."
type OptionGroup {
    "Amazon Resource Name (ARN) of the option group."
    arn: String!
    "Option group engine."
    engine: String!
    "Major version of the option group engine."
    majorEngineVersion: String!
    "Name of the option group."
    name: String!
    "Virtual Private Cloud (VPC) corresponding to the option group."
    vpcId: String!
}

type OracleDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & OracleHostDescendantType & OracleHostLogicalChildType & OracleRacDescendantType & OracleRacLogicalChildType & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type OracleDatabaseConnection {
    count: Int!
    edges: [OracleDatabaseEdge!]!
    nodes: [OracleDatabase!]!
    pageInfo: PageInfo!
}

type OracleDatabaseEdge {
    cursor: String!
    node: OracleDatabase!
}

type OracleHost implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleHostLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type OracleHostDescendantTypeConnection {
    count: Int!
    edges: [OracleHostDescendantTypeEdge!]!
    nodes: [OracleHostDescendantType!]!
    pageInfo: PageInfo!
}

type OracleHostDescendantTypeEdge {
    cursor: String!
    node: OracleHostDescendantType!
}

type OracleHostLogicalChildTypeConnection {
    count: Int!
    edges: [OracleHostLogicalChildTypeEdge!]!
    nodes: [OracleHostLogicalChildType!]!
    pageInfo: PageInfo!
}

type OracleHostLogicalChildTypeEdge {
    cursor: String!
    node: OracleHostLogicalChildType!
}

type OracleRac implements CdmHierarchyObject & HierarchyObject & OracleTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleRacDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleRacLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type OracleRacDescendantTypeConnection {
    count: Int!
    edges: [OracleRacDescendantTypeEdge!]!
    nodes: [OracleRacDescendantType!]!
    pageInfo: PageInfo!
}

type OracleRacDescendantTypeEdge {
    cursor: String!
    node: OracleRacDescendantType!
}

type OracleRacLogicalChildTypeConnection {
    count: Int!
    edges: [OracleRacLogicalChildTypeEdge!]!
    nodes: [OracleRacLogicalChildType!]!
    pageInfo: PageInfo!
}

type OracleRacLogicalChildTypeEdge {
    cursor: String!
    node: OracleRacLogicalChildType!
}

type OracleTopLevelDescendantTypeConnection {
    count: Int!
    edges: [OracleTopLevelDescendantTypeEdge!]!
    nodes: [OracleTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type OracleTopLevelDescendantTypeEdge {
    cursor: String!
    node: OracleTopLevelDescendantType!
}

type PageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type PathInfo {
    "JSON encoded file access control list (ACL) information."
    aclDetails: String
    "File creation time."
    creationTime: DateTime
    "File modification time."
    modificationTime: DateTime
    "Required. File path that matched the malware Indicator of Compromise."
    path: String!
    "Hash algorithm and hash values."
    requestedHashDetails: [HashDetail!]!
    "Required. Details about the matching YARA rule(s)."
    yaraMatchDetails: [YARAMatchDetail!]!
}

type PathNode {
    fid: UUID!
    name: String!
    objectType: HierarchyObjectTypeEnum!
}

type PathSecInfo {
    owner: String!
    path: String!
    permissions: [SDDLPermission!]!
}

type PendingActionType {
    pendingActionGroupType: PendingActionGroupTypeEnum!
    pendingActionSubGroupType: PendingActionSubGroupTypeEnum!
    pendingActionSyncType: PendingActionSyncTypeEnum!
}

"Detailed information about objects passing through the Radar pipeline."
type PendingEvaluationResults {
    "Unique UUID of the cluster."
    clusterUuid: String!
    "Date that this object was created in Radar."
    createdAt: DateTime
    "Information about this object within the Radar pipeline."
    info: String!
    "Determines whether a result is still pending in the Radar pipeline."
    isCompleted: Boolean!
    "Internally used ID to manage permissions of this object."
    managedId: String!
    "Internally used ID to specify snappable."
    snappableId: String!
    "Snappable name."
    snappableName: String!
    "Type of snappable."
    snappableType: String!
    "Date that this snapshot was performed."
    snapshotDate: DateTime
    "Internally used ID to specify snapshot."
    snapshotId: String!
    "Date that this object was last updated in Radar."
    updatedAt: DateTime
}

"Count and detailed information about items pending in Radar pipeline."
type PendingEvaluationResultsReply {
    count: Long!
    pendingEvaluationResults: [PendingEvaluationResults!]!
}

type PendingSnapshotDeletion {
    snapshotFid: UUID!
    status: PendingActionStatusEnum!
}

type PendingSnapshotsOfObjectDeletion {
    objectFid: UUID!
    status: PendingActionStatusEnum!
}

type Permission {
    objectsForHierarchyTypes: [ObjectIdsForHierarchyType!]!
    operation: OperationEnum!
}

type PhysicalHost implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    connectionStatus: HostConnectionStatus
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PhysicalHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hostVolumes: [CdmHostVolume!]!
    "The fid of the hierarchy object."
    id: UUID!
    ipAddresses: [String!]!
    isArchived: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    osName: String
    "The OS Type of this Physical Host"
    osType: GuestOsTypeEnum
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PhysicalHostPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    vfdState: String!
}

type PhysicalHostConnection {
    count: Int!
    edges: [PhysicalHostEdge!]!
    nodes: [PhysicalHost!]!
    pageInfo: PageInfo!
}

type PhysicalHostDescendantTypeConnection {
    count: Int!
    edges: [PhysicalHostDescendantTypeEdge!]!
    nodes: [PhysicalHostDescendantType!]!
    pageInfo: PageInfo!
}

type PhysicalHostDescendantTypeEdge {
    cursor: String!
    node: PhysicalHostDescendantType!
}

type PhysicalHostEdge {
    cursor: String!
    node: PhysicalHost!
}

type PhysicalHostPhysicalChildTypeConnection {
    count: Int!
    edges: [PhysicalHostPhysicalChildTypeEdge!]!
    nodes: [PhysicalHostPhysicalChildType!]!
    pageInfo: PageInfo!
}

type PhysicalHostPhysicalChildTypeEdge {
    cursor: String!
    node: PhysicalHostPhysicalChildType!
}

type PolarisHierarchyObjectConnection {
    count: Int!
    edges: [PolarisHierarchyObjectEdge!]!
    nodes: [PolarisHierarchyObject!]!
    pageInfo: PageInfo!
}

type PolarisHierarchyObjectEdge {
    cursor: String!
    node: PolarisHierarchyObject!
}

type PolarisHierarchySnappableObject {
    id: String!
    name: String!
}

type PolarisInventorySubHierarchyRoot {
    "List of children"
    childConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
    rootEnum: InventorySubHierarchyRootEnum!
    "List of top-level descendants (with respect to RBAC)"
    topLevelDescendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): PolarisHierarchyObjectConnection!
}

"Specific info for AWS Target created on Polaris"
type PolarisManagedAwsTarget implements Target {
    bucket: String!
    cloudAccount: CloudAccount!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    "The cluster to which this target belongs"
    cluster: Cluster!
    computeSettings: AwsComputeSettings
    "Connection status of the AWS target."
    connectionStatus: ConnectionStatusType!
    encryptionType: TargetEncryptionTypeEnum!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String!
    "The name of this Target"
    name: String!
    proxySettings: ProxySettings
    region: AwsRegionEnum!
    storageClass: AwsStorageClassTypeEnum!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for Azure Target created on Polaris"
type PolarisManagedAzureTarget implements Target {
    accessKey: String!
    cloudAccount: CloudAccount!
    cloudNativeCompanion: AzureCloudNativeTargetCompanion
    "The cluster to which this target belongs"
    cluster: Cluster!
    computeSettings: AzureComputeSettings
    "Connection status of the Azure target."
    connectionStatus: ConnectionStatusType!
    containerName: String!
    "The id of this Target"
    id: String!
    instanceType: InstanceTypeEnum!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    "The name of this Target"
    name: String!
    proxySettings: ProxySettings
    storageAccountName: String!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for Gcp Target created on Polaris"
type PolarisManagedGcpTarget implements Target {
    archivalProxySettings: ProxySettings
    bucket: String!
    "The cluster to which this target belongs"
    cluster: Cluster!
    "Connection status of the Gcp target."
    connectionStatus: ConnectionStatusType!
    encryptionPassword: String!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    region: GcpRegionEnum!
    serviceAccountJsonKey: String!
    storageClass: GcpStorageClassTypeEnum!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for Nfs Target created on Polaris"
type PolarisManagedNfsTarget implements Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    "Connection status of the NFS target."
    connectionStatus: ConnectionStatusType!
    destinationFolder: String!
    exportDir: String!
    fileLockPeriodInSeconds: Int!
    host: String!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    "The name of this Target"
    name: String!
    nfsAuthType: AuthTypeEnum!
    nfsVersion: Int!
    otherNfsOptions: String!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
}

"Specific info for RCS Target created on Polaris"
type PolarisManagedRcsTarget implements Target {
    "The cluster to which this target belongs"
    cluster: Cluster!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    "The name of this Target"
    name: String!
    region: RcsRegionEnumType!
    rsaKey: String!
    spaceUsageAlertThreshold: Int!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
    tier: RcsTierEnumType!
}

"Specific info for S3Compatible Target created on Polaris"
type PolarisManagedS3CompatibleTarget implements Target {
    accessKey: String!
    bucketPrefix: String!
    "The cluster to which this target belongs"
    cluster: Cluster!
    "Connection status of the S3Compatible target."
    connectionStatus: ConnectionStatusType!
    encryptionKeyInDer: String!
    endpoint: String!
    "The id of this Target"
    id: String!
    "The pause/resume status of this Target"
    isActive: Boolean!
    "Whether this Target is archived"
    isArchived: Boolean!
    isConsolidationEnabled: Boolean!
    "The name of this Target"
    name: String!
    numberOfBuckets: Int!
    secretKey: String!
    syncFailureReason: String!
    syncStatus: TargetSyncStatusEnum!
    "The type of this Target"
    targetType: TargetTypeEnum!
    useSystemProxy: Boolean!
}

"SLA Sync status for a given cluster"
type PolarisSLASyncStatus {
    SLASyncStatus: PolarisSLASyncStatusEnum!
    clusterUuid: String!
}

"Global SLA status for cluster."
type PolarisSlaStatus {
    "Cluster where the global SLA is synced."
    cluster: Cluster
    "Pause status of given cluster."
    pauseStatus: PauseStatus!
    "Sync status of given cluster."
    syncStatus: PolarisSLASyncStatusEnum!
}

type PolarisSlaStatusConnection {
    count: Int!
    edges: [PolarisSlaStatusEdge!]!
    nodes: [PolarisSlaStatus!]!
    pageInfo: PageInfo!
}

type PolarisSlaStatusEdge {
    cursor: String!
    node: PolarisSlaStatus!
}

type PolarisSnapshot implements GenericSnapshot {
    consistencyLevel: SnapshotConsistencyLevelEnum!
    date: DateTime!
    expirationDate: DateTime
    expiryHint: Boolean!
    "Whether or not the snapshot has an unexpired archived copy"
    hasUnexpiredArchivedCopy: Boolean!
    "Whether or not the snapshot has an unexpired replica"
    hasUnexpiredReplica: Boolean!
    id: UUID!
    indexTime: DateTime
    indexingAttempts: Long!
    isArchivalCopy: Boolean
    isArchived: Boolean!
    isCorrupted: Boolean!
    isDeletedFromSource: Boolean!
    isDownloadedSnapshot: Boolean
    "Whether or not the snapshot is expired"
    isExpired: Boolean!
    "Whether or not the snapshot is indexed."
    isIndexed: Boolean!
    isOnDemandSnapshot: Boolean!
    isReplica: Boolean
    isReplicated: Boolean!
    isUnindexable: Boolean!
    parentSnapshotId: String
    replicationLocations: [DataLocation!]
    sequenceNumber: Int!
    slaDomain: SlaDomain
    snappableId: String!
    unexpiredArchivedSnapshotCount: Int!
    unexpiredReplicaCount: Int!
}

type PolarisSnapshotConnection {
    count: Int!
    edges: [PolarisSnapshotEdge!]!
    nodes: [PolarisSnapshot!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotEdge {
    cursor: String!
    node: PolarisSnapshot!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupBy {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort polaris snapshots by field"
        sortBy: PolarisSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): PolarisSnapshotConnection!
    "Further provide groupings for the data."
    polarisSnapshotGroupBy(
        "group polaris snapshots by field"
        groupBy: PolarisSnapshotGroupByEnum!
    ): [PolarisSnapshotGroupBy!]!
}

type PolarisSnapshotGroupByConnection {
    count: Int!
    edges: [PolarisSnapshotGroupByEdge!]!
    nodes: [PolarisSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotGroupByEdge {
    cursor: String!
    node: PolarisSnapshotGroupBy!
}

"Polaris Snapshot data with groupby info applied to it."
type PolarisSnapshotGroupByNew {
    "The data groupby info."
    groupByInfo: PolarisSnapshotGroupByInfo!
    "Paginated snapshot data."
    polarisSnapshotConnection: PolarisSnapshotConnection!
}

type PolarisSnapshotGroupByNewConnection {
    count: Int!
    edges: [PolarisSnapshotGroupByNewEdge!]!
    nodes: [PolarisSnapshotGroupByNew!]!
    pageInfo: PageInfo!
}

type PolarisSnapshotGroupByNewEdge {
    cursor: String!
    node: PolarisSnapshotGroupByNew!
}

"Status of various CDM-to-Polaris data syncing jobs."
type PolarisSyncStatus {
    "Last success time of the cluster syncing job."
    clusterSyncLastSuccessTime: DateTime
    "Last success time of the events syncing job."
    eventsSyncLastSuccessTime: DateTime
    "Last success time of the job-monitoring dashboard syncing job."
    jobMonitoringSyncLastSuccessTime: DateTime
    "Last success time of the object metadata syncing job."
    objectMetadataSyncLastSuccessTime: DateTime
    "Last success time of the reports syncing job."
    reportsSyncLastSuccessTime: DateTime
}

type PolicyObj {
    allAnalyzerMappings(stdPath: String!): [AnalyzerMapping!]!
    fileResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListFileResultFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    folderChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: BrowseDirectoryFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        stdPath: String!,
        timezone: String!
    ): FileResultConnection!
    id: String!
    objectStatus: ObjectStatus!
    osType: DataGovOsTypeEnum!
    policySummaries: [ClassificationPolicySummary!]!
    rootFileResult: FileResult!
    shareType: DataGovShareTypeEnum!
    snappable: HierarchyObject!
    snapshotFid: String!
    snapshotTimestamp: Long!
    timeContext: String!
    whitelistedAnalyzerList(stdPath: String!): [WhitelistedAnalyzer!]!
}

type PolicyObjConnection {
    count: Int!
    edges: [PolicyObjEdge!]!
    nodes: [PolicyObj!]!
    pageInfo: PageInfo!
}

type PolicyObjEdge {
    cursor: String!
    node: PolicyObj!
}

type PolicyObjectUsage {
    hierarchyObject: HierarchyObject!
    policies: [ClassificationPolicySummary!]!
}

type PolicyObjectUsageConnection {
    count: Int!
    edges: [PolicyObjectUsageEdge!]!
    nodes: [PolicyObjectUsage!]!
    pageInfo: PageInfo!
}

type PolicyObjectUsageEdge {
    cursor: String!
    node: PolicyObjectUsage!
}

type PolicyStatus {
    policyId: String!
    status: ObjectPolicyStatus!
}

"Describes a script that is run before / after snapshot or backup"
type PrePostScript {
    failureHandling: PrePostScriptFailureHandlingEnum!
    scriptPath: String!
    timeoutMs: Int!
}

type PrecheckFailure {
    cause: String!
    precheckName: String!
    remedy: String!
    upgradeBlocker: Boolean!
}

type PrecheckStatusNextRunInfo {
    jobInstanceId: String!
    startTime: Long!
    status: String!
}

type PrechecksJobReply {
    jobId: String!
}

type PrechecksStatusReply {
    endTime: Long!
    failureResults: [PrecheckFailure!]!
    nextRunInfo: PrecheckStatusNextRunInfo
    numPrechecks: Int!
    runPeriodInMinutes: Int!
}

"Prepares AWS cloud account for deletion and initiates deletion of the account."
type PrepareAwsCloudAccountDeletionReply {
    "CloudFormation URL to delete the stack."
    cloudFormationUrl: String!
    "List of feature versions."
    featureRegionMap: [AwsCloudAccountFeatureVersion!]!
    "Template URL of the Cloudformation stack. The template URL is empty when the cloud account has no connected features and is to be deleted."
    templateUrl: String!
}

"Response to prepare updation of AWS cloud account."
type PrepareFeatureUpdateForAwsCloudAccountReply {
    "CloudFormation URL to update cloud account."
    cloudFormationUrl: String!
    "AWS CloudFormation template URL."
    templateUrl: String!
}

type PreviewerClusterConfig {
    clusterId: String!
    enabled: Boolean!
}

"Ldap Principal"
type Principal {
    authDomainId: String!
    description: String
    email: String
    id: String!
    name: String!
    principalType: PrincipalTypeEnum!
}

type PrincipalConnection {
    count: Int!
    edges: [PrincipalEdge!]!
    nodes: [Principal!]!
    pageInfo: PageInfo!
}

type PrincipalEdge {
    cursor: String!
    node: Principal!
}

"Count of processed Radar snappables"
type ProcessedRadarSnappableCountReply {
    count: Long!
}

"Represents a protected object and its corresponding SLA Domain."
type ProtectedObjectTypeToSla {
    "The type of the protected object."
    protectedObjectType: SnappableLevelHierarchyTypeEnum!
    "SLA Domain assigned to the object."
    slaAssignment: AzureNativeResourceGroupSlaAssignment!
}

"Metadata for rendering protected objects."
type ProtectedObjects implements ProtectedObjectSummary {
    effectiveSlaOpt: String
    id: String!
    isArchived: Boolean!
    isUnprotected: Boolean!
    name: String!
    objectType: ManagedObjectType
    "pause status of the protected object."
    slaPauseStatus: Boolean
}

type ProtectedObjectsConnection {
    count: Int!
    edges: [ProtectedObjectsEdge!]!
    nodes: [ProtectedObjects!]!
    pageInfo: PageInfo!
}

type ProtectedObjectsEdge {
    cursor: String!
    node: ProtectedObjects!
}

"Count and snappable type representing protected Radar snappables"
type ProtectedRadarSnappable {
    count: Long!
    snappableType: String!
}

"Count of protected Radar snappables"
type ProtectedRadarSnappableCountReply {
    snappableCounts: [ProtectedRadarSnappable!]!
}

type ProtectionStatus {
    enumValue: ProtectionStatusEnum!
}

type ProtectionTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Proxy Settings for Target"
type ProxySettings {
    portNumber: Int!
    protocol: String!
    proxyServer: String!
    username: String!
}

type PvcInformation {
    "Access mode mounted on a host."
    accessMode: String!
    "PVC storage capacity."
    capacity: String!
    "ID to uniquely identify PVC."
    id: String!
    "Json string of PVC Labels."
    labels: String!
    "Name of PVC in snapshot."
    name: String!
    "Phase in which PVC bound to the PV."
    phase: String!
    "Storage class of PVC."
    storageClass: String!
    "PV name on which PVC bound."
    volume: String!
}

type QuarterlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfQuarter: DayOfQuarterEnum!
    quarterStartMonth: MonthEnum!
}

type Query {
    AwsCloudAccountListKMSKeys(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!
    ): AwsCloudAccountListKMSKeysResponse!
    AwsCloudAccountListSecurityGroups(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSecurityGroupsResponse!
    AwsCloudAccountListSubnets(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!,
        "vpc native id"
        vpcID: String!
    ): AwsCloudAccountListSubnetsResponse!
    AwsCloudAccountListVpcs(
        "The ID of the cloud account"
        cloudAccountUuid: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "aws region argument for archival use case"
        region: AwsRegionEnum!
    ): AwsCloudAccountListVpcResponse!
    "Lists the account owners."
    accountOwners: [User!]!
    "This endpoint is deprecated."
    accountSettings: AccountSetting!
    activeCustomAnalyzerConnection: AnalyzerConnection!
    activitySeries(
        "The id of the activity series"
        activitySeriesId: UUID!,
        "The uuid of the cluster"
        clusterUuid: UUID
    ): ActivitySeries!
    activitySeriesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort activity series by field"
        sortBy: ActivitySeriesSortByEnum = LastUpdated,
        "activity sort order"
        sortOrder: SortOrderEnum = Desc
    ): ActivitySeriesConnection!
    activitySeriesGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: ActivitySeriesFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group activity series by a field"
        groupBy: ActivitySeriesGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): ActivitySeriesGroupByConnection!
    "Return AD objects"
    adObjectsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        commonNames: [String!],
        "Returns the first n elements from the list."
        first: Int,
        objectCategories: [String!],
        objectSids: [String!]
    ): ADObjectConnection!
    allAccountProducts(
        "End date of product (yyyy-mm-dd)."
        endDateArg: DateTime,
        "Name of product (GPS, RADAR, etc.)."
        nameFilter: [ProductName!]!,
        "Start date of product (yyyy-mm-dd)."
        startDateArg: DateTime,
        "State of product (Active, Expired, etc.)."
        stateFilter: [ProductState!]!,
        "Type of product (Revenue, POC, etc.)."
        typeFilter: [ProductType!]!
    ): [AccountProduct!]!
    "List of Availability Zones (AZs) in the specified region on the specified AWS Native account."
    allAvailabilityZonesByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [String!]!
    "List of all AWS cloud account configurations with the given search query."
    allAwsCloudAccountConfigs(
        "Arguments for get cloud accounts configs."
        awsCloudAccountsArg: AwsCloudAccountConfigsInput!
    ): [AwsFeatureConfig!]!
    "List of active AWS cloud accounts and the features for the accounts. A cloud account is an AWS account added to the Rubrik platform."
    allAwsCloudAccountsWithFeatures(
        "Arguments for get cloud accounts."
        awsCloudAccountsArg: AwsCloudAccountsWithFeaturesInput!
    ): [AwsCloudAccountWithFeatures!]!
    "List of all AWS exocompute configurations filtered by a cloud account ID or a cloud account name prefix."
    allAwsExocomputeConfigs(
        "A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query."
        awsNativeAccountIdOrNamePrefix: String!
    ): [AwsExocomputeConfig!]!
    "Get all CDM versions in Azure marketplace."
    allAzureCdmVersions(
        "CDM version request params for Azure."
        cdmVersionRequest: cdmVersionRequest!
    ): [AzureCdmVersion!]!
    "Retrieves a list of all the missing permissions on Azure subscriptions that are a part of the Azure Cloud Account."
    allAzureCloudAccountMissingPermissions(
        "The cloud account action to be performed. Some examples are: isCreate, isUpdateRegions, isDelete."
        cloudAccountAction: CloudAccountActionEnum!,
        "Session ID of the current OAuth session."
        sessionId: String!,
        "List of Azure subscription IDs."
        subscriptionIds: [UUID!]!
    ): [AzureSubscriptionMissingPermissions!]!
    "Retrieves a list of all Azure Subscriptions with feature details such as feature, status, and regions."
    allAzureCloudAccountSubscriptionsByFeature(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatusEnum!]!
    ): [AzureSubscriptionWithFeaturesType!]!
    "Retrieves a list of all the Azure tenants and tenant subscriptions for features. The list can be filtered by feature status, subscription native ID, and subscription name."
    allAzureCloudAccountTenants(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "Specifies whether the details about the subscriptions in the tenants are included in the response or not."
        includeSubscriptionDetails: Boolean!
    ): [AzureCloudAccountTenant!]!
    "Retrieves a list of Azure Exocompute configurations filtered by a cloud account ID or a search query."
    allAzureExocomputeConfigsInAccount(
        "A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query."
        azureExocomputeSearchQuery: String,
        "IDs of cloud accounts."
        cloudAccountIDs: [UUID!]
    ): [AzureExocomputeConfigsInAccount!]!
    "Retrieves all availability sets in the specified region, resource group, and subscription. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview."
    allAzureNativeAvailabilitySetsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Resource Group Name"
        resourceGroupName: String!
    ): [AzureNativeAvailabilitySet!]!
    "Retrieves all supported disk types when exporting a particular snapshot. Not all disk types are supported in all the regions, hence the limitation. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types"
    allAzureNativeExportCompatibleDiskTypesByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegionEnum!
    ): [AzureNativeExportCompatibleDiskTypes!]!
    "Retrieves all supported virtual machine (VM) sizes when exporting a particular snapshot. Not all VM sizes are supported in all the regions, hence the limitation. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    allAzureNativeExportCompatibleVMSizesByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegionEnum!,
        "Snapshot ID"
        vmSnapshotId: UUID!
    ): [AzureNativeExportCompatibleVMSizes!]!
    "Retrieves all security groups in the specified region and subscription. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups."
    allAzureNativeSecurityGroupsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegionEnum!
    ): [AzureNativeSecurityGroup!]!
    "Retrieves list of all storage Accounts in a subscription."
    allAzureNativeStorageAccountsFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!
    ): [AzureNativeStorageAccount!]!
    "Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/subnet-extension."
    allAzureNativeSubnetsByRegionFromAzure(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "The azure region."
        region: AzureNativeRegionEnum!
    ): [AzureNativeSubnet!]!
    "Retrieves all virtual machine (VM) sizes in the subscriptions protected by Rubrik that have been configured for protection. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes."
    allAzureNativeVirtualMachineSizes(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID
    ): [String!]!
    "Retrieves all virtual networks (VNets) in the protected subscriptions. VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview."
    allAzureNativeVirtualNetworks(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID
    ): [AzureNativeVirtualNetwork!]!
    "Get all available network security groups for Azure."
    allAzureNsgs(
        "Nsg request params for Azure."
        nsgRequest: nsgRequest!
    ): [String!]!
    "Get all available locations for Azure."
    allAzureRegions(
        "Cloud account Id"
        cloudAccountId: String!
    ): [String!]!
    "Get resource groups for a service principal in Azure."
    allAzureResourceGroups(
        "Azure region"
        azureRegion: String!,
        "Cloud account Id"
        cloudAccountId: String!
    ): [String!]!
    "List all storage accounts from Azure."
    allAzureStorageAccounts(
        "Storage accounts request params for Azure."
        storageAccountsRequest: AzureStorageAccountsReq!
    ): [String!]!
    "Get subnets for a given account in Azure."
    allAzureSubnets(
        "Subnet request params for Azure."
        subnetRequest: subnetRequest!
    ): [String!]!
    "Get vnets for a given account in Azure."
    allAzureVnets(
        "Vnet request params for Azure."
        vnetRequest: vnetRequest!
    ): [String!]!
    "List of the Cloud Direct Sites accessible by the current user."
    allCloudDirectSites: [CloudDirectSite!]!
    allClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Global SLAs used by a cluster which are protecting at least one object."
    allClusterGlobalSlas(
        "CDM Cluster UUID"
        cdmClusterUUID: String!
    ): [SlaInfo!]!
    "All replication targets for a cluster."
    allClusterReplicationTargets(
        "UUID of the cluster."
        clusterUuid: UUID!
    ): [ClusterReplicationTarget!]!
    "Current permissions are the set of permissions the client has given to Rubrik. This will retrieve permissions for all the features currently active in the account. If these permissions are older than the latest set of permissions we require, the account will go in MISSING PERMISSIONS state"
    allCurrentFeaturePermissionsForCloudAccounts(
        "List of Rubrik IDs of the cloud accounts."
        cloudAccountIds: [UUID!]!,
        "Vendor of the cloud account."
        cloudVendor: CloudVendorEnum!
    ): [CloudAccountFeaturePermission!]!
    "List of all DB parameter groups in a given region. Refers to container for engine configuration that applies to one or more DB Instances. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html."
    allDbParameterGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngineEnum!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [DbParameterGroup!]!
    "All DB subnet groups in a given region. Refers to logical isolation of RDS on a network. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html."
    allDbSubnetGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [SubnetGroup!]!
    "List of all key pairs for a given region. A key pair, consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an EC2 instance. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html."
    allEc2KeyPairsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [String!]!
    "List user activity for a specific file on a specific snapshot."
    allFileActivities(
        "Sorts to apply when listing a file's user activities."
        FileActivitiesSort: FileActivitiesSort!,
        "Request for getting user activity for a specific path on a specific snapshot."
        ListFileActivitiesInput: ListFileActivitiesInput!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserActivityResultConnection!
    allHostedAzureRegions: AzureRegionsResp!
    "List of encryption keys in the specified region on the specified AWS Native account. All the encrytion keys listed are managed by AWS Key Management System (KMS). For more information, see https://aws.amazon.com/kms/."
    allKmsEncryptionKeysByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [KmsEncryptionKey!]!
    "Latest Permissions are the most recent set of permissions we require for a feature. This will retrieve the permissions for all the features currently active in the accounts along with the features passed in the call."
    allLatestFeaturePermissionsForCloudAccounts(
        "List of Rubrik IDs of the cloud accounts."
        cloudAccountIds: [UUID!]!,
        "Vendor of the cloud account."
        cloudVendor: CloudVendorEnum!,
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!
    ): [CloudAccountFeaturePermission!]!
    "Provides a list of database files to be restored for the specified restore or export operation."
    allMssqlDatabaseRestoreFiles(
        "Input for V1MssqlGetRestoreFilesV1"
        input: MssqlGetRestoreFilesV1Input!
    ): V1MssqlGetRestoreFilesV1Response!
    "All AD Groups belonging to the O365 organization."
    allO365AdGroups(
        "AD group search filter."
        adGroupSearchFilter: String!,
        orgId: UUID!
    ): [ADGroup!]!
    allO365OrgStatuses: [O365OrgInfo!]!
    "List of all RDS option groups in a given region. Refers to settings of how a particular option works for a RDS Instance. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html"
    allOptionGroupsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngineEnum!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "Major version of the option group engine."
        majorEngineVersion: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [OptionGroup!]!
    allReportConfigs(dataView: DataViewTypeEnum): [ReportConfig!]!
    "Retrieves a list og all resource groups in the specified account."
    allResourceGroupsFromAzure(
        "The Native ID of the subscription."
        azureSubscriptionNativeId: UUID!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!
    ): [AzureResourceGroup!]!
    "List of all S3 bucket names across regions for the AWS Native account."
    allS3BucketsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!
    ): [String!]!
    "All PVCs in a snapshot."
    allSnapshotPvcs(
        "the fid of the snappable"
        snappableId: UUID!,
        "The snapshot ID."
        snapshotId: String!
    ): [PvcInformation!]!
    "Details of the unexpired snapshot closest to the specified point in time for each provided snappable ID."
    allSnapshotsClosestToPointInTime(
        "The time to search after (inclusive)."
        afterTime: DateTime,
        "The time to search before (inclusive)."
        beforeTime: DateTime,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Indicate fetched snapshots should include linked ones. if it is true, the return snapshots should include linked ones. "
        includeLinked: Boolean,
        "Snappable UUIDs."
        snappableIds: [String!]!
    ): [ClosestSnapshotSearchResult!]!
    allUsersOnAccountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        emailFilter: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        roleIdsFilter: [UUID!],
        sortBy: UserFieldEnum = Email,
        "sort order"
        sortOrder: SortOrderEnum
    ): UserConnection!
    "List of all Virtual Private Clouds (VPCs) in the AWS Native account, classified by region."
    allVpcsByRegionFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): [AwsVpc!]!
    "List of all Virtual Private Clouds (VPCs) in the AWS Native account."
    allVpcsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID
    ): [AwsVpc!]!
    "Amazon Machine Image (AMI) type for export of an archived EC2 Instance snapshot. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html."
    amiTypeForAwsNativeArchivedSnapshotExport(
        "Input for AmiTypeForAwsNativeArchivedSnapshotExport."
        input: AmiTypeForAwsNativeArchivedSnapshotExportInput!
    ): AmiTypeForAwsNativeArchivedSnapshotExportReply!
    analyzerGroupConnection: AnalyzerGroupConnection!
    "Returns which policies are using each analyzer"
    analyzerUsageConnection: AnalyzerUsageConnection!
    anomalyResult(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): AnomalyResult!
    anomalyResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort anomaly results by field"
        sortBy: AnomalyResultSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum,
        timezoneOffset: Float = 0.0
    ): AnomalyResultConnection!
    anomalyResultGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter anomaly results by input"
        filter: AnomalyResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group anomaly results by field"
        groupBy: AnomalyResultGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): AnomalyResultGroupByConnection!
    anomalyResultOpt(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): AnomalyResult
    appBlueprintOngoingFailoverTaskchainUuids(fids: [UUID!]!): GetAppBlueprintOngoingFailoverTaskchainUuidsRsp!
    appBlueprintSnapshotImageInfos(appSnapshotFids: [UUID!]!): GetAppBlueprintSnapshotCloudImagesRsp!
    appflowsSummary: AppflowsSummary!
    "List of AWS cloud accounts and the features for each account, classified by ID."
    awsCloudAccountWithFeatures(
        "Arguments for get cloud account."
        awsCloudAccountArg: AwsCloudAccountWithFeaturesInput!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!
    ): AwsCloudAccountWithFeatures!
    awsComputeSettings(
        "Corresponds to Compute Setting Id in Polaris tables"
        computeSettingId: UUID!
    ): AwsComputeSettings!
    awsComputeSettingsList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of compute settings"
        filter: [AwsCloudComputeSettingFilterInput!],
        "Specification on how to sort a list of compute settings"
        sortBy: AwsCloudComputeSettingSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [AwsComputeSettings!]!
    "Refers to the AWS Native account that serves as a container for all your AWS resources. The AWS Native account contains information about the metadata related to the AWS Native resources."
    awsNativeAccount(
        "The Rubrik ID for the AWS Native account."
        awsNativeAccountRubrikId: UUID!,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!
    ): AwsNativeAccount!
    "Paginated list of all AWS Native accounts."
    awsNativeAccounts(
        accountFilters: AwsNativeAccountFilters,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: OperationEnum,
        "Cloud native protection feature."
        awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS accounts."
        sortBy: AwsNativeAccountSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeAccountConnection!
    "Refers to the Amazon Elastic Block Store (EBS) Volume represented by a specific ID. For more information, see https://aws.amazon.com/ebs/."
    awsNativeEbsVolume(
        "Rubrik ID for the AWS EBS Volume object."
        ebsVolumeRubrikId: UUID!
    ): AwsNativeEbsVolume!
    "Paginated list of all AWS EBS Volumes."
    awsNativeEbsVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ebsVolumeFilters: AwsNativeEbsVolumeFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "Paginated list of all AWS EBS Volumes by name or substring of name."
    awsNativeEbsVolumesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "The native name for the AWS EBS Volume object."
        ebsVolumeName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EBS volumes."
        sortBy: AwsNativeEbsVolumeSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEbsVolumeConnection!
    "Refers to Amazon Elastic Compute Cloud (EC2) Instance represented by a specific ID. For more information, see https://aws.amazon.com/ec2/."
    awsNativeEc2Instance(
        "Rubrik ID for the AWS EC2 Instance."
        ec2InstanceRubrikId: UUID!
    ): AwsNativeEc2Instance!
    "Paginated list of all AWS EC2 Instances."
    awsNativeEc2Instances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        ec2InstanceFilters: AwsNativeEc2InstanceFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "Paginated list of all AWS EC2 Instances by name or substring of name."
    awsNativeEc2InstancesByName(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Native name for the AWS EC2 Instance object."
        ec2InstanceName: String!,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of AWS EC2 instances."
        sortBy: AwsNativeEc2InstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeEc2InstanceConnection!
    "Refers to the default values for the export operation of the RDS DB Instance in the AWS Native account."
    awsNativeRdsExportDefaults(
        "Specifies whether the export of the instance is manual or Point-in-Time."
        isPointInTime: Boolean!,
        "The Rubrik ID for the AWS RDS Instance."
        rdsInstanceRubrikId: UUID!,
        "ID of the snapshot if the export is manual."
        snapshotId: String
    ): RdsInstanceExportDefaults!
    "Refers to AWS Relational Database Service (RDS) represented by a specific ID. For more information, see https://aws.amazon.com/rds/."
    awsNativeRdsInstance(
        "The Rubrik ID for the AWS RDS Instance."
        rdsInstanceRubrikId: UUID!
    ): AwsNativeRdsInstance!
    "Paginated list of AWS RDS Instances on AWS Native account."
    awsNativeRdsInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        rdsInstanceFilters: AwsNativeRdsInstanceFilters,
        "Sort fields for list of AWS RDS instances."
        sortBy: AwsNativeRdsInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AwsNativeRdsInstanceConnection!
    "Point-in-Time (PiT) restore window of the RDS Instance in the AWS Native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information,see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html."
    awsNativeRdsPointInTimeRestoreWindow(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): AwsNativeRdsPointInTimeRestoreWindow!
    "Retrieves the configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account."
    azureCloudAccountPermissionConfig(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!
    ): AzureCloudAccountPermissionConfigResponse!
    "Retrieves the details of the Azure tenant and all the subscriptions of the tenant, for a feature."
    azureCloudAccountTenant(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "Search text for subscription name and native ID."
        subscriptionSearchText: String!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatusEnum!]!,
        "Tenant ID of the Azure tenant."
        tenantId: UUID!
    ): AzureCloudAccountTenant!
    "Retrieves details about the Azure cloud account tenant including the Exocompute configurations for the tenant subscriptions, for a specified feature."
    azureCloudAccountTenantWithExoConfigs(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "Search text for subscription name and native ID."
        subscriptionSearchText: String!,
        "List of subscription status filters to apply."
        subscriptionStatusFilters: [CloudAccountStatusEnum!]!,
        "Tenant ID of the Azure tenant."
        tenantId: UUID!
    ): AzureCloudAccountTenantWithExoConfigs!
    "Retrieves an Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview."
    azureNativeManagedDisk(
        "Rubrik ID of the Azure Managed Disk."
        azureManagedDiskRubrikId: UUID!
    ): AzureNativeManagedDisk!
    "Retrieves a paginated list of all Azure Native Managed Disks."
    azureNativeManagedDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: AzureNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure disks."
        sortBy: AzureNativeDiskSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeManagedDiskConnection!
    "Retrieves an Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside."
    azureNativeResourceGroup(
        "Resource Group ID of Virtual Machine (VM) or Disk."
        resourceGroupId: UUID!
    ): AzureNativeResourceGroup!
    "Retrieves a paginated list of all Azure Native Resource Groups."
    azureNativeResourceGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for listing Azure resource groups"
        commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "List of protected object types."
        protectedObjectTypes: [SnappableLevelHierarchyTypeEnum!],
        "Sort fields for listing Azure resource groups."
        sortBy: AzureNativeCommonResourceGroupSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): AzureNativeResourceGroupConnection!
    "Retrieves an Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources."
    azureNativeSubscription(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!
    ): AzureNativeSubscription!
    "Retrieves a paginated list of all Azure Native Subscriptions."
    azureNativeSubscriptions(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters according to the operation given."
        authorizedOperationFilter: OperationEnum,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Snappable hierarchy."
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        "Sort fields for list of Azure subscriptions."
        sortBy: AzureNativeSubscriptionSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        subscriptionFilters: AzureNativeSubscriptionFilters
    ): AzureNativeSubscriptionConnection!
    "Retrieves an Azure Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/."
    azureNativeVirtualMachine(
        "Rubrik ID of the Azure Virtual Machine."
        azureVirtualMachineRubrikId: UUID!
    ): AzureNativeVirtualMachine!
    "Retrieves a paginated list of all Azure Virtual Machines (VMs)."
    azureNativeVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure virtual machines."
        sortBy: AzureNativeVirtualMachineSortFieldsEnum,
        sortOrder: HierarchySortOrder,
        virtualMachineFilters: AzureNativeVirtualMachineFilters
    ): AzureNativeVirtualMachineConnection!
    azureO365CheckNSGOutboundRules(resourceGroupName: String!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSecurityGroupResp!
    azureO365CheckNetworkSubnet(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetResp!
    azureO365CheckResourceGroupName(groupName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckStorageAccountAccessibility(groupName: String!, storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckStorageAccountName(storage_account_name: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckSubscriptionQuota(regionName: String!, subscriptionId: UUID!, tenantId: String!): AzureResourceAvailabilityResp!
    azureO365CheckVirtualNetworkName(groupName: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureResourceAvailabilityResp!
    azureO365Exocompute(exocomputeClusterId: String!, orgId: UUID!): GetAzureO365ExocomputeResp!
    azureO365GetAzureHostType: GetAzureHostTypeResp!
    azureO365GetNetworkSubnetUnusedAddr(resourceGroupName: String!, strict_addr_check: Boolean!, subnet_name: String!, subscriptionId: UUID!, tenantId: String!, vnet_name: String!): AzureNetworkSubnetUnusedAddrResp!
    azureO365ValidateUserRoles(subscriptionId: UUID!, tenantId: String!): AzureUserRoleResp!
    azureRegions(subscriptionId: UUID!, tenantId: String!): RegionConnection!
    azureResourceGroups(subscriptionId: UUID!, tenantId: String!): ResourceGroupConnection!
    "Retrieves an Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more information, see https://azure.microsoft.com/en-us/products/azure-sql/database/."
    azureSqlDatabase(
        "Rubrik ID of the Azure SQL Database."
        azureSqlDatabaseRubrikId: UUID!
    ): AzureSqlDatabaseDb!
    "Point-in-Time (PiT) restore window of the Azure SQL Database instance in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://azure.microsoft.com/en-in/blog/azure-sql-database-point-in-time-restore/."
    azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Name of the Azure SQL Database server."
        azureSqlDatabaseServerName: String!,
        "Resource Group Name"
        resourceGroupName: String!,
        "Subscription ID"
        subscriptionId: UUID!
    ): AzureNativeSqlDatabasePointInTimeRestoreWindow!
    "Retrieves an Azure SQL Database Server. Refers to the server that contains the Azure SQL Databases. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers."
    azureSqlDatabaseServer(
        "Rubrik ID of the Azure SQL Database Server."
        azureSqlDatabaseServerRubrikId: UUID!
    ): AzureSqlDatabaseServer!
    "Retrieves a paginated list of all Azure SQL Database Servers."
    azureSqlDatabaseServers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Database Servers."
        azureSqlDatabaseServerFilters: AzureSqlDatabaseServerFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Database Servers."
        sortBy: AzureSqlDatabaseServerSortFields,
        sortOrder: HierarchySortOrder
    ): AzureSqlDatabaseServerConnection!
    "Retrieves a paginated list of all Azure SQL Databases."
    azureSqlDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Databases."
        azureSqlDatabaseFilters: AzureSqlDatabaseFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Databases."
        sortBy: AzureSqlDatabaseSortFields,
        sortOrder: HierarchySortOrder
    ): AzureSqlDatabaseDbConnection!
    "Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview."
    azureSqlManagedInstanceDatabase(
        "Rubrik ID of the Azure SQL Managed Instance Database."
        azureSqlManagedInstanceDatabaseRubrikId: UUID!
    ): AzureSqlManagedInstanceDatabase!
    "Retrieves a paginated list of all Azure SQL Managed Instance Databases."
    azureSqlManagedInstanceDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Managed Instance Databases."
        azureSqlManagedInstanceDatabaseFilters: AzureSqlManagedInstanceDatabaseFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Managed Instance Databases."
        sortBy: AzureSqlManagedInstanceDatabaseSortFields,
        sortOrder: HierarchySortOrder
    ): AzureSqlManagedInstanceDatabaseConnection!
    "Point-in-Time (PiT) restore window of the Azure SQL Managed Instance database in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/point-in-time-restore?tabs=azure-portal."
    azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(
        "Name of the Azure SQL Database."
        azureSqlDatabaseName: String!,
        "Name of the Azure SQL Managed Instance."
        azureSqlManagedInstanceName: String!,
        "Resource Group Name"
        resourceGroupName: String!,
        "Subscription ID"
        subscriptionId: UUID!
    ): AzureNativeSqlDatabasePointInTimeRestoreWindow!
    "Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of."
    azureSqlManagedInstanceServer(
        "Rubrik ID of the Azure SQL Managed Instance Server."
        azureSqlManagedInstanceServerRubrikId: UUID!
    ): AzureSqlManagedInstanceServer!
    "Retrieves a paginated list of all Azure SQL Managed Instance Servers."
    azureSqlManagedInstanceServers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for listing Azure SQL Managed Instance Servers."
        azureSqlManagedInstanceServerFilters: AzureSqlManagedInstanceServerFilters,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of Azure SQL Managed Instance Servers."
        sortBy: AzureSqlManagedInstanceServerSortFields,
        sortOrder: HierarchySortOrder
    ): AzureSqlManagedInstanceServerConnection!
    azureStorageAccounts(regionName: String!, subscriptionId: UUID!, tenantId: String!): StorageAccountConnection!
    azureSubnets(subscriptionId: UUID!, tenantId: String!, vNetId: String!): SubnetConnection!
    azureSubscriptions(tenantId: String!): AzureSubscriptionConnection!
    azureVNets(regionName: String!, subscriptionId: UUID!, tenantId: String!): VNetConnection!
    blueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Blueprint!
    blueprintConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): BlueprintConnection!
    blueprintNew(
        "The Polaris UUID for the object."
        fid: UUID!
    ): BlueprintNew!
    blueprintNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The status of the blueprint failover."
        failoverStatusOpt: FailoverStatusEnum,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        "The id of the source location."
        sourceLocationIdOpt: String,
        "The status of the blueprint."
        statusOpt: BlueprintStatusEnum,
        "The id of the intended remote target location."
        targetLocationIdOpt: String
    ): BlueprintNewConnection!
    "list the recovery specs associated with the given blueprint"
    blueprintRecoverySpecs(
        "the id of the blueprint"
        blueprintId: UUID!,
        "Get invalid recovery spec if true."
        getInvalidSpecs: Boolean,
        "Ignore invalid recovery specs or raise an error."
        ignoreErrors: Boolean,
        "The list of snappable recovery point infos."
        snappableInfos: [SnappableInfoType!]!,
        "Validate the recovery specs if true."
        validate: Boolean
    ): BlueprintRecoverySpecs!
    "describes the Blueprint resource specs"
    blueprintResourceSpec(
        "the id of the blueprint"
        blueprintId: UUID!,
        "The list of snappable recovery point infos."
        snappableInfos: [SnappableInfoType!]!
    ): [ResourceSpec!]!
    "Bootstrap status of cluster."
    bootstrapStatus(
        "BootstrapStatusReqInput params."
        BootstrapStatus: BootstrapStatusReq!
    ): BootstrapStatusReply!
    browseCalendar(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "List all files and directories in a given pathwith the given prefix in name"
    browseCloudNativeSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Name prefix for searching for files within a snapshot"
        searchPrefix: String,
        "Id of the snapshot to be searched/browsed"
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    "Browse diff fmd under given path"
    browseDiffFmd(
        "Root path to browse changes of fmd."
        browseDiffPath: String!,
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): DiffFMDReply!
    browseFilesetSnapshot(
        "ID of snapshot."
        id: String!,
        "Maximum number of entries in the response."
        limit: Int,
        "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
        offset: Int,
        "The absolute path of the starting point for the directory listing."
        path: String!
    ): BrowseResponseListResponse!
    browseFolder(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String!,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    browseO365TeamConvChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        excludeArchived: Boolean!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        orgId: UUID!,
        snappableFid: UUID!,
        "snapshotFid arg which is of optional type"
        snapshotFidOpt: UUID
    ): O365TeamConvChannelConnection!
    browseOnedrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    browseSharepointDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Browse list objects"
    browseSharepointList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    """

    Lists all files and directories in a given path

    Supported in v7.0
    Lists all files and directories in a given path.
    """
    browseSnapMirrorCloudSnapshot(
        "Input for V1BrowseSnapMirrorCloudSnapshot"
        input: BrowseSnapMirrorCloudSnapshotInput!
    ): BrowseSnapMirrorCloudSnapshotReply!
    "Returns a list files whose name is prefixed by the query in the given snapshot"
    browseSnapshotFileConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Prefix arg for searching for files within a snapshot"
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): SnapshotFileConnection!
    browseTeamsChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365TeamsChannelConnection!
    browseTeamsDrive(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        folderId: String,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    "Paginated list of cassandra column families."
    cassandraColumnFamilies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): CassandraColumnFamilyConnection!
    "Details of a cassandra column family."
    cassandraColumnFamily(
        "The Polaris UUID for the object."
        fid: UUID!
    ): CassandraColumnFamily!
    "Get Recoverable Range of a Cassandra Column Family."
    cassandraColumnFamilyRecoverableRange(
        "Input for V2GetMosaicRecoverableRange"
        input: GetMosaicRecoverableRangeInput!
    ): GetMosaicRecoverableRangeResponse!
    "Get Schema of a Cassandra Column Family."
    cassandraColumnFamilySchema(
        "Input for V2GetMosaicTableSchema"
        input: GetMosaicTableSchemaInput!
    ): GetSchemaResponse!
    "Details of a cassandra keyspace."
    cassandraKeyspace(
        "The Polaris UUID for the object."
        fid: UUID!
    ): CassandraKeyspace!
    "Paginated list of cassandra keyspaces."
    cassandraKeyspaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): CassandraKeyspaceConnection!
    "Details of a cassandra source."
    cassandraSource(
        "The Polaris UUID for the object."
        fid: UUID!
    ): CassandraSource!
    "Paginated list of cassandra sources."
    cassandraSources(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): CassandraSourceConnection!
    cdmHierarchySnappableNew(snappableFid: UUID!): CdmHierarchySnappableNew!
    cdmHierarchySnappablesNew(fids: [UUID!]!): [CdmHierarchySnappableNew!]!
    cdmInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): CdmInventorySubHierarchyRoot!
    "Browse Certificates"
    certificateConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a Certificate"
        searchTerm: String,
        "Sort"
        sortBy: CertMgmtSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): CertificateConnection!
    "Certificates having private key."
    certificatesWithKey: CertificateConnection!
    "Check if label rule name is unique or not"
    checkCloudNativeLabelRuleNameUniqueness(
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "Check if tag rule name is unique or not"
    checkCloudNativeTagRuleNameUniqueness(
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        "Name for the rule"
        ruleName: String!
    ): IsCloudNativeTagRuleNameUniqueReply!
    "check the child vm guestOS for given app blueprint"
    checkGuestOsForAppBlueprint(
        "the id of the blueprint"
        blueprintId: UUID!
    ): CheckGuestOsReply!
    classificationBannerSettings: ClassificationBannerSettings!
    classificationLoginSettings: ClassificationLoginSettings!
    cloudAccount(
        "Corresponds to Cloud Account Id in Polaris tables"
        cloudAccountId: UUID!
    ): CloudAccount!
    cloudAccountList(
        "Filters and shows cloud accounts for a specific use-cases or features. Default value: [ARCHIVAL]"
        features: [CloudAccountFeatureEnum!],
        filter: [CloudAccountFilterInput!],
        sortBy: CloudAccountSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [CloudAccount!]!
    "Queries whether Polaris has the required permissions for a particular feature."
    cloudNativeCheckRequiredPermissionsForFeature(
        "Cloud native account ID"
        cloudNativeAccountId: String!,
        "Feature for which required permissions have to be checked."
        featurePermissionCheck: CloudNativeFeatureForPermissionsCheck!
    ): Boolean!
    "Fetches the URLs for the windows, linux and debian RBA installers"
    cloudNativeGetRBAInstallers: CreateRBAInstallerReply!
    "Returns a list of cloud native label keys matched by substring"
    cloudNativeLabelKeys(
        "key substring for which you want to search keys"
        keySubStr: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!
    ): [String!]!
    "Returns a list of cloud native label values matched by substring"
    cloudNativeLabelValues(
        "key value used only when searching for values"
        key: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        "value substring for which you want to search values"
        valueSubStr: String!
    ): [String!]!
    "Details of snapshot types available for recovery."
    cloudNativeSnapshotDetailsForRecovery(
        "Snapshot UUID"
        snapshotId: UUID!
    ): CloudNativeSnapshotDetailsForRecoveryReply!
    "Returns a list of cloud native tag keys matched by substring"
    cloudNativeTagKeys(
        "key substring for which you want to search keys"
        keySubStr: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!
    ): [String!]!
    "Returns a list of cloud native tag values matched by substring"
    cloudNativeTagValues(
        "key value used only when searching for values"
        key: String!,
        "number of results to return"
        limit: Int!,
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        "value substring for which you want to search values"
        valueSubStr: String!
    ): [String!]!
    cluster(
        "The id of the cluster"
        clusterUuid: UUID!
    ): Cluster!
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    clusterGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: ClusterGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): ClusterGroupByConnection!
    clusterGroupByUpgradeInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): UpgradeInfoGroupByConnection!
    clusterSlaDomainConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainConnection!
    clusterSlaDomainFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClusterSlaDomainForFilterConnection!
    clusterTypeList: [GroupCount!]!
    clusterWithUpgradesInfo(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc,
        upgradeFilter: CdmUpgradeInfoFilterInput
    ): ClusterConnection!
    connectedClusterList(
        "Specification to filter cluster based on type"
        clusterFilterArg: ClusterTypeEnum
    ): [DataLocationSupportedCluster!]!
    countOfObjectsProtectedBySlas(
        filter: [Filter!],
        "Corresponds to optional object root forever UUID, none value is assumed to be the global hierarchy root"
        rootOptionalFid: UUID,
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CountOfObjectsProtectedBySLAsResult!
    "Return details for one crawl"
    crawl(crawlId: String!): Crawl!
    "Return crawls for an account"
    crawlConnection: CrawlConnection!
    "Browse CSRs"
    csrConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Search for a CSR"
        searchTerm: String,
        "Sort"
        sortBy: CertMgmtSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): CsrConnection!
    currentIpAddress: String!
    currentUser: User!
    customAnalyzer(analyzerId: String!): Analyzer!
    "Return hits grouped by analyzer and policy"
    dashboardSummary(getWhitelistedResults: Boolean!): GetDashboardSummaryReply!
    dataViewMetadata: [dataViewMetadata!]!
    "Return permissions associated with a path"
    datagovSecDesc(
        "Skip converting SIDs in response to friendly names"
        skipResolveSids: Boolean,
        snappableFid: String!,
        snapshotFid: String!,
        stdPath: String!
    ): QuerySDDLReply!
    "Polaris deployment version."
    deploymentVersion: String!
    "Return timeline data for all policies of an account"
    discoveryTimeline(endDay: String!, getWhitelistedResults: Boolean!, startDay: String!, timezone: String!): GetPoliciesTimelineReply!
    "Checks if a resource group with the specified name exists in the specified account."
    doesAzureNativeResourceGroupExist(
        "The Native ID of the subscription."
        azureSubscriptionNativeId: UUID!,
        "The Rubrik ID of the cloud account."
        cloudAccountId: UUID!,
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "The name of the resource group."
        resourceGroupName: String!
    ): Boolean!
    downloadActiveSlaWithReplicationCsv(
        "CDM Cluster UUID"
        cdmClusterUUID: String!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): DownloadActiveSlaWithReplicationCsvReply!
    "Download cdm upgrades table pdf"
    downloadCdmUpgradesPdf(
        "Filters for cdm upgrades page for pdf generation"
        downloadFilter: DownloadCdmUpgradesPdfFiltersInput
    ): DownloadCdmUpgradesPdfReply!
    "Get Status of download package job"
    downloadPackageStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): DownloadPackageStatusReply!
    downloadReportLink(config: CustomReportCreate, id: Int!): DownloadLink!
    downloadReportPDFLink(config: CustomReportCreate, id: Int!): DownloadLink!
    downloadedVersionList: [GroupCount!]!
    dummyFieldWithAdminOnlyTag: Boolean!
    ec2Blueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Ec2Blueprint!
    eventDigest(recipientUserIDs: [String!]!): [EventDigest!]!
    "failover"
    failover(
        "failover ID"
        failoverId: String!
    ): Failover
    failoverAllSourceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverSourceConnection!
    failoverAllTargetSiteConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): FailoverTargetSiteConnection!
    "Get details of the given failover cluster app."
    failoverClusterApp(
        "The Polaris UUID for the object."
        fid: UUID!
    ): FailoverClusterApp!
    "Get a summary of all failover cluster apps."
    failoverClusterApps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): FailoverClusterAppConnection!
    "Get a summary of all failover cluster top level descendants."
    failoverClusterTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): FailoverClusterTopLevelDescendantTypeConnection!
    failoverConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort appflows failover jobs by field"
        sortBy: FailoverSortByEnum = AppBlueprintName,
        "failover jobs sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): FailoverConnection!
    failoverGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter appflows failover jobs by input"
        filter: FailoverFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group appflows failover jobs by a field"
        groupBy: FailoverGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): FailoverGroupByConnection!
    failoverJobReports(
        "The Polaris UUID for the object."
        fid: UUID!
    ): [FailoverJobReport!]!
    "The report for the failover job."
    failoverReport(
        "failover report ID"
        failoverReportId: String!
    ): FailoverReport
    "Evaluate a single feature flag and get the result"
    featureFlag(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityTypeEnum!,
        "Name of flag to evaluate"
        flagName: FeatureFlagNameEnum!
    ): FeatureFlag!
    "Evaluate all known feature flags."
    featureFlagAll(
        "List of flag names to evaluate"
        entityContext: [FeatureFlagContextField!],
        "The type of entity context to evaluate against. The value of this arg determines how the entity ID is inferred."
        entityType: FeatureFlagEntityTypeEnum!
    ): FeatureFlagAll!
    "Get names of feature flags that surfaced in APIs"
    featureFlagNames: [String!]!
    "Status of the federated login."
    federatedLoginStatus: FederatedLoginStatus!
    "Fetch fake data for testing purpose"
    fetchFakeData(
        "Buffer space allocated before making an RPC."
        preProcessingBufferBytes: Long,
        "Time taken by the request to serve the response"
        responsePeriodMs: Long!,
        "Approx size of the response payload."
        responseSizeBytes: Long,
        "Whether the request blocks the processing thread."
        shouldBlock: Boolean!
    ): FakeDataConnection!
    filesetSnapshot(
        "ID of snapshot."
        id: String!,
        "Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true."
        verbose: Boolean
    ): FilesetSnapshotDetail!
    filesetTemplate(
        "The Polaris UUID for the object."
        fid: UUID!
    ): FilesetTemplate!
    filesetTemplateConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host root type"
        hostRoot: HostRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): FilesetTemplateConnection!
    "Check Gcp Projects permissions for addition."
    gcpCloudAccountCheckProjectPermissionsForAddition(
        "List of Gcp project native Ids."
        projectIds: [String!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpCloudAccountMissingPermissionsForAddition!]!
    "List permissions required to enable the given feature"
    gcpCloudAccountListPermissions(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!
    ): [GcpPermission!]!
    "Get the details of the Gcp project configured for a feature"
    gcpCloudAccountListProjects(
        "Cloud Account Feature. A feature refers to the Polaris feature that Rubrik provides."
        feature: CloudAccountFeatureEnum!,
        "Search text for project name, native id and number."
        projectSearchText: String!,
        "List of project status filters to apply."
        projectStatusFilters: [CloudAccountStatusEnum!]!
    ): [GcpCloudAccountProjectDetail!]!
    "List Gcp Projects to add after successful authorization."
    gcpCloudAccountListProjectsForOAuth(
        "Whether to check permission of projects required for addition"
        checkPermissions: Boolean!,
        "Cloud Account Features."
        features: [CloudAccountFeatureEnum!]!,
        "Session ID of the current OAuth session."
        sessionId: String!
    ): [GcpListProjectsForOAuthResponse!]!
    "Returns the service account corresponding to global credentials. Return empty string if global credentials are absent"
    gcpGetDefaultCredentialsServiceAccount: String!
    "Lists compatible machine types for instance."
    gcpNativeCompatibleMachineTypesList(
        "UUID of snapshot"
        snapshotId: UUID!,
        "The zone of the to-be-created instance."
        targetZone: String!
    ): [String!]!
    "Get details of a GCP Disk"
    gcpNativeDisk(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeDisk!
    "Get list of GCP disks"
    gcpNativeDiskConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        diskFilters: GcpNativeDiskFilters,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP disks."
        sortBy: GcpNativeDiskSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeDiskConnection!
    "Get details of a GCE Instance"
    gcpNativeGceInstance(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeGCEInstance!
    "Get list of GCE instances"
    gcpNativeGceInstanceConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        gceInstanceFilters: GcpNativeGceInstanceFilters,
        "Returns the last n elements from the list."
        last: Int,
        "Sort fields for list of GCP GCE instances."
        sortBy: GcpNativeGCEInstanceSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeGCEInstanceConnection!
    "lists GCP KMS Crypto keys accessible in the provided region"
    gcpNativeListAvailableKMSCryptoKeys(
        "UUID of the Project"
        projectId: UUID!,
        "native name of GCP region"
        regionName: String!
    ): [KMSCryptoKey!]!
    "Lists networks available in a GCP project along with subnetworks and firewall rules."
    gcpNativeNetworksList(
        "UUID of the Project"
        projectId: UUID!
    ): [GcpNativeNetwork!]!
    "Get details of a GCP Project"
    gcpNativeProject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): GcpNativeProject!
    "Get list of GCP projects"
    gcpNativeProjectConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        authorizedOperationFilter: OperationEnum,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        projectFilters: GcpNativeProjectFilters,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        "Sort fields for list of GCP projects."
        sortBy: GcpNativeProjectSortFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GcpNativeProjectConnection!
    "lists all the GCP projects with accessible networks in this service project"
    gcpNativeProjectsWithAccessibleNetworks(
        "UUID of the Project"
        projectId: UUID!
    ): [NetworkHostProject!]!
    "Lists regions available to a GCP project along with zones"
    gcpNativeRegionsList(
        "UUID of the Project"
        projectId: UUID!
    ): [GcpNativeRegion!]!
    "lists distinct regions and zones of the GCP disks stored with Polaris"
    gcpNativeStoredDiskLocations(
        "UUID of the Project (Optional)"
        projectId: UUID
    ): ListStoredDiskLocationsReply!
    "lists all the distinct machine types of the GCP instances stored with Polaris"
    gcpNativeStoredMachineTypes: [String!]!
    "lists all the distinct machine types of the GCP instances stored with Polaris"
    gcpNativeStoredMachineTypesInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    "lists all the distinct network names of the GCP instances stored with Polaris"
    gcpNativeStoredNetworkNames: [String!]!
    "lists all the distinct network names of the GCP instances stored with Polaris"
    gcpNativeStoredNetworkNamesInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    "lists all the distinct regions of the GCP instances stored with Polaris"
    gcpNativeStoredRegions: [String!]!
    "lists all the distinct regions of the GCP instances stored with Polaris"
    gcpNativeStoredRegionsInProject(
        "UUID of the Project"
        projectId: UUID!
    ): [String!]!
    geoLocationList: [GroupCount!]!
    "Obtain account settings value."
    getAccountSettingValue(
        "Name of component that uses ASP in account setting table"
        aspComponent: ComponentEnum!,
        "Name of parameter (ASP) in account setting table"
        aspName: String!
    ): ASPValue!
    getAllRolesInOrgConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        nameFilter: String,
        sortBy: RoleFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): RoleConnection!
    getAllTemplatesInOrgConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        nameFilter: String
    ): RoleTemplateConnection!
    getAllUsersOnAccount(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [User!]!
    getAuthorizationsForGlobalResource: [OperationEnum!]!
    getAuthorizationsForObject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): [OperationEnum!]!
    "Get CDM release details from support portal for a given list of clusters."
    getCdmReleaseDetailsForClusterFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get CDM release details from support portal for a given list of clusters specific to a target version."
    getCdmReleaseDetailsForVersionFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "List of cluster uuids"
        listClusterUuid: [UUID!]!,
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "Get available versions on support portal for a cluster"
    getCdmReleaseDetailsFromSupportPortal(
        "Should fetch version details"
        fetchLinks: Boolean! = false,
        "Filter to include only those releases released after source version"
        filterAfterSource: Boolean! = false,
        "Should filter upgradeable versions"
        filterUpgradeable: Boolean! = true,
        "Prefix filter for available versions"
        filterVersion: String! = "",
        "Number of nodes in the cluster"
        nodeCount: Long! = 4,
        "Platform type of the cluster"
        platform: String! = "",
        "Should show all versions"
        shouldShowAll: Boolean! = true,
        "sort order"
        sortOrder: SortOrderEnum,
        "Source version of the cluster"
        sourceVersion: String! = ""
    ): CdmUpgradeReleaseDetailsFromSupportPortalReply!
    "List of snapshots for which file recovery is available"
    getCloudNativeFileRecoveryEligibleSnapshots(
        "Snappable ID"
        snappableId: UUID!
    ): [String!]!
    "Get cloud native label rules"
    getCloudNativeLabelRules(
        "Fields and values according to which rules will be filtered."
        filters: [CloudNativeFilter!],
        "Type of managed object on which label rule will be applied."
        objectType: CloudNativeLabelObjectType!,
        sortBy: CloudNativeTagRuleSortByFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GetCloudNativeLabelRulesReply!
    "Get cloud native tag rules"
    getCloudNativeTagRules(
        "Fields and values according to which rules will be filtered."
        filters: [CloudNativeFilter!],
        "Type of managed object on which tag rule will be applied."
        objectType: CloudNativeTagObjectType!,
        sortBy: CloudNativeTagRuleSortByFieldsEnum,
        sortOrder: HierarchySortOrder
    ): GetCloudNativeTagRulesReply!
    getClusterNodes(
        "The id of the cluster"
        clusterUuid: UUID!
    ): NodeStatusListResp!
    "Get DNS server addresses."
    getDns: [String!]!
    getGroupCountByCdmClusterStatus: GroupCountListWithTotal!
    getGroupCountByPrechecksStatus: [GroupCount!]!
    getGroupCountByUpgradeJobStatus: [GroupCount!]!
    getGroupCountByVersionStatus: [GroupCount!]!
    getHostDiagnosis(
        "ID assigned to the host object."
        id: String!
    ): HostDiagnosisSummary!
    getKorgTaskchainStatus(taskchainId: String!): GetTaskchainStatusReply!
    "Get NTP server addresses."
    getNtp: [String!]!
    getO365ServiceStatus(orgID: UUID): GetO365ServiceStatusResp!
    getO365StorageStats(orgID: UUID): GetO365StorageStatsResp!
    getPermissions(roleId: String!): [Permission!]!
    getRolesByIds(roleIds: [String!]!): [Role!]!
    "Get whether alerts for a given snappable are enabled"
    getSnappableAlertSetting(
        "The id of the cluster"
        clusterUuid: UUID!,
        "the fid of the snappable"
        snappableId: UUID!
    ): GetSnappableAlertSettingReply!
    getSupportTunnelStatus(
        "The id of the cluster"
        clusterUuid: UUID!,
        nodeId: String!
    ): SupportTunnelInfoResp!
    getTaskchainInfo(
        "Job type"
        jobType: String!,
        "Taskchain uuid"
        taskchainId: String!
    ): GetTaskchainInfoReply!
    getUserDownloads(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): [UserDownload!]!
    "All files matching input filters."
    globalFileSearch(
        "Input for InternalGlobalSearchApiQuery"
        input: GlobalSearchApiQueryInput!
    ): GlobalSearchApiResponseListResponse!
    globalSearchResults(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HierarchyObjectConnection!
    globalSla(
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!,
        "Specifies whether to show the migration information for an SLA or not."
        showMigrationInfo: Boolean,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean
    ): SlaDomain!
    globalSlaConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on what context filter input to use"
        contextFilterInput: [ContextFilterInputField!],
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether to show the migration information for an SLA or not."
        showMigrationInfo: Boolean,
        "Whether or not to show protected object count for an sla"
        showProtectedObjectCount: Boolean,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): SlaDomainConnection!
    globalSlaFilterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on what context filter input to use"
        contextFilterInput: [ContextFilterInputField!],
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Specifies whether to show the migration information for an SLA or not."
        showMigrationInfo: Boolean,
        "Whether or not to show protected object count for an sla"
        showProtectedObjectCount: Boolean,
        "Whether or not to show the Global SLA sync status on CDM"
        showSyncStatus: Boolean,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): GlobalSlaForFilterConnection!
    "Status on the clusters where global SLA is synced."
    globalSlaStatuses(
        "SLA ID for global SLAs."
        SlaId: UUID!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filters for SLAStatus."
        filter: [SlaStatusFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): PolarisSlaStatusConnection!
    hierarchyObject(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HierarchyObject!
    hierarchyObjects(fids: [UUID!]!, filter: [Filter!]): [HierarchyObject!]!
    hierarchySnappables(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HierarchySnappableConnection!
    "Get details of the given host failover cluster."
    hostFailoverCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HostFailoverCluster!
    "Get a summary of all host failover clusters."
    hostFailoverClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host failover cluster root type"
        hostFailoverClusterRoot: HostFailoverClusterRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HostFailoverClusterConnection!
    hostShare(
        "The Polaris UUID for the object."
        fid: UUID!
    ): HostShare!
    hostShareConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HostShareConnection!
    "Paginated list of the highest-level HyperV Objects accessible by the current user."
    hypervTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): HyperVTopLevelDescendantTypeConnection!
    "Paginated list of HyperV Virtual Machines."
    hypervVirtualMachines(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): HyperVVirtualMachineConnection!
    identityProviders: [IdentityProvider!]!
    installedVersionList: [InstalledVersionGroupCount!]!
    "list the available Instance Types"
    instanceTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SnappableInstanceTypeConnection!
    inventoryRoot: InventoryRoot!
    inventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): InventorySubHierarchyRoot!
    "Link to downloadable investigation results in CSV format."
    investigationCsvDownloadLink(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable Id of an object."
        snappableIdNotFid: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): InvestigationCsvDownloadLinkReply!
    ipWhitelist: GetWhitelistReply!
    "Specified whether an EBS volume is restorable. For an EBS Volume to be restorable, the volume should be able to replace where attached."
    isAwsNativeEbsVolumeSnapshotRestorable(
        "UUID of the snapshot"
        snapshotId: String!
    ): IsVolumeSnapshotRestorableReply!
    "Specifies whether the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the specified availability zone. When true, the specification is valid for a RDS Instance and can be used to create a new Instance."
    isAwsNativeRdsInstanceLaunchConfigurationValid(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "DB class of the exported RDS DB instance."
        dbClass: AwsNativeRdsDbInstanceClassEnum!,
        "DB Engine of RDS Instance."
        dbEngine: AwsNativeRdsDbEngineEnum!,
        "Version of DB engine."
        dbEngineVersion: String!,
        "IOPs of the exported RDS DB instance."
        iops: Int,
        "Whether the exported RDS DB instance is multi-AZ or not."
        isMultiAz: Boolean!,
        "KMS Key ID of the exported RDS DB instance."
        kmsKeyId: String,
        "AZ in which the exported RDS DB instance must be launched."
        primaryAz: String,
        "Region in AWS."
        region: AwsNativeRegionEnum!,
        "Storage type of the exported RDS DB instance."
        storageType: AwsNativeRdsStorageTypeEnum
    ): Boolean!
    "Specifies whether an S3 bucket name is available for use in AWS or not. When true, the bucket name is available for use."
    isAwsS3BucketNameAvailable(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the S3 bucket."
        bucketName: String!
    ): Boolean!
    "Specifies whether the Managed Disk snapshot is restorable or not. A managed disk is restorable when the restore settings of the Managed Disk are configured on the Azure portal and on the Rubrik platform. When the value is true, the managed disk snapshot is restorable."
    isAzureNativeManagedDiskSnapshotRestorable(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "Snapshot ID"
        diskSnapshotId: UUID!
    ): Boolean!
    "Specifies whether the given storage account name is valid and available in Azure to be assigned to a new storage account. When the value is true, the specified account name is available in Azure."
    isAzureStorageAccountNameAvailable(
        "Rubrik ID of the Azure Subscription."
        azureSubscriptionRubrikId: UUID!,
        "A unique name for the storage account. Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only."
        storageAccountName: String!
    ): Boolean!
    "List of snapshots with their file recovery feasibility status"
    isCloudNativeFileRecoveryFeasible(
        "List of snapshot IDs."
        snapshotIds: [UUID!]!
    ): ValidateCloudNativeFileRecoveryFeasibilityReply!
    "Is Logged into Rubrik support portal"
    isLoggedIntoRubrikSupportPortal: SupportPortalStatusReply!
    "Is Rubrik Suppport Portal reachable from this deployment"
    isSFDCReachable(
        "Support portal hostname"
        hostname: String! = "rubrik.force.com",
        "Support portal organization ID"
        organizationId: String! = "00D40000000N3x2"
    ): Boolean!
    "Is upgrade available for a particular cluster"
    isUpgradeAvailable(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CdmUpgradeAvailabilityReply!
    "Is upgrade recommended for a particular cluster"
    isUpgradeRecommended(
        "Cluster uuid"
        clusterUuid: UUID!
    ): CdmUpgradeRecommendationReply!
    isVMwareManagementEnabled: Boolean!
    "Return details of one issue"
    issue(issueId: String!): Issue!
    "Return all issues filtered by status"
    issueConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        status: IssueStatusEnum!
    ): IssueConnection!
    k8sCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): K8sCluster!
    k8sClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sClusterConnection!
    k8sNamespace(
        "The Polaris UUID for the object."
        fid: UUID!
    ): K8sNamespace!
    k8sNamespaces(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Optional Kubernetes cluster UUID."
        k8sClusterId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): K8sNamespaceConnection!
    lambdaSettings: LambdaSettings!
    "Browse LDAP authorized principals"
    ldapAuthorizedPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for LDAP principal."
        roleIds: [UUID!],
        "Search Text for LDAP principal."
        searchText: String!,
        sortBy: LdapAuthorizedPrincipalFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): AuthorizedPrincipalConnection!
    "Browse LDAP Integrations"
    ldapIntegrationConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: LdapIntegrationFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): LdapIntegrationConnection!
    "Search LDAP Principals"
    ldapPrincipalConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "ID for your LDAP integration."
        id: UUID!,
        "Returns the last n elements from the list."
        last: Int,
        "Search Text for LDAP principal."
        searchText: String!,
        sortBy: LdapPrincipalFieldEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): PrincipalConnection!
    linuxFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): LinuxFileset!
    "List ids of running issues jobs"
    listIssuesJobStatus(queryIds: [String!]!): [String!]!
    listO365Apps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        o365AppFilters: [AppFilter!]!,
        o365AppSortByParam: AppSortByParam
    ): O365AppConnection!
    """

    Get the result of a completed detection

    Supported in v7.0
    Get the details of a completed malware detection.
    """
    malwareDetectionTaskResult(
        "Input for InternalGetLambdaDetectMalwareResult"
        input: GetLambdaDetectMalwareResultInput!
    ): MalwareScanResults!
    """

    Get the result of a completed detection

    Supported in v7.0
    Get the details of a completed malware detection.
    """
    malwareDetectionTaskStatus(
        "Input for InternalGetLambdaDetectMalwareRequestStatus"
        input: GetLambdaDetectMalwareRequestStatusInput!
    ): AsyncRequestStatus!
    """

    Get asynchronous request details for a malware detection

    Supported in v7.0
    Get the details of an asynchronous malware detection.
    """
    malwareScanDetail(
        "Input for InternalGetLambdaMalwareScanDetail"
        input: GetLambdaMalwareScanDetailInput!
    ): GetLambdaMalwareScanDetailReply!
    """

    List malware scans

    Supported in v7.0
    List the malware scans.
    """
    malwareScans(
        "Input for InternalListMalwareScans"
        input: ListMalwareScansInput!
    ): MalwareScanDetailListResponse!
    "A Managed Volume."
    managedVolume(
        "The Polaris UUID for the object."
        fid: UUID!
    ): ManagedVolume!
    "Paginated list of Managed Volumes."
    managedVolumes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): ManagedVolumeConnection!
    "Get MFA settings for for an account."
    mfaSetting: GetMfaSettingReply!
    "Get recoverable range for multiple Management Objects."
    mosaicBulkRecoveryRange(
        "Input for V2MosaicBulkRecoveryRange"
        input: MosaicBulkRecoveryRangeInput!
    ): MosaicRecoveryRangeResponse!
    "List all stores on mosaic cluster."
    mosaicStores(
        "Input for V2GetMosaicStore"
        input: GetMosaicStoreInput!
    ): ListStoreResponse!
    "List versions of a mosaic object."
    mosaicVersions(
        "Input for V2GetMosaicVersion"
        input: GetMosaicVersionInput!
    ): ListVersionResponse!
    "A Microsoft SQL Availability Group."
    mssqlAvailabilityGroup(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlAvailabilityGroup!
    "Returns all compatible instances for export for the specified recovery time."
    mssqlCompatibleInstances(
        "Input for V1GetCompatibleMssqlInstancesV1"
        input: GetCompatibleMssqlInstancesV1Input!
    ): MssqlInstanceSummaryListResponse!
    "A Microsoft SQL Database."
    mssqlDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlDatabase!
    "Paginated list of Microsoft SQL Database live mounts."
    mssqlDatabaseLiveMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filters for Mssql database live mounts."
        filters: [MssqlDatabaseLiveMountFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Sort by argument for Mssql database live mounts."
        sortBy: MssqlDatabaseLiveMountSortByInput
    ): CdmMssqlDatabaseLiveMountConnection!
    "List of missed recoverable ranges for a Microsoft SQL Database."
    mssqlDatabaseMissedRecoverableRanges(
        "Input for V1GetMssqlDbMissedRecoverableRanges"
        input: GetMssqlDbMissedRecoverableRangesInput!
    ): MssqlMissedRecoverableRangeListResponse!
    "List of missed snapshots for a Microsoft SQL Database."
    mssqlDatabaseMissedSnapshots(
        "Input for V1GetMissedMssqlDbSnapshots"
        input: GetMissedMssqlDbSnapshotsInput!
    ): MissedSnapshotListResponse!
    "Paginated list of Microsoft SQL Databases."
    mssqlDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): MssqlDatabaseConnection!
    "A Microsoft SQL Instance."
    mssqlInstance(
        "The Polaris UUID for the object."
        fid: UUID!
    ): MssqlInstance!
    "List of recoverable ranges for a Microsoft SQL Database."
    mssqlRecoverableRanges(
        "Input for V1GetMssqlDbRecoverableRanges"
        input: GetMssqlDbRecoverableRangesInput!
    ): MssqlRecoverableRangeListResponse!
    "Paginated list of the highest-level Microsoft SQL Objects accessible by the current user."
    mssqlTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): MssqlTopLevelDescendantTypeConnection!
    "A NAS Namespace."
    nasNamespace(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NasNamespace!
    "A NAS Share."
    nasShare(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NasShare!
    "A NAS System."
    nasSystem(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NasSystem!
    "Paginated list of NAS Systems."
    nasSystems(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): NasSystemConnection!
    "Paginated list of the highest-level NAS Objects accessible by the current user."
    nasTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "A NAS Volume."
    nasVolume(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NasVolume!
    networkThrottles(
        "Input for InternalQueryNetworkThrottle"
        input: QueryNetworkThrottleInput!
    ): NetworkThrottleSummaryListResponse!
    "A Nutanix Cluster."
    nutanixCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NutanixCluster!
    "Paginated list of Nutanix Clusters."
    nutanixClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): NutanixClusterConnection!
    "Paginated list of the highest-level Nutanix Objects accessible by the current user."
    nutanixTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    "A Nutanix Virtual Machine."
    nutanixVm(
        "The Polaris UUID for the object."
        fid: UUID!
    ): NutanixVm!
    "Paginated list of Nutanix Virtual Machines."
    nutanixVms(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): NutanixVmConnection!
    o365Calendar(snappableFid: UUID!): O365Calendar!
    "List of O365 Groups in the O365Org."
    o365Groups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        snappableType: SnappableTypeEnum!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365GroupConnection!
    o365Mailbox(snappableFid: UUID!): O365Mailbox!
    "List of Mailboxes of O365Org"
    o365Mailboxes(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365MailboxConnection!
    o365ObjectAncestors(snappableFid: UUID!): GetImplicitlyAuthorizedAncestorSummariesResponse!
    o365Onedrive(snappableFid: UUID!): O365Onedrive!
    "List of Onedrives of O365Org"
    o365Onedrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OnedriveConnection!
    o365Org(
        "The Polaris UUID for the object."
        fid: UUID!
    ): O365Org!
    o365OrgAtSnappableLevel(
        "The Polaris UUID for the object."
        fid: UUID!,
        snappableType: SnappableTypeEnum!
    ): O365Org!
    o365OrgSummaries: GetImplicitlyAuthorizedObjectSummariesResponse!
    o365Orgs(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365OrgConnection!
    o365ServiceAccount(orgId: UUID!): O365ServiceAccountStatusResp!
    o365SharepointDrive(snappableFid: UUID!): O365SharepointDrive!
    "List of sharepoint drives (document libraries) in the O365Org"
    o365SharepointDrives(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SharepointDriveConnection!
    o365SharepointList(snappableFid: UUID!): O365SharepointList!
    "Returns the sharepoint objects after filtering on the object types and includeEntireHierarchy."
    o365SharepointObjectList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Polaris UUID for the object."
        fid: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "If true, the entire hierarchy will be searched."
        includeEntireHierarchy: Boolean!,
        objectTypeFilter: [String!],
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SharepointObjectConnection!
    o365SharepointObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Polaris UUID for the object."
        fid: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SharepointObjectConnection! @deprecated(reason : "This is deprecated as it was tied to the specific object type. Use o365SharepointObjectList instead.")
    o365Site(snappableFid: UUID!): O365Site!
    "List of sites of O365Org"
    o365Sites(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365SiteConnection!
    o365Team(snappableFid: UUID!): O365Teams!
    "List of Channels for the O365Team"
    o365TeamChannels(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        excludeArchived: Boolean!,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        snappableFid: UUID!
    ): O365TeamsChannelConnection!
    "IDs of the child snapshots of the Team snapshot"
    o365TeamChildSnapshotIDs(snapshotFid: UUID!): O365TeamChildSnapshotIDs!
    "ID for the conversations folder in the Team's Group Mailbox"
    o365TeamConversationsFolderID(o365OrgId: UUID!, snappableFid: UUID!, snapshotFid: UUID!): String!
    "users who have posted in a team"
    o365TeamPostedBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        nameFilter: String,
        o365OrgId: UUID!,
        snappableFid: UUID!
    ): O365TeamConversationsSenderConnection!
    "List of O365 Teams in the O365Org"
    o365Teams(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        o365OrgId: UUID!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365TeamsConnection!
    o365User(
        "The Polaris UUID for the object."
        fid: UUID!
    ): O365User!
    "Name, id, object type, and mail address of user descendant object."
    o365UserObjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "The Polaris UUID for the object."
        fid: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): O365UserDescendantMetadataConnection!
    objectFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        timezone: String!
    ): FileResultConnection!
    "An Oracle Database."
    oracleDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleDatabase!
    "Paginated list of Oracle Databases."
    oracleDatabases(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): OracleDatabaseConnection!
    "An Oracle Host."
    oracleHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleHost!
    "An Oracle Real Application Cluster."
    oracleRac(
        "The Polaris UUID for the object."
        fid: UUID!
    ): OracleRac!
    "Paginated list of the highest-level Oracle Objects accessible by the current user."
    oracleTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): OracleTopLevelDescendantTypeConnection!
    pendingAction(pendingActionId: String!): pendingAction!
    pendingActions(clusterFilter: UUID, historyOnly: Boolean, limit: Long, objectIds: [String!], pendingActionGroupTypeFilter: [PendingActionGroupTypeEnum!], pendingActionSubGroupTypeFilter: [PendingActionSubGroupTypeEnum!], sortedOrder: ChronologicalOrderEnum, statusFilter: [PendingActionStatusEnum!]): [pendingAction!]!
    "Get information about objects passing through the Radar pipeline."
    pendingRadarEvaluationResultsCount: PendingEvaluationResultsReply!
    physicalHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): PhysicalHost!
    physicalHostConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "host root type"
        hostRoot: HostRoot!,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): PhysicalHostConnection!
    "Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs"
    pipelineHealthForTimeRange(
        "Filtering beginning from this time."
        beginTime: DateTime!,
        "Filtering ending on this time."
        endTime: DateTime
    ): GetPipelineHealthReply!
    polarisInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): PolarisInventorySubHierarchyRoot!
    "Returns the Polaris snapshot by id"
    polarisSnapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): PolarisSnapshot!
    "Return detailed policy information"
    policy(policyId: String!): ClassificationPolicyDetail!
    "Return active policies for an account"
    policyConnection(policyObjectFilter: PolicyObjectFilterEnum): ClassificationPolicyDetailConnection!
    "Return details for one policy obj"
    policyObj(snappableFid: String!, snapshotFid: String!): PolicyObj!
    "Return status for all objects at a specified timestamp"
    policyObjConnection(day: String!, timezone: String!): PolicyObjConnection!
    "Returns which policies are applied to each object"
    policyObjectUsageConnection(objectIds: [String!]!): PolicyObjectUsageConnection!
    "Gets status of last prechecks job"
    prechecksStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get status of last completed prechecks Job along with details of currently running/scheduled next prechecks Job"
    prechecksStatusWithNextJobInfo(
        "Cluster uuid"
        clusterUuid: UUID!
    ): PrechecksStatusReply!
    "Get the number of snappables that have passed through the Radar pipeline in the past 24 hours."
    processedRadarSnappableCount: ProcessedRadarSnappableCountReply!
    "List of all objects protected by the sla"
    protectedObjectsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        objectTypeFilter: [String!],
        "Corresponds to optional object root forever UUID, none value is assumed to be the global hierarchy root"
        rootOptionalFid: UUID,
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!,
        sortBy: HierarchySortByField,
        "sort order"
        sortOrder: SortOrderEnum
    ): ProtectedObjectsConnection!
    "Get the total number of snappables protected by Radar"
    protectedRadarSnappableCount: ProtectedRadarSnappableCountReply!
    "Get a per day summary of the radar analysis results from start day to end day."
    radarAnalysisSummary(
        "Optional list of cluster uuids to filter on."
        clusterUuidFilter: [String!],
        "End day, formatted(ISO 8601) as YYYY-MM-DD."
        endDay: String!,
        "Do not include the suspicious byte count or suspicious file count of non anomalous snapshots."
        hideSuspiciousDataIfNonAnomalous: Boolean,
        "Optional list of object types to filter on."
        objectTypeFilter: [String!],
        "Optional list of sla fids to filter on."
        slaFidFilter: [String!],
        "Start day, formatted(ISO 8601) as YYYY-MM-DD."
        startDay: String!,
        "Timezone name(IANA)."
        timezone: String!
    ): RadarAnalysisSummaryReply!
    radarClusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ClusterFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort clusters by field"
        sortBy: ClusterSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Get the total number of times that Radar has scanned an object"
    radarSnappableScannedCount(
        "Snappable Id of an object."
        snappableIdNotFid: String!
    ): RadarSnappableScannedCountReply!
    ransomwareResult(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): RansomwareResult!
    ransomwareResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter ransomware results by input"
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort ransomware results by field"
        sortBy: RansomwareResultSortByEnum,
        timezoneOffset: Float = 0.0
    ): RansomwareResultConnection!
    ransomwareResultGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter ransomware results by input"
        filter: RansomwareResultFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group ransomware results by field"
        groupBy: RansomwareResultGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): RansomwareResultGroupByConnection!
    ransomwareResultOpt(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Snappable managed ID"
        managedId: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): RansomwareResult
    "Details of the RDS Instance in the AWS Native account."
    rdsInstanceDetailsFromAws(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): RdsInstanceDetailsFromAws!
    "List of all replication pair Rubrik clusters."
    replicationPairsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filter for replication pairs query"
        filter: ReplicationPairsQueryFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Field to sort by for replication pairs."
        sortBy: ReplicationPairsQuerySortByField,
        sortOrder: ReplicationQuerySortByOrder
    ): ReplicationPairConnection!
    report(id: Int!): CustomReport!
    reportConfig(reportID: Int!): ReportConfig!
    reportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort by field"
        sortBy: CustomReportSortByEnum = UpdateTime,
        "sort order"
        sortOrder: SortOrderEnum
    ): CustomReportConnection!
    reportData(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        """

        A list of aggregations to apply to the grouped rows, it must be used
        in conjunction with groupBy arg (except for count(*)). Supported
        aggregations are:
        hour, day, week, month, year for datetime columns
        sum, avg for integer columns
        count(*)
        """
        aggregations: [String!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        """

        A list of columns to include in the result. It can be omitted when
        requesting aggregations, and server will derive columns by
        concatenating groupBy and aggregation arguments.
        """
        columns: [String!]!,
        dataView: DataViewTypeEnum!,
        "A list of filters to filter result with"
        filters: [ReportFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        """

        A list of the names of the columns to group result by, it must be
        used in conjunction of aggregations.
        """
        groupBy: [String!],
        "Returns the last n elements from the list."
        last: Int,
        """

        SecondaryGroupBy used for when groupBy values need to be pivoted.
        """
        secondaryGroupBy: String,
        "Name of the column to sort result by"
        sortBy: String,
        "sort order"
        sortOrder: SortOrderEnum,
        "The timezone to return results in"
        timezone: String
    ): RowConnection!
    reportFromConfig(config: CustomReportCreate!): CustomReport!
    reportGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter custom reports by input"
        filter: CustomReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: CustomReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): CustomReportGroupByConnection!
    reportSchema(
        dataView: DataViewTypeEnum!,
        "The timezone to return results in"
        timezone: String
    ): ReportSchema!
    "Status of all running jobs for an account."
    runningJobsStatus: RunningJobsReply!
    sapHanaDatabase(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaDatabase!
    sapHanaDatabaseConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SapHanaDatabaseConnection!
    sapHanaLogSnapshot(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaLogSnapshot!
    sapHanaLogSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana log snapshots by input"
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana log snapshots by field"
        sortBy: SapHanaLogSnapshotSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaLogSnapshotConnection!
    sapHanaRecoverableRange(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaRecoverableRange!
    sapHanaRecoverableRangeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana recoverable ranges by input"
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana recoverable ranges by field"
        sortBy: SapHanaRecoverableRangeSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaRecoverableRangeConnection!
    sapHanaSystem(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SapHanaSystem!
    sapHanaSystemConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SapHanaSystemConnection!
    scheduledReport(id: Int!): ScheduledReport
    scheduledReportConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ScheduledReportFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledReportConnection!
    screenshotReport(
        "The ID of the report to be screenshotted"
        reportId: String!
    ): TakeScreenshotReply!
    searchCloudNativeSnappableVersionedFileConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "Name or Path prefix arg for searching for files within a snappable"
        searchQuery: String!,
        "Snappable ID"
        snappableId: UUID!
    ): CloudNativeVersionedFileConnection!
    "Search file under given folder and with given prefix"
    searchFileByPrefix(
        "The id of the cluster"
        clusterUuid: UUID!,
        "Filename prefix that should match."
        filenamePrefix: String!,
        "Snappable managed ID"
        managedId: String!,
        "Root path to search file inside fmd."
        searchFolderPath: String!,
        "Corresponds to snapshot ID in CDM tables"
        snapshotId: String!
    ): DiffFMDReply!
    searchHost(
        "ID of the host to search."
        id: String!,
        "The path query. Either path prefix or filename prefix."
        path: String!
    ): SearchResponseListResponse!
    searchSnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input (with search by name)"
        filter: SnappableFilterInputWithSearch,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    searchSnappableVersionedFiles(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        searchQuery: String!,
        snappableFid: UUID!
    ): VersionedFileConnection!
    "list the available Security Groups"
    securityGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSecurityGroupConnection!
    "Browse Service Accounts"
    serviceAccountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Assigned role IDs for service account"
        roleIds: [UUID!],
        "Search for a service account"
        searchText: String,
        "Sort"
        sortBy: ServiceAccountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): ServiceAccountConnection!
    serviceProviderMetadataFields: GetSPExplicitReply!
    shareFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): ShareFileset!
    "List of audit details for a given SLA"
    slaAuditDetail(
        "SLA ID for global SLAs and Internal ID for CDM SLAs"
        SlaId: UUID!,
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: [SLAAuditDetailFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        timezone: String
    ): [SlaAuditDetail!]!
    slaConflictObjects(fids: [UUID!]!): [HierarchyObject!]!
    slaDomainWithWarnings(
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Corresponds to global SLA forever UUID in Polaris tables"
        globalSlaFid: UUID!,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!
    ): SlaDomainWithWarnings!
    "Query sla list with warnings"
    slaDomainWithWarningsList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Provide optional snappable types under the object for SLA assignment. This is meant to be used only for objects that support multiple snappable hierarchies. See 'applicableSnappableType' for more details. If more than one is provided, the SLA will be assigned to all."
        applicableSnappableTypes: [SnappableLevelHierarchyTypeEnum!],
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        filter: [GlobalSlaFilterInput!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Provide list of object forever IDS you want to assign Global SLA"
        objectIds: [UUID!]!,
        sortBy: SLAQuerySortByFieldEnum,
        sortOrder: SLAQuerySortByOrderEnum
    ): [SlaDomainWithWarnings!]!
    "List of SLA summaries for the given ids"
    slaSummariesByIds(
        "Provide list of Global SLA ids"
        slaIds: [UUID!]!
    ): [SlaDomain!]!
    smtpConfiguration: GetSMTPConfigurationReply!
    "A SnapMirror Cloud."
    snapMirrorCloud(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SnapMirrorCloud!
    "Snappables which have an anomalous snapshot."
    snappableAnomalies(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Filtering beginning from this time."
        beginTime: DateTime!,
        "Optional list of cluster uuids to filter on."
        clusterUuidFilter: [String!],
        "Optional list of encryption levels to filter on."
        encryptionFilter: [EncryptionLevel!],
        "Filtering ending on this time."
        endTime: DateTime,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "Optional list of object types to filter on."
        objectTypeFilter: [String!],
        "Order snappables with children ahead of non-parents."
        orderParentsFirst: Boolean,
        "Optional list of severity levels to filter on."
        severityFilter: [ActivitySeverity!],
        "Optional list of sla fids to filter on."
        slaFidFilter: [String!],
        "Optional snappable name search filter to apply."
        snappableNameSearch: String,
        "Sort snappable anomalies by field."
        sortBy: SnappableAnomaliesSortBy,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableAnomalyConnection!
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input"
        filter: SnappableFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    snappableEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "calendar search filters"
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!
    ): O365ExchangeObjectConnection!
    snappableGroupByAtSpecifiedTimeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input for group by"
        filter: SnappableGroupByFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snappables by field"
        groupBy: SnappableGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "List of Snappable aggregations you want to fetch. Explicitly specifying the subset of aggregations you need will greatly speed up the query."
        requestedAggregations: [SnappableAggregationsEnum!],
        "Time to calculate the group by."
        specifiedTime: DateTime!,
        timezoneOffset: Float = 0.0
    ): SnappableGroupByAtSpecifiedTimeConnection!
    snappableGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snappables by input for group by"
        filter: SnappableGroupByFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snappables by field"
        groupBy: SnappableGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "List of Snappable aggregations you want to fetch. Explicitly specifying the subset of aggregations you need will greatly speed up the query."
        requestedAggregations: [SnappableAggregationsEnum!],
        timezoneOffset: Float = 0.0
    ): SnappableGroupByConnection!
    snappableOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    "describes the snappable resource specs"
    snappableResourceSpecs(
        "The snappable identifiers."
        ids: [SnappableIdentifierInput!]!
    ): [ResourceSpec!]!
    snappableSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    "Search list objects"
    snappableSharepointListSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!
    ): O365OnedriveObjectConnection!
    snappableTeamsConversationsSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!,
        "snapshotFid arg which is of optional type"
        snapshotFidOpt: UUID,
        "List of channel objects (naturalId and name)."
        teamConvChannels: [O365TeamConvChannelInput!]!,
        teamsConversationsSearchFilter: TeamsConversationsSearchFilter
    ): O365TeamsConversationsConnection!
    snappableTeamsDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        channelFolderName: String,
        channelId: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!,
        teamsDriveSearchFilter: OnedriveSearchFilter
    ): O365OnedriveObjectConnection!
    "Returns a single snapshot by id"
    snapshot(
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): CdmSnapshot!
    snapshotEmailSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        "search filters"
        searchFilter: SearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    snapshotEventSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "calendar search filters"
        calendarSearchFilter: CalendarSearchFilter,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365ExchangeObjectConnection!
    "Browse or search the given path for files and directories along with their deltas in a given snapshot"
    snapshotFileDeltaConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter snapshot delta based on delta types"
        filter: SnapshotDeltaFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "The path under which you want your search to run"
        path: String!,
        "Prefix arg for searching for files within a snapshot"
        searchPrefix: String,
        "Corresponds to snapshot forever UUID in Polaris tables"
        snapshotFid: UUID!
    ): SnapshotFileDeltaConnection!
    "Returns list of snapshots for a snappable"
    snapshotOfASnappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        snappableId: String!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection!
    "Returns list of snapshots for a list of snappables"
    snapshotOfSnappablesConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Whether to ignore the active protected object check."
        ignoreActiveSnappableCheck: Boolean,
        "Returns the last n elements from the list."
        last: Int,
        "Snappable UUIDs."
        snappableIds: [String!]!,
        "filter for snapshot connection"
        snapshotFilter: [SnapshotQueryFilterInput!],
        sortBy: SnapshotQuerySortByField,
        "sort order"
        sortOrder: SortOrderEnum,
        timeRange: TimeRangeInput
    ): GenericSnapshotConnection!
    snapshotOnedriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        onedriveSearchFilter: OnedriveSearchFilter,
        orgId: UUID!,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Return snapshot results for a snappable"
    snapshotResultConnection(
        "End time of the range (in milliseconds since epoch)"
        endTimeMs: Long!,
        snappableFid: String!,
        "Begin time of the range (in milliseconds since epoch)"
        startTimeMs: Long!
    ): SnapshotResultConnection!
    snapshotSharepointDriveSearch(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        orgId: UUID!,
        sharepointDriveSearchFilter: OnedriveSearchFilter,
        snappableFid: UUID!,
        snapshotFid: UUID!
    ): O365OnedriveObjectConnection!
    "Return groupBy results for SonarContentReport"
    sonarContentReportGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        day: String!,
        filters: SonarContentReportFilter,
        "Returns the first n elements from the list."
        first: Int,
        groupBy: SonarContentReportGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: SonarContentReportSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum,
        timezone: String!
    ): SonarContentReportTableRowConnection!
    "Return groupBy for SonarReport"
    sonarReportGroupByConnection(filter: [String!], sonarReportGroupBy: SonarReportGroupByEnum!, timeFilter: TimeFilterInput): SonarReportGroupByResultConnection!
    "Return rows for SonarReport table"
    sonarReportTableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        endTime: String,
        filter: [String!],
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sortBy: SonarReportSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SonarReportTableRowConnection!
    sonarUserGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessGroupsFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): AccessGroupConnection!
    sonarUsers(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListAccessUsersFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: ListAccessUsersSortInput
    ): AccessUserConnection!
    sourceBlueprintInfo(
        "The Polaris UUID for the object."
        fid: UUID!
    ): SourceBlueprintInfo!
    "list the available Subnets"
    subnetConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the type for id of availability-zone (eg. us-east-1a)"
        availabilityZone: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        "the fid of the vpc"
        vpcId: UUID!
    ): SnappableSubnetConnection!
    syslogConfiguration: GetSyslogConfigurationReply!
    tableFilters: TableFilters!
    target(
        "Corresponds to ID of target in Polaris"
        targetId: UUID!
    ): Target!
    targetList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of targets"
        filter: [TargetFilterInput!],
        "Specification on how to sort a list of targets"
        sortBy: TargetSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [Target!]!
    targetMapping(
        "Corresponds to ID of target mapping in Polaris"
        targetMappingId: UUID!
    ): TargetMapping!
    targetMappingList(
        "Specification on what context filter to use"
        contextFilter: ContextFilterTypeEnum,
        "Specification on how to filter a list of target mappings"
        filter: [TargetMappingFilterInput!],
        "Specification on how to sort a list of target mappings"
        sortBy: TargetMappingSortByFieldEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): [TargetMapping!]!
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task detail by field"
        sortBy: TaskDetailSortByEnum = EndTime,
        "task detail sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): TaskDetailConnection!
    taskDetailGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskDetailFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group task detail by a field"
        groupBy: TaskDetailGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): TaskDetailGroupByConnection!
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "sort order"
        sortOrder: SortOrderEnum,
        timezoneOffset: Float = 0.0
    ): TaskSummaryConnection!
    taskSummaryGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter task summary by input"
        filter: TaskSummaryFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): TaskSummaryGroupByConnection!
    teamChannelNameAvailable(channelName: String!, teamUUID: UUID!): Boolean!
    toggleableFeaturesEnabled: [FeatureNameEnum!]!
    "Get TOTP configuration status for a user."
    totpConfigStatus(
        "User ID."
        userId: String!
    ): GetTotpStatusReply!
    "Details of a udf instance for a given fid."
    udfInstance(
        "The Polaris UUID of the Udf instance."
        id: UUID!
    ): UdfInstance!
    "Connection of filtered udf instances based on specific filters."
    udfInstances(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): UdfInstanceConnection!
    uniqueVSphereVCenterCount(filter: [Filter!]): Int!
    "Gets the status for completed/running upgrade process"
    upgradeStatus(
        "Cluster uuid"
        clusterUuid: UUID!
    ): UpgradeStatusReply!
    userActivities(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filter: ListObjectFilesFiltersInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        sort: FileResultSortInput,
        "Time range specified in the user's local timezone."
        timeRange: UserTimeRangeInput,
        userId: String!
    ): FileResultConnection!
    userActivityTimeline(startDay: String!, timezone: String!, uniqueActivities: Boolean!, userId: String!): ActivityTimelineResultConnection!
    userAnalyzerAccess(limit: Int!, startDay: String!, timezone: String!, userId: String!): AnalyzerAccessUsageConnection!
    userAuditConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: UserAuditFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time,
        "user audit sort order"
        sortOrder: SortOrderEnum = Desc
    ): UserAuditConnection!
    userAuditGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        filters: UserAuditFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group audits by a field"
        groupBy: UserAuditGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time,
        "user audit sort order"
        sortOrder: SortOrderEnum = Desc,
        timezoneOffset: Float = 0.0
    ): UserAuditGroupByConnection!
    userDetail(startDay: String!, timezone: String!, userId: String!): GetUserDetailReply!
    userFileActivityTimeline(nativePath: String!, resource: ResourceInput, startDay: String!, timeGranularity: TimeGranularityEnum!, timezone: String!, userId: String!): ActivityTimelineResultConnection!
    userGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        roleIdsFilter: [UUID!]
    ): [Group!]!
    userSettings: UserSettings!
    vSphereBlueprint(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereBlueprint!
    vSphereComputeCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereComputeCluster!
    "Query compute clusters"
    vSphereComputeClusters(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereComputeClusterConnection!
    vSphereDatacenter(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereDatacenter!
    vSphereDatastoreConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereDatastoreConnection!
    vSphereFolder(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereFolder!
    vSphereHost(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereHost!
    vSphereHostConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereHostConnection!
    "All of the VSphere hosts based on fids passed in."
    vSphereHostsByFids(fids: [UUID!]!): [VSphereHost!]!
    "Get a vSphere Live Mount by id"
    vSphereMount(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereMount!
    "vSphere Live Mount Connection"
    vSphereMountConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM live mounts"
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereMountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereMountConnection!
    vSphereNetwork(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereNetwork!
    vSphereResourcePool(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereResourcePool!
    "The root hierarchy for VMware export, which includes VMware compute clusters and standalone hosts."
    vSphereRootRecoveryHierarchy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): CdmHierarchyObjectConnection!
    vSphereTag(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereTag!
    vSphereTagCategory(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereTagCategory!
    vSphereTopLevelDescendantsConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): CdmHierarchyObjectConnection!
    vSphereVCenter(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereVCenter!
    vSphereVCenterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereVCenterConnection!
    vSphereVMAsyncRequestStatus(
        clusterUuid: UUID!,
        "ID of an asynchronous request."
        id: String!
    ): AsyncRequestStatus!
    vSphereVmNew(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VSphereVm!
    vSphereVmNewConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VSphereVmConnection!
    "Validates the name used for an RDS Instance during an export operation. Returns true if the RDS Instance name is valid. Returns false, with an error message, if the RDS Instance name validation fails. Returns false, without an error message for all other failures."
    validateAwsNativeRdsInstanceNameForExport(
        "Rubrik ID for AWS account."
        awsAccountRubrikId: UUID!,
        "Name of the RDS DB Instance"
        rdsInstanceName: String!,
        "Region in AWS."
        region: AwsNativeRegionEnum!
    ): ValidateAwsNativeRdsInstanceNameForExportReply!
    "Validates if Azure subnets are correctly configured for running Azure Kubernetes Service (AKS) Clusters. When correctly configured, the Azure subnets allow the required region-specific outbound connectivity and do not overlap with Azure restricted IP Address Space."
    validateAzureCloudAccountExocomputeConfigurations(
        "Input for validating Exocompute configurations for an Azure Cloud Account."
        input: ValidateAzureCloudAccountExocomputeConfigurationsInput!
    ): ValidateAzureSubnetsForCloudAccountExocomputeReply!
    "A vCloud Director."
    vcd(
        "The Polaris UUID for the object."
        fid: UUID!
    ): Vcd!
    "A vCloud Director Catalog."
    vcdCatalog(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdCatalog!
    "A vCloud Director Organization."
    vcdOrg(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdOrg!
    "A vCloud Director Organization Virtual Data Center."
    vcdOrgVdc(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdOrgVdc!
    "Paginated list of the highest-level vCloud Director Objects accessible by the current user."
    vcdTopLevelDescendants(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdTopLevelDescendantTypeConnection!
    "A vCloud Director vApp."
    vcdVapp(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdVapp!
    "Paginated list of vCloud Director vApps."
    vcdVapps(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VcdVappConnection!
    "A vCloud Director VIM Server."
    vcdVimServer(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VcdVimServer!
    verifySLAWithReplicationToCluster(
        "Account name"
        account: String!,
        "CDM Cluster UUID"
        cdmClusterUUID: String!,
        "Include Archived SLA"
        includeArchived: Boolean!
    ): VerifySLAWithReplicationToClusterResp!
    volumeGroup(
        "The Polaris UUID for the object."
        fid: UUID!
    ): VolumeGroup!
    volumeGroupConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VolumeGroupConnection!
    "Volume Group Live Mount Connection."
    volumeGroupMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Filter for volume group live mounts."
        filter: VolumeGroupMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        "Sort by parameters for volume group live mount."
        sortBy: VolumeGroupMountSortBy,
        "sort order"
        sortOrder: SortOrderEnum
    ): VolumeGroupMountConnection!
    "list the available Volume Types"
    volumeTypeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        " the device key"
        key: Int!,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        "the fid of the snappable"
        snappableId: UUID,
        "the fid of the snapshot"
        snapshotId: UUID,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): SnappableStorageVolumeTypeConnection!
    "list the available VPCs"
    vpcConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "the id of the blueprint"
        blueprintId: UUID!,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "MaxSuggestionCount is the number of suggestions expected"
        maxSuggestionCount: Int,
        "NamePrefix is prefix for filtering down suggestions"
        namePrefix: String,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder
    ): VpcConnection!
    vsphereVMMissedRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRange(afterTime: DateTime, beforeTime: DateTime, snappableFid: UUID!): RecoverableRangeResponse!
    vsphereVMRecoverableRangeInBatch(
        "The batch request, which includes the ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved, and optionally the date ranges as a filter."
        requestInfo: BatchVmwareVmRecoverableRangesRequestInput!
    ): BatchVmwareVmRecoverableRanges!
    vsphereVmwareCdpLiveInfo(
        "The ID of each CDP-enabled virtual machine for which live info is being retrieved."
        ids: [String!]!
    ): BatchVmwareCdpLiveInfo!
    "A Windows Cluster."
    windowsCluster(
        "The Polaris UUID for the object."
        fid: UUID!
    ): WindowsCluster!
    windowsFileset(
        "The Polaris UUID for the object."
        fid: UUID!
    ): WindowsFileset!
    "Configured web TLS cert."
    wwwTlsCert: CertificateInfo!
}

type QuerySDDLReply {
    secInfo: [PathSecInfo!]!
}

type RPOLagInfo {
    actualInSecs: Long!
    expectedInSecs: Long!
    level: String!
}

"Summary of the radar analysis results"
type RadarAnalysisSummaryReply {
    analysisDetails: [DailyAnalysisDetails!]!
}

"Number of times Radar has scanned an object"
type RadarSnappableScannedCountReply {
    snappableScannedCounts: [SnappableScanned!]!
}

"Ransomware analysis report from lambda service"
type RansomwareResult {
    clusterUuid: UUID!
    encryptionProbability: Float!
    id: String!
    isEncrypted: Boolean!
    managedId: String!
    snappableId: String!
    snapshotData: DateTime!
    snapshotFid: String!
    snapshotId: String!
}

type RansomwareResultConnection {
    count: Int!
    edges: [RansomwareResultEdge!]!
    nodes: [RansomwareResult!]!
    pageInfo: PageInfo!
}

type RansomwareResultEdge {
    cursor: String!
    node: RansomwareResult!
}

"Ransomware analysis data with groupby info applied to it"
type RansomwareResultGroupBy {
    "Groupby info."
    groupByInfo: RansomwareResultGroupByInfo!
    "Paginated ransomware result data"
    ransomwareResultConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort ransomware results by field"
        sortBy: RansomwareResultSortByEnum
    ): RansomwareResultConnection!
    "Further provide groupings for the data."
    ransomwareResultGroupBy(
        "group ransomware results by field"
        groupBy: RansomwareResultGroupByEnum!
    ): [RansomwareResultGroupBy!]!
}

type RansomwareResultGroupByConnection {
    count: Int!
    edges: [RansomwareResultGroupByEdge!]!
    nodes: [RansomwareResultGroupBy!]!
    pageInfo: PageInfo!
}

type RansomwareResultGroupByEdge {
    cursor: String!
    node: RansomwareResultGroupBy!
}

"RDS DB Instance details from AWS."
type RdsInstanceDetailsFromAws {
    "Allocated size of an RDS Instance."
    allocatedStorageInGb: Long!
    "Retention time for RDS backups."
    backupRetentionPeriod: Long!
    "DB Engine of RDS Instance."
    dbEngine: String!
    "DB class for RDS Instance."
    dbInstanceClass: String!
    "Status of an RDS Instance. Refers to the health of the RDS Instance."
    dbInstanceStatus: String!
    "Maintenance window for the RDS Instance."
    dbMaintenanceWindow: String!
    "Name of parameter group of RDS Instance."
    dbParameterGroupName: String!
    "Subnet group name of RDS Instance."
    dbSubnetGroupName: String!
    "RDS DB Instance engine version."
    engineVersion: String!
    "Input/Output (IO) operation limit per second for RDS Instance."
    iops: Long!
    "Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance."
    isMultiAz: Boolean!
    "Key Management System (KMS) key ID associated with RDS Instance."
    kmsKeyId: String!
    "Name of option group of RDS Instance."
    optionGroupName: String!
    "Port used to connect to the RDS Instance."
    port: Long!
    primaryAz: String!
    "Amazon Resource Name (ARN) of RDS Instance."
    rdsInstanceArn: String!
    "Storage type of RDS Instance. Amazon RDS provides three storage types: General Purpose SSD (also known as gp2), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard)."
    storageType: String!
    vpcId: String!
}

"RDS Export defaults from AWS."
type RdsInstanceExportDefaults {
    "Allocated size of an RDS Instance."
    allocatedStorageInGb: Long!
    "DB Engine of RDS Instance."
    dbEngine: AwsNativeRdsDbEngineEnum!
    "Version of DB engine."
    dbEngineVersion: String!
    "DB class for RDS Instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    "NParameter group name of the RDS Instance."
    dbParameterGroupName: String!
    "Subnet group name of the RDS Instance."
    dbSubnetGroupName: String!
    "Input/Output (IO) operation limit per second for RDS Instance."
    iops: Int!
    "Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance."
    isMultiAz: Boolean!
    "Key Management System (KMS) key ID associated with RDS Instance."
    kmsKeyId: String!
    "Name of option group of RDS Instance."
    optionGroupName: String!
    "Port used to connect to the RDS Instance."
    port: Long!
    "Primary Availability Zone (AZ) of RDS Instance."
    primaryAz: String!
    "Storage type of RDS Instance. Amazon RDS provides three storage types: General Purpose SSD (also known as gp2), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard)."
    storageType: AwsNativeRdsStorageTypeEnum!
    "Virtual Private Cloud (VPC) associated with RDS Instance."
    vpcId: String!
}

"Range to recover a snapshot from for a given VM"
type RecoverableRange {
    beginTime: String
    endTime: String
}

"Recoverable ranges for a given VM"
type RecoverableRangeResponse {
    data: [RecoverableRange!]!
    hasMore: Boolean
    total: Long
}

type RecoverySpecId {
    fid: String!
}

type RecoverySpecValidityCheckReply {
    errorMessage: String!
    rmStatus: String!
    success: Boolean!
}

type RecoveryTaskDetailsTableFilter {
    cluster_location: [FilterOption!]!
    cluster_type: [FilterOption!]!
    object_type: [FilterOption!]!
    replication_source: [FilterOption!]!
    status: [FilterOption!]!
    task_category: [FilterOption!]!
    task_type: [FilterOption!]!
}

"Project ID and the error encountered while scheduling a job to refresh the project."
type RefreshGCPNativeProjectError {
    error: String!
    projectId: String!
}

"Project ID and the Taskchain ID of the job scheduled to refresh the project."
type RefreshGCPNativeProjectTaskchainUuid {
    projectId: String!
    taskchainUuid: String!
}

"The status of Refresh GCP Native project request. For each project ID in the request, the status includes an error when the request fails and the UUID of the taskchain when the request passes."
type RefreshGCPNativeProjectsReply {
    errors: [RefreshGCPNativeProjectError!]!
    taskchainUuids: [RefreshGCPNativeProjectTaskchainUuid!]!
}

"vCenter connection status"
type RefreshableObjectConnectionStatus {
    message: String
    status: VCenterConnectionStatusEnum!
}

type Region {
    displayName: String!
    id: String!
    name: String!
}

type RegionConnection {
    count: Int!
    edges: [RegionEdge!]!
    nodes: [Region!]!
    pageInfo: PageInfo!
}

type RegionEdge {
    cursor: String!
    node: Region!
}

type RelationshipSummary {
    "Required. ID of the SnapMirrorCloud cloud target on the NetApp server."
    cloudTargetId: String!
    "Required. ID of the SnapMirrorCloud policy on the NetApp server."
    policyId: String!
    "Required. ID of the SnapMirrorCloud relationship on the NetApp server."
    relationshipId: String!
}

"A relative range of time."
type RelativeTimeRange {
    "Number of units in the time range."
    magnitude: Int!
    "Unit of the time range"
    unit: TimeUnitEnum!
}

"Rubrik cluster details."
type ReplicationCluster {
    "Rubrik cluster uuid."
    id: String!
    "Rubrik cluster name."
    name: String!
    "Rubrik cluster version."
    version: String!
}

"Replication pair specific information."
type ReplicationPair {
    "Additional information about the connection status of the replication pair Rubrik clusters"
    connectionDetails: ConnectionStatusDetails!
    "Failed replication task count."
    failedTasks: Int!
    "Represents replication pair pause enablement status."
    isPaused: Boolean!
    "Network throttle details for source Rubrik cluster."
    networkThrottle: NetworkThrottle
    "Running replication task count."
    runningTasks: Int!
    "Source Rubrik cluster details."
    sourceCluster: ReplicationCluster!
    "Connection status of the replication pair (active, disconnected, or paused)."
    status: ReplicationPairConnectionStatus!
    "Storage (in bytes) consumed on target cluster by replicated snapshots."
    storage: Long!
    "Target Rubrik cluster details."
    targetCluster: ReplicationCluster!
}

type ReplicationPairConnection {
    count: Int!
    edges: [ReplicationPairEdge!]!
    nodes: [ReplicationPair!]!
    pageInfo: PageInfo!
}

type ReplicationPairEdge {
    cursor: String!
    node: ReplicationPair!
}

type ReplicationSource {
    id: String!
    sourceClusterAddress: String
    sourceClusterName: String!
    sourceClusterUuid: UUID!
    totalStorage: Long
}

type ReplicationSpec {
    replicationType: ReplicationTypeEnum!
    specificReplicationSpec: SpecificReplicationSpec
}

type ReplicationSpecV2 {
    awsRegion: String!
    "AWS location used as the replication target"
    awsTarget: AwsReplicationTarget!
    azureRegion: String!
    "Azure location used as the replication target"
    azureTarget: AzureReplicationTarget!
    "Cluster used as replication target"
    cluster: SlaReplicationCluster
    retentionDuration: SlaDuration
    targetMapping: TargetMapping
}

type ReplicationTarget {
    id: String!
    targetClusterAddress: String
    targetClusterName: String!
    targetClusterUuid: UUID!
    totalStorage: Long
}

type ReplicationToCloudLocationSpec {
    retentionDuration: SlaDuration
    targetMapping: TargetMapping
}

type ReplicationToCloudRegionSpec {
    cloudProvider: CloudProviderEnum!
    replicationTargetRegion: String!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
}

type ReportConfig {
    aggregations: [String!]!
    "Column selection for the report"
    columns: [String!]!
    "Type of report"
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report"
    filters: [ConfigFilter!]!
    "GroupBy selection for the report"
    groupBy: configGroupBy!
    id: Long!
    "Report name"
    name: String!
    sortBy: String!
    sortOrder: SortOrderEnum
}

type ReportFilter {
    name: String!
    values: [String!]!
}

type ReportFilterDetail {
    dataType: DataTypeEnum!
    defaultValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    type: FilterTypeEnum!
    values: [DisplayableValue!]!
}

type ReportFocus {
    enumValue: ReportFocusEnum!
}

type ReportGroupByDetail {
    aggregations: [DisplayableValue!]!
    allValues: [DisplayableValue!]!
    displayName: String!
    name: String!
    primaryGroupBy: String!
    secondaryAggregation: String
    secondaryGroupBy: String
}

type ReportSchema {
    aggregateColumns: [Column!]!
    allColumns: [Column!]!
    chartConfigs: [ChartConfig!]!
    filters: [ReportFilterDetail!]!
    groupBys: [ReportGroupByDetail!]!
    sortBy: Column!
    sortOrder: SortOrderEnum!
    tableColumns: [Column!]!
}

"""

Supported in v5.0+
"""
type RequestErrorInfo {
    """

    Required. Supported in v5.0+
    v5.0: The error message for failed ids.
    v5.1+: The error message for failed IDs.
    """
    message: String!
}

type RequestStatus {
    success: Boolean!
}

type RequestSuccess {
    success: Boolean!
}

type RequestedMatchDetails {
    requestedHashTypes: HashTypeEnum
}

type ResourceGroup {
    id: String!
    name: String!
}

type ResourceGroupConnection {
    count: Int!
    edges: [ResourceGroupEdge!]!
    nodes: [ResourceGroup!]!
    pageInfo: PageInfo!
}

type ResourceGroupEdge {
    cursor: String!
    node: ResourceGroup!
}

"Information about the resource being validated."
type ResourceInfo {
    "Id of the resource."
    resourceId: String!
    "Type od the resource"
    resourceType: ResourceType!
}

"Empty response type"
type ResponseSuccess {
    "Whether request returned successfully"
    success: Boolean!
}

"Taskchain ID of the taskchain to restore the specified snapshot"
type RestoreGCEInstanceReply {
    taskchainUuid: String!
}

type Result {
    appFid: String!
    id: String!
    success: Boolean!
}

type RetryBackupClusterResp {
    clusterUuid: String!
    eventSeriesId: String!
}

type RetryBackupResp {
    clusterResp: [RetryBackupClusterResp!]!
}

type Role {
    description: String!
    id: String!
    isReadOnly: Boolean!
    name: String!
    permissions: [Permission!]!
    protectableClusters: [String!]!
}

type RoleConnection {
    count: Int!
    edges: [RoleEdge!]!
    nodes: [Role!]!
    pageInfo: PageInfo!
}

type RoleEdge {
    cursor: String!
    node: Role!
}

type RoleStatus {
    hasRole: Boolean!
}

type RoleTemplate {
    description: String!
    id: String!
    name: String!
    permissions: [Permission!]!
}

type RoleTemplateConnection {
    count: Int!
    edges: [RoleTemplateEdge!]!
    nodes: [RoleTemplate!]!
    pageInfo: PageInfo!
}

type RoleTemplateEdge {
    cursor: String!
    node: RoleTemplate!
}

"Overall RU status"
type RollingUpgradeInfo {
    "List of nodes (names), currently being upgraded"
    ruCurrentNodes: [String!]!
    "List of RuNodeInfoEntry objects, one per node"
    ruNodeInfoList: [RollingUpgradeNodeInfoEntry!]!
}

"Detailed RU status of a node"
type RollingUpgradeNodeInfo {
    "Current state details"
    currentStateInfo: CurrentStateInfo
    "RU end time in seconds since epoch"
    ruEndTs: String!
    "RU start time in seconds since epoch"
    ruStartTs: String!
}

"RU node information entry"
type RollingUpgradeNodeInfoEntry {
    "Node name"
    nodeName: String!
    "Detailed RU status of a node"
    ruNodeInfo: RollingUpgradeNodeInfo
}

"Updated service account details"
type RotateServiceAccountSecretReply {
    accessTokenUri: String!
    clientId: String!
    clientSecret: String!
    name: String!
}

type Row {
    metadata: [Metadata!]!
    values: [CellData!]!
}

type RowConnection {
    columns: [Column!]!
    count: Int!
    edges: [RowEdge!]!
    nodes: [Row!]!
    pageInfo: PageInfo!
}

type RowEdge {
    cursor: String!
    node: Row!
}

type RunCustomAnalyzerReply {
    matches: [CustomAnalyzerMatch!]!
}

"Metadata for all current running jobs."
type RunningJobsReply {
    "Array of running jobs."
    runningJobs: [ClusterMetadata!]!
}

type SDDLPermission {
    access: String!
    accessType: AceQualifierEnum!
    cn: String!
    dn: String!
    flags: [AceFlagsEnum!]!
    resolutionType: ResolutionTypeEnum!
}

"Summary for the no. of objects protected by sla."
type SLAIdToObjectCount {
    objectCount: Int!
    slaId: String!
}

"""

Supported in v5.3+
"""
type SapHanaAddSystemResponse {
    """

    Required. Supported in v5.3+
    Status of the job scheduled to refresh the system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    The ID of the added SAP HANA system.
    """
    id: String!
}

type SapHanaAppMetadata {
    backupId: Long
    backupPrefix: String
    baseBackupId: Long
    baseFullSnapshotId: String
    files: [SapHanaDataBackupFile!]
    isExternalBackup: Boolean
    isRubrikTriggeredOnDemandBackup: Boolean
    rubrikSnapshotEndTime: DateTime
    rubrikSnapshotStartTime: DateTime
    sapHanaEndTime: DateTime
    sapHanaStartTime: DateTime
    snapshotType: String
}

type SapHanaConfig {
    differentialFrequency: SlaDuration
    incrementalFrequency: SlaDuration
    logRetention: SlaDuration
}

type SapHanaDataBackupFile {
    backupFileSizeInBytes: Long!
    destinationPath: String!
    externalBackupId: String!
    redoLogPositionOpt: Long
    serviceType: String!
    sourceId: Long!
    sourceType: String!
}

"Additional information about backup data path"
type SapHanaDataPathSpecObject {
    name: String!
}

type SapHanaDatabase implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & SapHanaSystemDescendantType & SapHanaSystemPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    dataPathSpec: SapHanaDataPathSpecObject
    dataPathType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    forceFull: Boolean!
    "The fid of the hierarchy object."
    id: UUID!
    info: SapHanaDatabaseInfoObject
    isRelic: Boolean!
    logSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana log snapshots by input"
        filter: SapHanaLogSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana log snapshots by field"
        sortBy: SapHanaLogSnapshotSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaLogSnapshotConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    primaryClusterUuid: UUID!
    recoverableRangeConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter sap hana recoverable ranges by input"
        filter: SapHanaRecoverableRangeFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort sap hana recoverable ranges by field"
        sortBy: SapHanaRecoverableRangeSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): SapHanaRecoverableRangeConnection!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    sapHanaSystem: SapHanaSystem!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    systemId: String!
}

type SapHanaDatabaseConnection {
    count: Int!
    edges: [SapHanaDatabaseEdge!]!
    nodes: [SapHanaDatabase!]!
    pageInfo: PageInfo!
}

type SapHanaDatabaseEdge {
    cursor: String!
    node: SapHanaDatabase!
}

"Additional information about backint and database configuration"
type SapHanaDatabaseInfoObject {
    approxDbSizeInMb: Long!
    backintPath: String!
    databaseType: String!
    logBackupIntervalSecs: Int!
    numChannels: Int!
    paramFilePath: String!
    status: String!
}

"""

Supported in v5.3+
"""
type SapHanaHost {
    """

    Required. Supported in v5.3+
    The IP address or fully qualified domain name of the SAP HANA host.
    """
    hostName: String!
    hostType: SapHanaHostHostTypeEnum
    """

    Required. Supported in v5.3+
    The ID of the SAP HANA system host.
    """
    hostUuid: String!
    """

    Supported in v5.3+
    The local name of the SAP HANA host.
    """
    sapHanaHostName: String
    """

    Required. Supported in v5.3+
    The status of the SAP HANA system host.
    """
    status: String!
}

"Information about sap hana hosts of the system"
type SapHanaHostObject {
    clusterUuid: UUID!
    host: PhysicalHost!
    hostName: String!
    hostType: String!
    hostUuid: String!
    status: String!
}

type SapHanaLogBackup {
    backupId: Long
    bytesTransferred: Long
    doesContainCatalogFile: Boolean
    endTime: DateTime
    files: [SapHanaLogBackupFiles!]
    startTime: DateTime
}

type SapHanaLogBackupFiles {
    backupId: Long
    backupSizeInBytes: Long
    destinationPath: String
    destinationType: String
    externalBackupId: String
    hostName: String
    logPositionInterval: SapHanaLogPositionInterval
    serviceTypeName: String
    sourceId: Long
    sourceTypeName: String
}

type SapHanaLogPositionInterval {
    newestLogPosition: Long
    oldestLogPosition: Long
}

type SapHanaLogSnapshot {
    "app metadata of log snapshots in SAP HANA"
    appMetadata: SapHanaLogSnapshotAppMetadata
    cdmId: String!
    clusterUuid: UUID!
    date: DateTime
    fid: String!
    internalTimestamp: Long!
    isArchived: Boolean!
    locationMap: String
    snappableId: String!
    snappableType: String!
}

type SapHanaLogSnapshotAppMetadata {
    backups: [SapHanaLogBackup!]
}

type SapHanaLogSnapshotConnection {
    count: Int!
    edges: [SapHanaLogSnapshotEdge!]!
    nodes: [SapHanaLogSnapshot!]!
    pageInfo: PageInfo!
}

type SapHanaLogSnapshotEdge {
    cursor: String!
    node: SapHanaLogSnapshot!
}

"""

Supported in v5.3+
"""
type SapHanaPatchSystemResponse {
    """

    Required. Supported in v5.3+
    Status of the job scheduled to refresh the SAP HANA system.
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    Summary of the updated SAP HANA system object.
    """
    systemSummary: SapHanaSystemSummary
}

type SapHanaRecoverableRange {
    baseFullSnapshotId: String
    cdmId: String!
    clusterUuid: UUID!
    dbId: String!
    endTime: DateTime
    fid: String!
    isArchived: Boolean!
    startTime: DateTime
}

type SapHanaRecoverableRangeConnection {
    count: Int!
    edges: [SapHanaRecoverableRangeEdge!]!
    nodes: [SapHanaRecoverableRange!]!
    pageInfo: PageInfo!
}

type SapHanaRecoverableRangeEdge {
    cursor: String!
    node: SapHanaRecoverableRange!
}

"""

Supported in v5.3+
"""
type SapHanaSslInfo {
    encryptionProvider: SapHanaSslInfoEncryptionProviderEnum!
    """

    Required. Supported in v5.3+
    The path where the encryption key for the SAP HANA system is stored.
    """
    keyStorePath: String!
}

type SapHanaSystem implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    clusterUuid: UUID!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): SapHanaSystemDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hosts: [SapHanaHostObject!]!
    "The fid of the hierarchy object."
    id: UUID!
    instanceNumber: String!
    lastRefreshTime: DateTime
    lastStatusUpdateTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): SapHanaSystemPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    sid: String!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    status: SapHanaSystemStatus!
    statusMessage: [String!]!
}

type SapHanaSystemConnection {
    count: Int!
    edges: [SapHanaSystemEdge!]!
    nodes: [SapHanaSystem!]!
    pageInfo: PageInfo!
}

type SapHanaSystemDescendantTypeConnection {
    count: Int!
    edges: [SapHanaSystemDescendantTypeEdge!]!
    nodes: [SapHanaSystemDescendantType!]!
    pageInfo: PageInfo!
}

type SapHanaSystemDescendantTypeEdge {
    cursor: String!
    node: SapHanaSystemDescendantType!
}

type SapHanaSystemEdge {
    cursor: String!
    node: SapHanaSystem!
}

"""

Supported in v5.3+
"""
type SapHanaSystemInfo {
    """

    Required. Supported in v5.3+
    The version of the SAP HANA system.
    """
    hanaVersion: String!
    """

    Required. Supported in v5.3+
    Indicates whether the SAP HANA system has replication enabled.
    """
    isSystemReplicationEnabled: Boolean!
}

type SapHanaSystemPhysicalChildTypeConnection {
    count: Int!
    edges: [SapHanaSystemPhysicalChildTypeEdge!]!
    nodes: [SapHanaSystemPhysicalChildType!]!
    pageInfo: PageInfo!
}

type SapHanaSystemPhysicalChildTypeEdge {
    cursor: String!
    node: SapHanaSystemPhysicalChildType!
}

"""

Supported in v5.3+
"""
type SapHanaSystemSummary {
    containerType: SapHanaSystemSummaryContainerTypeEnum
    """

    Required. Supported in v5.3+
    """
    hosts: [SapHanaHost!]!
    """

    Required. Supported in v5.3+
    The ID of the SAP HANA system.
    """
    id: String!
    """

    Required. Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String!
    """

    Supported in v5.3+
    The UTC timestamp for when the SAP HANA system was last refreshed.
    """
    lastRefreshTime: DateTime
    """

    Required. Supported in v5.3+
    The number of databases in the SAP HANA system.
    """
    numDbs: Int!
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String!
    slaAssignable: SlaAssignable
    """

    Supported in v5.3+
    """
    sslInfo: SapHanaSslInfo
    status: SapHanaSystemSummaryStatusEnum!
    """

    Supported in v5.3+
    The message associated with the current SAP HANA system status.
    """
    statusMessage: String
    """

    Supported in v5.3+
    """
    systemInfo: SapHanaSystemInfo
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String!
}

type ScaleRuntime {
    deadline: DateTime
    newCount: Int!
    oldCount: Int!
    taskchainUuid: String!
}

"Metadata for rendering a scheduled report."
type ScheduledReport {
    createdAt: DateTime!
    creator: User!
    dailyTime: LocalTime
    hasCSVAttachment: Boolean!
    hasPDFAttachment: Boolean!
    "ID of the scheduled report."
    id: Int!
    lastEditor: User!
    lastUpdatedAt: DateTime!
    monthlyDate: Int
    monthlyTime: LocalTime
    recipients: [User!]!
    "The custom report id corresponding to this scheduled report."
    reportId: Int!
    title: String!
    weeklyDays: [WeekDayEnum!]
    weeklyTime: LocalTime
}

type ScheduledReportConnection {
    count: Int!
    edges: [ScheduledReportEdge!]!
    nodes: [ScheduledReport!]!
    pageInfo: PageInfo!
}

type ScheduledReportEdge {
    cursor: String!
    node: ScheduledReport!
}

"""

Supported in v5.0+
"""
type SearchResponse {
    """

    Supported in v5.0+
    """
    fileVersions: [FileVersion!]!
    """

    Supported in v5.0+
    Just the filename without the whole path.
    """
    filename: String
    """

    Supported in v5.0+
    """
    path: String
}

"""

Supported in v5.0+
"""
type SearchResponseListResponse {
    """

    Supported in v5.0+
    List of matching objects.
    """
    data: [SearchResponse!]!
    """

    Supported in v5.0+
    If there is more.
    """
    hasMore: Boolean
    """

    Supported in v5.0+
    Total list responses.
    """
    total: Long
}

type SecurityGroup {
    id: String!
    name: String!
}

type SeedEnabledPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

type SeedInitialPoliciesReply {
    policies: [ClassificationPolicyDetail!]!
}

"Service Account"
type ServiceAccount {
    clientId: String!
    description: String!
    lastLogin: DateTime
    name: String!
    roles: [Role!]!
}

type ServiceAccountConnection {
    count: Int!
    edges: [ServiceAccountEdge!]!
    nodes: [ServiceAccount!]!
    pageInfo: PageInfo!
}

type ServiceAccountEdge {
    cursor: String!
    node: ServiceAccount!
}

"Enable or disable radar alerts for a snappable"
type SetSnappableAlertSettingReply {
    enabled: Boolean!
}

type SetupAzureO365ExocomputeResp {
    clusterId: String!
    taskchainId: String!
}

type ShareFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostShareDescendantType & HostSharePhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "Share type of this fileset"
    shareType: ShareTypeEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

type SlaAssignResult {
    success: Boolean!
}

"""

Supported in v5.0+
"""
type SlaAssignable {
    """

    Required. Supported in v5.0+
    v5.0-v5.1: ID of the configured SLA domain
    v5.2+: The ID of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1: name of the configured SLA domain
    v5.2+: The name of the SLA Domain configured directly on the Rubrik object.
    """
    configuredSlaDomainName: String!
    configuredSlaDomainType: ConfiguredSlaTypeEnum
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the Rubrik object.
    """
    id: String!
    """

    Supported in v5.1+
    v5.1: A Boolean that indicates whether the configured SLA domain is Retention Locked. When this value is 'true', the configured SLA domain is a Retention Lock SLA Domain.
    v5.2+: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
    """
    isConfiguredSlaDomainRetentionLocked: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The name of the Rubrik object.
    """
    name: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.1:
    v5.2+: The ID of the cluster that manages the Rubrik object.
    """
    primaryClusterId: String!
    """

    Supported in v5.2+
    The UTC time when the SLA Domain was last updated.
    """
    slaLastUpdateTime: DateTime
}

type SlaAuditDetail {
    applyToExistingSnapshots: Boolean!
    cluster: Cluster
    currentSlaSummary: SlaDomain
    previousSlaSummary: SlaDomain
    timestamp: DateTime
    userAction: String!
    userName: String!
}

"Configuration of the SLA of a snapshot."
type SlaConfig {
    "ID of the SLA."
    id: String!
    "Name of the SLA."
    name: String!
}

type SlaDomainConnection {
    count: Int!
    edges: [SlaDomainEdge!]!
    nodes: [SlaDomain!]!
    pageInfo: PageInfo!
}

type SlaDomainEdge {
    cursor: String!
    node: SlaDomain!
}

"SLA Domain with warnings detail"
type SlaDomainWithWarnings {
    slaDomain: SlaDomain!
    warnings: [SlaWarning!]!
}

type SlaDuration {
    duration: Int!
    unit: RetentionUnitEnum!
}

"Type that contains SLA name and ID."
type SlaInfo {
    "ID of SLA."
    id: String!
    "Name of SLA."
    name: String!
}

type SlaLogFrequencyConfigResult {
    retention: SlaDuration
}

"Information about the most recently attempted SLA migration."
type SlaMigration {
    "Failure message."
    msg: String!
    "Status of the migration."
    status: SlaMigrationStatus!
    "Taskchain ID for migration."
    taskchainId: String!
}

"Information about eligibility of the SLA for migration."
type SlaMigrationEligibility {
    "Reason for the SLA being ineligible for migration."
    ineligibilityReason: SlaMigrationIneligibilityReason!
    "Specifies whether the SLA is eligible for migration."
    isEligible: Boolean!
}

"SLA migration information."
type SlaMigrationInfo {
    "Information about eligibility of the SLA for migration."
    eligibility: SlaMigrationEligibility
    "Information about the most recently attempted SLA migration."
    latestMigration: SlaMigration
}

"Replication cluster specific information."
type SlaReplicationCluster {
    "Id of replication cluster."
    id: UUID!
    "Name of replication cluster."
    name: String!
}

type SlaResult {
    success: Boolean!
}

"SLA taskchain information for migration."
type SlaTaskchainInfo {
    "Error message when taskchain can not be scheduled."
    errMsg: String!
    "SLA ID."
    slaId: String!
    "Taskchain ID."
    taskchainId: String!
}

"Warning for SLA Assignment for each object"
type SlaWarning {
    code: AssignSLAWarningsEnum!
    objectIds: [String!]!
    severity: WarningSeverityEnum!
}

type SnapMirrorCloud implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & NasNamespaceDescendantType & NasSystemDescendantType & NasVolumeDescendantType & NasVolumeLogicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type SnapMirrorCloudDetail {
    archiveStorage: Long
    archivedSnapshotCount: Int
    localStorage: Long
    protectionDate: DateTime
    snapMirrorCloudSummary: SnapMirrorCloudSummary
    snapshotCount: Int
}

type SnapMirrorCloudDetailList {
    "Required. A list of SnapMirrorCloudDetail objects."
    snapMirrorCloudDetails: [SnapMirrorCloudDetail!]!
}

type SnapMirrorCloudSummary {
    "ID of the effective SLA Domain for this SnapMirror Cloud protected object."
    effectiveSlaDomainId: String
    "Name of the effective SLA Domain for this SnapMirror Cloud protected object."
    effectiveSlaDomainName: String
    "Optional field containing the Polaris managed ID of the effective SLA domain, if it is managed by Polaris."
    effectiveSlaDomainPolarisManagedId: String
    "Optional Boolean value that specifies whether the effective SLA Domain of a SnapMirror Cloud protected object is retention locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not retention locked."
    isEffectiveSlaDomainRetentionLocked: Boolean
    "Required. "
    isRelic: Boolean!
    "Required. "
    nasNamespaceId: String!
    "Required. "
    nasNamespaceName: String!
    "Required. "
    nasSystemId: String!
    "Required. "
    nasSystemName: String!
    "Required. "
    nasVolumeId: String!
    "Required. "
    nasVolumeName: String!
    relationshipUuid: String
    slaAssignable: SlaAssignable
    snapMirrorLabel: String
}

"An object that can be snapshotted."
type Snappable {
    archivalComplianceStatus: String
    archivalSnapshotLag: Int
    "The number of snapshots that have been archived."
    archiveSnapshots: Int
    "The amount of storage taken by archived snapshots."
    archiveStorage: Long
    awaitingFirstFull: Boolean
    "The cluster the snappable belongs to"
    cluster: Cluster
    "The current compliance status of the snappable."
    complianceStatus: ComplianceStatusEnum
    "The change from transferred bytes to physical bytes"
    dataReduction: Float
    fid: UUID
    "The id of the snappable."
    id: String!
    "The timestamp of the last taken snapshot."
    lastSnapshot: DateTime
    latestArchivalSnapshot: DateTime
    latestReplicationSnapshot: DateTime
    localOnDemandSnapshots: Int
    localSLASnapshots: Int
    "The number of snapshots locally present."
    localSnapshots: Int
    location: String!
    "Logical bytes taken by snapshots of this snappable."
    logicalBytes: Long
    logicalDataReduction: Float
    "The number of snapshots that were missed."
    missedSnapshots: Int
    "The name of the snappable."
    name: String!
    "The object type of the snappable."
    objectType: ObjectTypeEnum!
    "Physical bytes taken by snapshots of this snappable."
    physicalBytes: Long
    "The date and time when the snappable was last protected."
    protectedOn: DateTime
    "The protection status of the snappable."
    protectionStatus: ProtectionStatusEnum!
    "The time this snappable data was pulled from cdm."
    pullTime: DateTime!
    "The number of snapshots that have been replicated."
    replicaSnapshots: Int
    "The amount of storage taken by replicated snapshots."
    replicaStorage: Long
    replicationComplianceStatus: String
    replicationSnapshotLag: Int
    "The sla domain of the snappable."
    slaDomain: SlaDomain
    "The total number of snapshots present for the snapshot."
    totalSnapshots: Int
    "Bytes ingested over the network for this snappable."
    transferredBytes: Long
}

type SnappableAggregation {
    archiveStorage: Long!
    logicalBytes: Long!
    missedSnapshots: Int!
    physicalBytes: Long!
    replicaStorage: Long!
    totalSnapshots: Int!
}

"A snappable which has a snapshot or children with anomalous activity."
type SnappableAnomaly {
    """

    A list of children belonging to the snappable which were also determined
    to have snapshots with anomalous activity.
    """
    anomalousChildren: [SnappableAnomaly!]!
    """

    The creation date of the snapshot which was
    determined to have anomalous activity.
    """
    anomalousSnapshotDate: DateTime!
    "The fid of the snapshot which was determined to have anomalous activity."
    anomalousSnapshotFid: String!
    "The cdm id of the snapshot which was determined to have anomalous activity."
    anomalousSnapshotId: String!
    "The name of the Rubrik cluster associated with the object."
    clusterName: String!
    "The uuid of the cluster to which the snappable belongs."
    clusterUuid: String!
    "The number of files created within the snapshot."
    createdFileCount: Long!
    "The number of files deleted within the snapshot."
    deletedFileCount: Long!
    "The level of encryption detected within the snapshot."
    encryption: EncryptionLevel!
    "The location of the object."
    location: String!
    "The number of files modified within the snapshot."
    modifiedFileCount: Long!
    "The object type of the snappable."
    objectType: HierarchyObjectTypeEnum!
    "The severity of the anomalous activity detected within the snapshot."
    severity: ActivitySeverity!
    "The fid of the snappable."
    snappableFid: String!
    "The cdm id of the snappable."
    snappableId: String!
    "The name of the snappable."
    snappableName: String!
    "The number of suspicious files within the snapshot."
    suspiciousFileCount: Long!
    """

    The total number of children belong to the snappable, regardless
    of whether they have snapshots containing anomalous activity.
    """
    totalChildren: Long!
}

type SnappableAnomalyConnection {
    aggregation: AggregatedValues!
    count: Int!
    edges: [SnappableAnomalyEdge!]!
    nodes: [SnappableAnomaly!]!
    pageInfo: PageInfo!
}

type SnappableAnomalyEdge {
    cursor: String!
    node: SnappableAnomaly!
}

type SnappableChart {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
}

type SnappableConnection {
    aggregation: SnappableAggregation!
    count: Int!
    edges: [SnappableEdge!]!
    nodes: [Snappable!]!
    pageInfo: PageInfo!
}

type SnappableEdge {
    cursor: String!
    node: Snappable!
}

"Snappable data with groupby info applied to it."
type SnappableGroupBy {
    "The data groupby info."
    groupByInfo: SnappableGroupByInfo!
    "Paginated snappable data."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    "Further provide groupings for the data."
    snappableGroupBy(
        "group snappables by field"
        groupBy: SnappableGroupByEnum!
    ): [SnappableGroupBy!]!
}

"Snappable data with groupby info applied to it with data previous to specified time"
type SnappableGroupByAtSpecifiedTime {
    "The data groupby info."
    groupByInfo: SnappableGroupByInfo!
    "Paginated snappable data."
    snappableConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snappables by field"
        sortBy: SnappableSortByEnum = Name,
        "sort order"
        sortOrder: SortOrderEnum
    ): SnappableConnection!
    "Further provide groupings for the data."
    snappableGroupBy(
        "group snappables by field"
        groupBy: SnappableGroupByEnum!
    ): [SnappableGroupBy!]!
}

type SnappableGroupByAtSpecifiedTimeConnection {
    count: Int!
    edges: [SnappableGroupByAtSpecifiedTimeEdge!]!
    nodes: [SnappableGroupByAtSpecifiedTime!]!
    pageInfo: PageInfo!
}

type SnappableGroupByAtSpecifiedTimeEdge {
    cursor: String!
    node: SnappableGroupByAtSpecifiedTime!
}

type SnappableGroupByConnection {
    count: Int!
    edges: [SnappableGroupByEdge!]!
    nodes: [SnappableGroupBy!]!
    pageInfo: PageInfo!
}

type SnappableGroupByEdge {
    cursor: String!
    node: SnappableGroupBy!
}

type SnappableInstanceType {
    awsInstanceType: AwsInstanceType!
}

type SnappableInstanceTypeConnection {
    count: Int!
    edges: [SnappableInstanceTypeEdge!]!
    nodes: [SnappableInstanceType!]!
    pageInfo: PageInfo!
    suggestInstanceType: SnappableInstanceType
}

type SnappableInstanceTypeEdge {
    cursor: String!
    node: SnappableInstanceType!
}

"Count, snappable_id, snappable_type of how many times Radar has scanned an object"
type SnappableScanned {
    count: Long!
    snappableId: String!
    snappableType: String!
}

type SnappableSecurityGroup {
    description: String!
    id: String!
    name: String!
    ownerId: String!
    securityGroupId: String!
    "vpc of the security group"
    vpc: Vpc
}

type SnappableSecurityGroupConnection {
    count: Int!
    edges: [SnappableSecurityGroupEdge!]!
    nodes: [SnappableSecurityGroup!]!
    pageInfo: PageInfo!
}

type SnappableSecurityGroupEdge {
    cursor: String!
    node: SnappableSecurityGroup!
}

type SnappableStorageVolumeType {
    awsStorageVolumeType: AwsStorageVolumeType!
}

type SnappableStorageVolumeTypeConnection {
    count: Int!
    edges: [SnappableStorageVolumeTypeEdge!]!
    nodes: [SnappableStorageVolumeType!]!
    pageInfo: PageInfo!
}

type SnappableStorageVolumeTypeEdge {
    cursor: String!
    node: SnappableStorageVolumeType!
}

type SnappableSubnet {
    availabilityZone: String!
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    subnetId: String!
    "vpc of the subnet"
    vpc: Vpc
}

type SnappableSubnetConnection {
    count: Int!
    edges: [SnappableSubnetEdge!]!
    nodes: [SnappableSubnet!]!
    pageInfo: PageInfo!
}

type SnappableSubnetEdge {
    cursor: String!
    node: SnappableSubnet!
}

type SnappableTable {
    focus: ReportFocusEnum!
    groupBy: [SnappableGroupByEnum!]
    name: String!
    selectedColumns: [SnappableTableColumnEnum!]!
    sortBy: SnappableSortByEnum
    sortOrder: SortOrderEnum
}

type SnappableTypeSummary {
    count: Int!
    snappableType: HierarchyObjectTypeEnum!
}

type SnapshotDelta {
    deltaAmount: Long!
    deltaType: DeltaTypeEnum!
}

"A generic snapshot type"
type SnapshotDistribution {
    "The id of the snappable"
    id: UUID!
    "Number of on demand snapshots"
    onDemandCount: Long!
    "Number of retrieved snapshots"
    retrievedCount: Long!
    "Number of scheduled snapshots"
    scheduledCount: Long!
    "Total number of snapshots"
    totalCount: Long!
}

type SnapshotFile {
    absolutePath: String!
    displayPath: String!
    fileMode: FileModeEnum!
    filename: String!
    lastModified: DateTime!
    path: String!
    size: Long!
    statusMessage: String!
}

type SnapshotFileConnection {
    count: Int!
    edges: [SnapshotFileEdge!]!
    nodes: [SnapshotFile!]!
    pageInfo: PageInfo!
}

type SnapshotFileDelta {
    childrenDeltas: [SnapshotDelta!]!
    file: SnapshotFile!
    selfDeltas: [SnapshotDelta!]!
}

type SnapshotFileDeltaConnection {
    count: Int!
    currentSnapshot: CdmSnapshot!
    edges: [SnapshotFileDeltaEdge!]!
    nodes: [SnapshotFileDelta!]!
    pageInfo: PageInfo!
    previousSnapshot: CdmSnapshot
}

type SnapshotFileDeltaEdge {
    cursor: String!
    node: SnapshotFileDelta!
}

type SnapshotFileEdge {
    cursor: String!
    node: SnapshotFile!
}

"""

Supported in v5.2+
"""
type SnapshotLocationRetentionInfo {
    """

    Supported in v5.2+
    Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
    """
    expirationTime: DateTime
    """

    Required. Supported in v5.2+
    ID of the location.
    """
    id: String!
    """

    Supported in v5.2+
    A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
    """
    isExpirationDateCalculated: Boolean
    """

    Supported in v5.2+
    Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
    """
    isExpirationInformationUnavailable: Boolean
    """

    Required. Supported in v5.2+
    Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
    """
    isSnapshotPresent: Boolean!
    """

    Required. Supported in v5.2+
    Name of the location.
    """
    name: String!
    """

    Supported in v5.2+
    The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
    """
    snapshotFrequency: String
}

type SnapshotResult {
    snapshotFid: String!
    snapshotTime: Long!
}

type SnapshotResultConnection {
    count: Int!
    edges: [SnapshotResultEdge!]!
    nodes: [SnapshotResult!]!
    pageInfo: PageInfo!
}

type SnapshotResultEdge {
    cursor: String!
    node: SnapshotResult!
}

"""

Supported in v5.2+
"""
type SnapshotRetentionInfo {
    """

    Required. Supported in v5.2+
    List of snapshot retention information on the archival locations.
    """
    archivalInfos: [SnapshotLocationRetentionInfo!]!
    """

    Required. Supported in v5.2+
    Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations.
    """
    cloudNativeLocationInfo: [SnapshotLocationRetentionInfo!]!
    """

    Supported in v5.2+
    Snapshot retention information on the local cluster.
    """
    localInfo: SnapshotLocationRetentionInfo
    """

    Required. Supported in v5.2+
    List of snapshot retention information on the replicated locations.
    """
    replicationInfos: [SnapshotLocationRetentionInfo!]!
}

type SnapshotSchedule {
    daily: DailySnapshotSchedule
    hourly: HourlySnapshotSchedule
    minute: MinuteSnapshotSchedule
    monthly: MonthlySnapshotSchedule
    quarterly: QuarterlySnapshotSchedule
    weekly: WeeklySnapshotSchedule
    yearly: YearlySnapshotSchedule
}

"DataType representing the sub objects captured in a snapshot."
type SnapshotSubObj {
    "A volume captured in a volume group snapshot."
    volumeGroupSubObj: VolumeGroupSubObject
}

"The sub objects captured in a snapshot."
type SnapshotSubObject {
    "The sub object captured in a snapshot"
    subObj: SnapshotSubObj!
}

type SonarContentReportChart {
    focus: ReportFocusEnum!
    groupBy: [SonarContentReportGroupByEnum!]
    name: String!
}

type SonarContentReportTable {
    focus: ReportFocusEnum!
    groupBy: [SonarContentReportGroupByEnum!]
    name: String!
    selectedColumns: [SonarContentReportTableColumnEnum!]!
    sortBy: SonarContentReportSortByEnum
    sortOrder: SortOrderEnum
}

type SonarContentReportTableRow {
    analyzerGroupResults: [AnalyzerGroupResult!]!
    analyzerId: String!
    analyzerResults: [AnalyzerResult!]!
    cluster: String!
    fileName: String!
    filesWithHits: Int!
    hits: Hits
    id: String!
    location: String!
    objectName: String!
    objectType: HierarchyObjectTypeEnum!
    path: String!
    policyId: String!
    size: Long!
    slaDomainId: String!
    snappableFid: String!
    snapshotTimestamp: Long!
}

type SonarContentReportTableRowConnection {
    count: Int!
    edges: [SonarContentReportTableRowEdge!]!
    nodes: [SonarContentReportTableRow!]!
    pageInfo: PageInfo!
}

type SonarContentReportTableRowEdge {
    cursor: String!
    node: SonarContentReportTableRow!
}

type SonarReportChart {
    focus: ReportFocusEnum!
    groupBy: [SonarReportGroupByEnum!]
    name: String!
}

type SonarReportGroupByResult {
    count: Long!
    groupByValue: String!
    timeSeriesResults: [TimeSeriesResult!]!
}

type SonarReportGroupByResultConnection {
    count: Int!
    edges: [SonarReportGroupByResultEdge!]!
    nodes: [SonarReportGroupByResult!]!
    pageInfo: PageInfo!
}

type SonarReportGroupByResultEdge {
    cursor: String!
    node: SonarReportGroupByResult!
}

type SonarReportTable {
    focus: ReportFocusEnum!
    groupBy: [SonarReportGroupByEnum!]
    name: String!
    selectedColumns: [SonarReportTableColumnEnum!]!
    sortBy: SonarReportSortByEnum
    sortOrder: SortOrderEnum
}

type SonarReportTableRow {
    numHighRiskLocations: Int!
    numObjects: Int!
    numViolatedFiles: Int!
    policyId: String!
    policyName: String!
    policyStatus: SonarReportTablePolicyStatusEnum!
    violations: Int!
}

type SonarReportTableRowConnection {
    count: Int!
    edges: [SonarReportTableRowEdge!]!
    nodes: [SonarReportTableRow!]!
    pageInfo: PageInfo!
}

type SonarReportTableRowEdge {
    cursor: String!
    node: SonarReportTableRow!
}

type Source {
    stringValue: String!
}

type SourceBlueprintInfo {
    blueprintId: String!
    sourceChildInfos: [SourceChildInfo!]!
}

type SourceChildInfo {
    childInfo: ChildInfo!
    failoverChildId: String!
}

"Configuration Params for the mosaic source object."
type SourceConfigParams {
    "List of cassandra yaml file paths."
    cassandraYaml: [String!]!
    "List of dse yaml file paths"
    dseYaml: [String!]!
    "Path to https certificate."
    httpsCertificate: String!
    "JMX Username."
    jmxUser: String!
    "Database username."
    sourceDbUser: String!
    "Port number used for https connection."
    sourceHttpsPort: Int!
    sourcePort: Int!
    "Configured RPC port on source."
    sourceRpcPort: Int!
    "Source SSL Configuration."
    sslOptions: CassandraSslOptions
}

type SpecificReplicationSpec {
    bidirectionalSpec: BidirectionalReplicationSpec
    cloudLocationSpec: ReplicationToCloudLocationSpec
    cloudRegionSpec: ReplicationToCloudRegionSpec
    unidirectionalSpec: UnidirectionalReplicationSpec
}

type StartCrawlReply {
    crawlId: String!
}

type StartTimeAttributes {
    dayOfWeek: DayOfWeekOpt
    hour: Int!
    minute: Int!
}

type StartUpgradeReply {
    context: Context
    "Event series id of rolling upgrade"
    eventSeriesId: String!
}

type Status {
    stringValue: String!
}

"Stop job instance output."
type StopJobInstanceReply {
    "True if stop process is initiated for job instance."
    success: Boolean!
}

type StorageAccount {
    accessTier: TierEnum!
    id: String!
    kind: String!
    name: String!
    regionName: String!
    resourceGroup: ResourceGroup
    sku: SkuEnum!
}

type StorageAccountConnection {
    count: Int!
    edges: [StorageAccountEdge!]!
    nodes: [StorageAccount!]!
    pageInfo: PageInfo!
}

type StorageAccountEdge {
    cursor: String!
    node: StorageAccount!
}

"Metadata for mosaic store."
type StoreMetadata {
    "S3 bucket name"
    s3Bucket: String
    "S3 account region"
    s3Region: String
}

type Subnet {
    id: String!
    name: String!
    securityGroup: SecurityGroup
}

type SubnetConnection {
    count: Int!
    edges: [SubnetEdge!]!
    nodes: [Subnet!]!
    pageInfo: PageInfo!
}

type SubnetEdge {
    cursor: String!
    node: Subnet!
}

"Represents a subnet group on AWS."
type SubnetGroup {
    "Amazon Resource Name (ARN) of the subnet group."
    arn: String!
    "Name of the subnet group."
    name: String!
    "Subnets associated with the subnet group."
    subnets: [AwsNativeSubnet!]!
    "Virtual Private Cloud (VPC) corresponding to the subnet group."
    vpcId: String!
}

"Contains the success details about RBA connectivity taskchains"
type Success {
    snappableId: String!
    taskchainId: String!
}

type SupportPortalLoginReply {
    status: UpgradeStatus
}

type SupportPortalLogoutReply {
    status: UpgradeStatus
}

type SupportPortalStatusReply {
    isLoggedIn: Boolean!
    status: UpgradeStatus
    username: String!
}

"Response type for getting information about a support tunnel"
type SupportTunnelInfoResp {
    enabledTime: DateTime
    inactivityTimeoutInSeconds: Long
    isTunnelEnabled: Boolean!
    lastActivityTime: DateTime
    nodeId: String!
    port: Long
}

type SyslogConfig {
    id: Int!
    notificationConf: CommonNotificationConfig
    syslogConf: SyslogSetting
}

type SyslogSetting {
    facility: SyslogFacilityTypeEnum!
    severity: SyslogSeverityTypeEnum!
}

type TableFilters {
    ProtectionTaskDetailsTable: ProtectionTaskDetailsTableFilter!
    RecoveryTaskDetailsTable: RecoveryTaskDetailsTableFilter!
}

type Tag {
    key: String!
    value: String!
}

"key value pair of string"
type TagObject {
    "key of the tag or label"
    key: String!
    "value of the tag or label"
    value: String!
}

"Represents the sla id and name"
type TagRuleEffectiveSla {
    id: String!
    name: String!
}

"Tag represents a tag key value pair"
type TagRuleTag {
    matchAllValues: Boolean!
    tagKey: String!
    tagValue: String!
}

"Represents the error in response to triggering the on-demand snapshot of the snappable"
type TakeOnDemandSnapshotError {
    error: String!
    snappableId: String!
}

"Represents the response to the take on-demand snapshot operation. For each snappable ID that the on-demand snapshot was triggered, it either ends up being in the taskchainUuids or the errors map depending on if the operation succeeded or failed respectively."
type TakeOnDemandSnapshotReply {
    errors: [TakeOnDemandSnapshotError!]!
    taskchainUuids: [TakeOnDemandSnapshotTaskchainUuid!]!
}

"Represents the taskchain UUID in response to triggering the on-demand snapshot of snappable"
type TakeOnDemandSnapshotTaskchainUuid {
    snappableId: String!
    taskchainUuid: String!
}

type TakeScreenshotReply {
    screenshots: [String!]!
}

"Result of the delete target operation"
type TargetDeleteResult {
    success: Boolean!
}

"Target Mapping info"
type TargetMapping {
    "Connection status for archival group."
    connectionStatus: ArchivalGroupConnectionStatus
    groupType: ArchivalGroupTypeEnum!
    id: UUID!
    name: String!
    targetTemplate: TargetTemplate
    targetType: TargetTypeEnum!
    targets: [Target!]
}

type TargetMappingDeletionResult {
    success: Boolean!
}

type TargetPauseResult {
    success: Boolean!
}

type TargetResumeResult {
    success: Boolean!
}

type TargetSite {
    stringValue: String!
}

"A task details."
type TaskDetail {
    archivalTarget: String
    clusterLocation: String!
    clusterName: String!
    clusterType: String!
    clusterUuid: UUID!
    dataReduction: Float
    dataTransferred: Long
    dedupRatio: Float
    directArchive: String
    duration: Long!
    endTime: DateTime!
    failureReason: String
    id: Long!
    location: String!
    logicalBytes: Long
    logicalDataReduction: Float
    logicalDedupRatio: Float
    objectFid: String!
    objectName: String!
    objectType: String!
    physicalBytes: Long
    protectedVolume: String
    recoveryPoint: String
    recoveryPointType: String
    replicationSource: String
    replicationTarget: String
    reportJobInstanceId: String!
    slaDomainId: String!
    slaDomainName: String!
    snapshotConsistency: String
    startTime: DateTime!
    status: String!
    taskCategory: String!
    taskType: String!
    totalFilesTransferred: Long
    userName: String
}

type TaskDetailChart {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
}

type TaskDetailClusterType {
    stringValue: String!
}

type TaskDetailConnection {
    count: Int!
    edges: [TaskDetailEdge!]!
    nodes: [TaskDetail!]!
    pageInfo: PageInfo!
}

type TaskDetailEdge {
    cursor: String!
    node: TaskDetail!
}

"Task detail with groupby info applied to it."
type TaskDetailGroupBy {
    "The data groupby info."
    groupByInfo: TaskDetailGroupByInfo!
    "Paginated task detail data."
    taskDetailConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task detail by field"
        sortBy: TaskDetailSortByEnum = EndTime,
        "task detail sort order"
        sortOrder: SortOrderEnum = Desc
    ): TaskDetailConnection!
    taskDetailGroupBy(
        "group task detail by a field"
        groupBy: TaskDetailGroupByEnum!
    ): [TaskDetailGroupBy!]!
}

type TaskDetailGroupByConnection {
    count: Int!
    edges: [TaskDetailGroupByEdge!]!
    nodes: [TaskDetailGroupBy!]!
    pageInfo: PageInfo!
}

type TaskDetailGroupByEdge {
    cursor: String!
    node: TaskDetailGroupBy!
}

type TaskDetailObjectType {
    stringValue: String!
}

type TaskDetailTable {
    focus: ReportFocusEnum!
    groupBy: [TaskDetailGroupByEnum!]
    name: String!
    selectedColumns: [TaskDetailTableColumnEnum!]!
    sortBy: TaskDetailSortByEnum
    sortOrder: SortOrderEnum
}

"A backup task summary."
type TaskSummary {
    clusterUuid: UUID!
    date: DateTime!
    "Location of the associated backup task summary."
    location: String
    "The number of the canceled tasks."
    numCanceled: Int!
    "The number of the expected tasks."
    numExpected: Int!
    "The number of the failed and missed tasks."
    numFailed: Int!
    "The number of the successful tasks."
    numSucceeded: Int!
    "Object name of the associated backup task summary."
    objectName: String!
    "Object type of the associated backup task summary."
    objectType: ObjectTypeEnum!
    slaDomainId: String!
    "slaDomain name of the object."
    slaDomainName: String!
    "Snappable Id of the associated backup task summary"
    snappbleId: UUID!
}

type TaskSummaryAggregation {
    NumOfCanceled: Int!
    NumOfExpected: Int!
    NumOfFailed: Int!
    NumOfSucceeded: Int!
}

type TaskSummaryChart {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
}

type TaskSummaryConnection {
    aggregation: TaskSummaryAggregation!
    count: Int!
    edges: [TaskSummaryEdge!]!
    nodes: [TaskSummary!]!
    pageInfo: PageInfo!
}

type TaskSummaryEdge {
    cursor: String!
    node: TaskSummary!
}

"Task summary with groupby info applied to it."
type TaskSummaryGroupBy {
    "The data groupby info."
    groupByInfo: TaskSummaryGroupByInfo!
    "Paginated task summary data."
    taskSummaryConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort task summary by field"
        sortBy: TaskSummarySortByEnum = ObjectName,
        "sort order"
        sortOrder: SortOrderEnum
    ): TaskSummaryConnection!
    taskSummaryGroupBy(
        "group task summary by a field"
        groupBy: TaskSummaryGroupByEnum!
    ): [TaskSummaryGroupBy!]!
}

type TaskSummaryGroupByConnection {
    count: Int!
    edges: [TaskSummaryGroupByEdge!]!
    nodes: [TaskSummaryGroupBy!]!
    pageInfo: PageInfo!
}

type TaskSummaryGroupByEdge {
    cursor: String!
    node: TaskSummaryGroupBy!
}

type TaskSummaryTable {
    focus: ReportFocusEnum!
    groupBy: [TaskSummaryGroupByEnum!]
    name: String!
    selectedColumns: [TaskReportTableColumnEnum!]!
    sortBy: TaskSummarySortByEnum
    sortOrder: SortOrderEnum
}

"Taskchain"
type Taskchain {
    account: String!
    component: String!
    config: String!
    currentTaskExecutionAttempts: Int!
    currentTaskIndex: Int!
    endTime: DateTime
    error: String!
    id: Long!
    jobId: Long!
    jobType: String!
    name: String!
    parentTaskchainId: String!
    podName: String!
    priority: Int!
    progress: Long!
    progressedAt: DateTime
    startTime: DateTime
    state: TaskchainStateEnum!
    taskchainUuid: String!
    workflowName: String!
}

type TaskchainInfo {
    appId: String!
    taskchainId: String!
}

"A range of time"
type TimeRange {
    "End of the time range"
    end: DateTime!
    "Start of the time range"
    start: DateTime!
}

"A range of time and the unit of that range"
type TimeRangeWithUnit {
    "End of the time range"
    end: DateTime!
    "Start of the time range"
    start: DateTime!
    "Unit of the time range"
    unit: TimeUnitEnum!
}

type TimeSeriesResult {
    count: Long!
    timestamp: String!
}

type TimelineEntry {
    day: String!
    hits: Hits
    policyId: String!
}

"TOTP status for a user."
type TotpStatus {
    "Whether totp is enabled for the user."
    isEnabled: Boolean!
    "Whether totp is enforced."
    isEnforced: Boolean!
    "Whether totp is enforced at the user level."
    isEnforcedUserLevel: Boolean!
    "Whether TOTP is supported for the user."
    isSupported: Boolean!
    "The timestamp of last TOTP configuration update."
    totpConfigUpdateAt: DateTime
}

"Lambda job information on certain cluster "
type TriggerRansomwareDetectionReply {
    clusterUuid: String!
    jobId: String!
}

"Host details object for Udf Instance."
type UdfHostObject {
    "Uuid of cluster connected to the host."
    clusterUuid: UUID!
    "Name of the host."
    hostName: String!
    "Type of host."
    hostType: String!
    "Uuid of the host object."
    hostUuid: String!
    "Status of host."
    status: String!
}

"Udf Instance details object."
type UdfInstance implements CdmHierarchyObject & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "Id associated with Udf instance in CDM."
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "Type of database of the generic Udf instance."
    databaseType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "List of hosts associated with the udf instance."
    hosts: [UdfHostObject!]!
    "The fid of the hierarchy object."
    id: UUID!
    "Udf Instance Id."
    instanceId: String!
    "Meta data specific to different database instance types covered under udf instance structure."
    instanceSpecificMetaData: InstanceSpecificMetaData!
    "Time stamp of when last metadata sync happened for the Udf instance."
    lastSyncTime: DateTime
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Uuid of the primary cluster."
    primaryClusterUuid: UUID!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "Connection of all the descendants of the UDF instance."
    udfInstanceDescendantConnection: UdfInstanceDescendantTypeConnection!
    "Connection of all the physical children of the UDF instance."
    udfInstancePhysicalChildConnection: UdfInstancePhysicalChildTypeConnection!
}

type UdfInstanceConnection {
    count: Int!
    edges: [UdfInstanceEdge!]!
    nodes: [UdfInstance!]!
    pageInfo: PageInfo!
}

type UdfInstanceDescendantTypeConnection {
    count: Int!
    edges: [UdfInstanceDescendantTypeEdge!]!
    nodes: [UdfInstanceDescendantType!]!
    pageInfo: PageInfo!
}

type UdfInstanceDescendantTypeEdge {
    cursor: String!
    node: UdfInstanceDescendantType!
}

type UdfInstanceEdge {
    cursor: String!
    node: UdfInstance!
}

type UdfInstancePhysicalChildTypeConnection {
    count: Int!
    edges: [UdfInstancePhysicalChildTypeEdge!]!
    nodes: [UdfInstancePhysicalChildType!]!
    pageInfo: PageInfo!
}

type UdfInstancePhysicalChildTypeEdge {
    cursor: String!
    node: UdfInstancePhysicalChildType!
}

type UnidirectionalReplicationSpec {
    replicationTargetId: String!
    replicationTargetName: String!
    retention: Int!
    retentionUnit: RetentionUnitEnum!
    "The cluster to which this SLA will replicate the snapshots."
    targetCluster: Cluster
}

"Response of the operation to update an AWS cloud account."
type UpdateAwsCloudAccountReply {
    "Contains success response message."
    message: String
}

"Response of the operation to Update Azure Cloud Account."
type UpdateAzureCloudAccountResponse {
    "Status of the operation to update Azure Cloud Account."
    status: [UpdateAzureCloudAccountStatus!]!
}

"Status of the operation to Update Azure Cloud Account."
type UpdateAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Specifies whether the update of Azure Cloud Account was successful. When true, the update was successful."
    isSuccess: Boolean!
}

"Output for updateCloudNativeAwsStorageSetting mutation"
type UpdateCloudNativeAwsStorageSettingReply {
    targetMapping: TargetMapping!
}

"Updated storage settings info for Azure"
type UpdateCloudNativeAzureStorageSettingReply {
    targetMapping: TargetMapping!
}

"The status of update indexing status call. For each snappable ID in the request: an entry in errors if failed."
type UpdateCloudNativeIndexingStatusReply {
    errors: [UpdateIndexingStatusError!]!
}

"The mutation response on editing an existing Db2 instance."
type UpdateDb2InstanceReply {
    "Required. Status of the job scheduled to refresh the instance."
    asyncRequestStatus: AsyncRequestStatus
}

type UpdateIndexingStatusError {
    error: String!
    snappableId: String!
}

type UpdateLdapConfigReply {
    ldapConfig: LDAPConfig
}

"Response of the operation to set Azure cloud account feature status to connected, when in missing permissions state."
type UpgradeAzureCloudAccountPermissionsWithoutOauthReply {
    "Status of the request."
    status: Boolean!
}

"Response of the operation to upgrade Azure Cloud Account."
type UpgradeAzureCloudAccountResponse {
    "Status of the operation to upgrade Azure Cloud Account permission."
    status: [UpgradeAzureCloudAccountStatus!]!
}

"Status of the operation to Azure Cloud Account Upgrade permission."
type UpgradeAzureCloudAccountStatus {
    "Native ID of the Azure Subscription."
    azureSubscriptionNativeId: String!
    "Error received during upgrade of Azure Cloud Account."
    error: String!
    "Specifies whether the upgrade of Azure Cloud Account was successful. When true, the upgrade was successful."
    isSuccess: Boolean!
}

type UpgradeDurationReply {
    "Time taken by the last successful fast upgrade, in seconds."
    fastUpgradeDuration: Long!
    "Time taken by the last successful rolling upgrade, in seconds."
    rollingUpgradeDuration: Long!
}

"Response of the operation to set GCP cloud account feature status to connected, when in missing permissions state."
type UpgradeGcpCloudAccountPermissionsWithoutOauthReply {
    "Status of the operation to upgrade GCP project"
    status: GcpCloudAccountProjectUpgradeStatus
}

"Cluster upgrade data with groupby info applied to it."
type UpgradeInfoGroupBy {
    "Paginated snappable data."
    clusterConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort upgradeInfo by field"
        sortBy: UpgradeInfoSortByEnum = ClusterType,
        "cluster sort order"
        sortOrder: SortOrderEnum = Desc
    ): ClusterConnection!
    "Further provide groupings for the data."
    clusterGroupBy(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "group by field"
        groupBy: UpgradeInfoGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int
    ): [UpgradeGroupByInfo!]!
    "The data groupby info."
    groupByInfo: UpgradeGroupByInfo!
}

type UpgradeInfoGroupByConnection {
    count: Int!
    edges: [UpgradeInfoGroupByEdge!]!
    nodes: [UpgradeInfoGroupBy!]!
    pageInfo: PageInfo!
}

type UpgradeInfoGroupByEdge {
    cursor: String!
    node: UpgradeInfoGroupBy!
}

type UpgradeJobReply {
    message: String!
    success: Boolean!
}

type UpgradeJobReplyWithUuid {
    UpgradeJobReply: UpgradeJobReply!
    uuid: String!
}

type UpgradeRecommendationInfo {
    recommendation: String!
    releaseNotesLink: String!
    upgradability: [String!]!
}

type UpgradeStatus {
    code: String!
    excepshuns: String!
    message: String!
}

type UpgradeStatusReply {
    currentState: String!
    currentStateName: String!
    currentStateProgress: String!
    finishedStates: String!
    mode: String!
    nodeName: String!
    pendingStates: String!
    progress: String!
    ruInfo: RollingUpgradeInfo
    tarballName: String!
    upgradeProgressPercentage: String!
    upgradeStatus: UpgradeStatus
    upgradeTimeLeftSecs: String!
    upgradeTimestamp: String!
    userSurfacedTaskName: String!
}

"User account details."
type User {
    "The domain the user belongs to."
    domain: UserDomainEnum!
    "The user email."
    email: String!
    emailConfig: [EventDigest!]!
    "Groups user belongs to."
    groups: [String!]!
    "The user id."
    id: String!
    "Whether user is account owner."
    isAccountOwner: Boolean!
    "Last time the user logged in."
    lastLogin: DateTime
    roles: [Role!]!
    "The status of user's account."
    status: UserStatusEnum!
    "The totp status of user."
    totpStatus: TotpStatus!
    unreadCount: Int!
    "The user's username."
    username: String!
}

"Represents the activity for a specific user."
type UserActivityResult {
    "The total number of activities this user had."
    numActivities: Long!
    "The total number of activities, grouped by activity type."
    numActivitiesBreakdown: [ActivityResult!]!
    "ID used for pagination."
    paginationId: String!
    "The user that this result corresponds to."
    user: AccessUser
}

type UserActivityResultConnection {
    count: Int!
    edges: [UserActivityResultEdge!]!
    nodes: [UserActivityResult!]!
    pageInfo: PageInfo!
}

type UserActivityResultEdge {
    cursor: String!
    node: UserActivityResult!
}

type UserAudit {
    auditType: UserAuditTypeEnum
    cluster: Cluster
    id: ID!
    message: String!
    objectId: String!
    objectName: String
    objectType: UserAuditObjectTypeEnum!
    severity: UserAuditSeverityEnum
    status: UserAuditStatusEnum!
    time: DateTime!
    userName: String
}

type UserAuditChart {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
}

type UserAuditConnection {
    count: Int!
    edges: [UserAuditEdge!]!
    nodes: [UserAudit!]!
    pageInfo: PageInfo!
}

type UserAuditEdge {
    cursor: String!
    node: UserAudit!
}

"User audit data with groupby info applied to it"
type UserAuditGroupBy {
    "The data group by info."
    groupByInfo: UserAuditGroupByInfo!
    "Paginated audit data."
    userAuditConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort user audit by field"
        sortBy: UserAuditSortByEnum = Time
    ): UserAuditConnection!
    "Further provide groupings for the data."
    userAuditGroupBy(
        "group audits by a field"
        groupBy: UserAuditGroupByEnum!
    ): [UserAuditGroupBy!]!
}

type UserAuditGroupByConnection {
    count: Int!
    edges: [UserAuditGroupByEdge!]!
    nodes: [UserAuditGroupBy!]!
    pageInfo: PageInfo!
}

type UserAuditGroupByEdge {
    cursor: String!
    node: UserAuditGroupBy!
}

type UserAuditObjectType {
    enumValue: UserAuditObjectTypeEnum!
}

type UserAuditStatus {
    enumValue: UserAuditStatusEnum!
}

type UserAuditTable {
    focus: ReportFocusEnum!
    groupBy: [UserAuditGroupByEnum!]
    name: String!
    selectedColumns: [UserAuditTableColumnEnum!]!
    sortBy: UserAuditSortByEnum
    sortOrder: SortOrderEnum
}

type UserAuditType {
    enumValue: UserAuditTypeEnum!
}

type UserConnection {
    count: Int!
    edges: [UserEdge!]!
    nodes: [User!]!
    pageInfo: PageInfo!
}

type UserDownload {
    completeTime: String!
    createTime: String!
    id: Long!
    identifier: DownloadIdentifierEnum!
    name: String!
    progress: Int!
    status: DownloadStatusEnum!
}

type UserDownloadUrl {
    url: String!
}

type UserEdge {
    cursor: String!
    node: User!
}

type UserSetting {
    setting: String!
    value: String!
}

type UserSettings {
    settings: [UserSetting!]!
}

type V1BulkUpdateMssqlDbV1Response {
    items: [MssqlDbDetail!]!
}

type V1MssqlGetRestoreFilesV1Response {
    items: [MssqlRestoreFile!]!
}

type VNet {
    id: String!
    name: String!
    regionName: String!
    resourceGroup: ResourceGroup
}

type VNetConnection {
    count: Int!
    edges: [VNetEdge!]!
    nodes: [VNet!]!
    pageInfo: PageInfo!
}

type VNetEdge {
    cursor: String!
    node: VNet!
}

type VSphereBlueprint implements Blueprint & CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    currentFailoverStatus: AppBlueprintFailoverStatusEnum!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isAssignedSlaSynced: Boolean!
    isMount: Boolean!
    isRelic: Boolean!
    "last failover"
    lastFailover: Failover
    lastFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastFailoverTimeMillisOpt: Long
    "last test failover"
    lastTestFailover: Failover
    lastTestFailoverStatus: AppBlueprintLastFailoverStatusEnum!
    lastTestFailoverTimeMillisOpt: Long
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    mountTimeMillisOpt: Long
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "The newest snapshot ready for failover"
    newestFailoverReadySnapshot(isTestFailover: Boolean!): CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID
    ): BlueprintRecoveryRanges
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    rmStatus: AppBlueprintRmStatusEnum!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    status: AppBlueprintStatusEnum!
}

type VSphereBlueprintChildFailoverInstance implements BlueprintFailoverInstance {
    failoverInstance: AwsEc2Instance!
    snappableId: String!
}

type VSphereBlueprintNew implements BlueprintNew & HierarchyObject {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The list of children snappable"
    childConnection: BlueprintChildConnection!
    children: [VSphereVmChild!]!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "Flag to enable hydration."
    enableHydrationOpt: Boolean
    "The fid of the hierarchy object."
    id: UUID!
    isArchived: Boolean!
    "Status of hydration enablement."
    isHydrationEnabled: Boolean
    "Last failover source location."
    lastFailoverSource: String
    lastFailoverStatus: BlueprintFailoverStatus!
    "Last failover time."
    lastFailoverTime: DateTime
    lastFailoverTimeOpt: DateTime
    "Last local recovery time."
    lastLocalRecoveryTime: DateTime
    "Last local recovery time."
    lastLocalRecoveryTimeOpt: DateTime
    lastTestFailoverStatus: BlueprintFailoverStatus!
    "Last test failover time."
    lastTestFailoverTime: DateTime
    lastTestFailoverTimeOpt: DateTime
    latestFailover: BlueprintFailover
    "Details of the local blueprint RPO lag."
    localRpoLagInfo: RPOLagInfo
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "number of child snappables of the Blueprint"
    numChildren: Int!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    platform: BlueprintPlatformEnum!
    "The recovery ranges of the blueprint"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID
    ): BlueprintRecoveryRanges
    "blueprint remote RPO lag info"
    remoteRpoLagInfo: RPOLagInfo
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "The source location from which this object originated."
    sourceLocation: BlueprintLocation
    status: BlueprintStatusEnum!
    "The target location to which the object failed over"
    targetLocation: BlueprintLocation
    version: Int!
}

type VSphereComputeCluster implements CdmHierarchyObject & HierarchyObject & VSphereDatacenterDescendantType & VSphereDatacenterPhysicalChildType & VSphereVCenterDescendantType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereComputeClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereComputeClusterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereComputeClusterConnection {
    count: Int!
    edges: [VSphereComputeClusterEdge!]!
    nodes: [VSphereComputeCluster!]!
    pageInfo: PageInfo!
}

type VSphereComputeClusterDescendantTypeConnection {
    count: Int!
    edges: [VSphereComputeClusterDescendantTypeEdge!]!
    nodes: [VSphereComputeClusterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereComputeClusterDescendantTypeEdge {
    cursor: String!
    node: VSphereComputeClusterDescendantType!
}

type VSphereComputeClusterEdge {
    cursor: String!
    node: VSphereComputeCluster!
}

type VSphereComputeClusterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereComputeClusterPhysicalChildTypeEdge!]!
    nodes: [VSphereComputeClusterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereComputeClusterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereComputeClusterPhysicalChildType!
}

type VSphereDatacenter implements CdmHierarchyObject & HierarchyObject & VSphereVCenterDescendantType & VSphereVCenterLogicalChildType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereDatacenterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereDatacenterDescendantTypeConnection {
    count: Int!
    edges: [VSphereDatacenterDescendantTypeEdge!]!
    nodes: [VSphereDatacenterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterDescendantTypeEdge {
    cursor: String!
    node: VSphereDatacenterDescendantType!
}

type VSphereDatacenterLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereDatacenterLogicalChildTypeEdge!]!
    nodes: [VSphereDatacenterLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterLogicalChildTypeEdge {
    cursor: String!
    node: VSphereDatacenterLogicalChildType!
}

type VSphereDatacenterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereDatacenterPhysicalChildTypeEdge!]!
    nodes: [VSphereDatacenterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereDatacenterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereDatacenterPhysicalChildType!
}

type VSphereDatastore implements CdmHierarchyObject & HierarchyObject & VSphereComputeClusterDescendantType & VSphereDatacenterDescendantType & VSphereHostDescendantType & VSphereResourcePoolDescendantType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    capacity: Long!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    datastoreType: String!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    freeSpace: Long!
    "object id"
    id: UUID!
    isLocal: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereDatastoreConnection {
    count: Int!
    edges: [VSphereDatastoreEdge!]!
    nodes: [VSphereDatastore!]!
    pageInfo: PageInfo!
}

type VSphereDatastoreEdge {
    cursor: String!
    node: VSphereDatastore!
}

type VSphereFolder implements CdmHierarchyObject & HierarchyObject & VSphereDatacenterDescendantType & VSphereDatacenterLogicalChildType & VSphereFolderDescendantType & VSphereFolderLogicalChildType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereFolderDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereFolderLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereFolderDescendantTypeConnection {
    count: Int!
    edges: [VSphereFolderDescendantTypeEdge!]!
    nodes: [VSphereFolderDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereFolderDescendantTypeEdge {
    cursor: String!
    node: VSphereFolderDescendantType!
}

type VSphereFolderLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereFolderLogicalChildTypeEdge!]!
    nodes: [VSphereFolderLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereFolderLogicalChildTypeEdge {
    cursor: String!
    node: VSphereFolderLogicalChildType!
}

type VSphereHost implements CdmHierarchyObject & HierarchyObject & VSphereComputeClusterDescendantType & VSphereComputeClusterPhysicalChildType & VSphereDatacenterDescendantType & VSphereDatacenterPhysicalChildType & VSphereVCenterDescendantType & VSphereVCenterPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereHostDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isStandaloneHost: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereHostPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereHostConnection {
    count: Int!
    edges: [VSphereHostEdge!]!
    nodes: [VSphereHost!]!
    pageInfo: PageInfo!
}

type VSphereHostDescendantTypeConnection {
    count: Int!
    edges: [VSphereHostDescendantTypeEdge!]!
    nodes: [VSphereHostDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereHostDescendantTypeEdge {
    cursor: String!
    node: VSphereHostDescendantType!
}

type VSphereHostEdge {
    cursor: String!
    node: VSphereHost!
}

type VSphereHostPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereHostPhysicalChildTypeEdge!]!
    nodes: [VSphereHostPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereHostPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereHostPhysicalChildType!
}

type VSphereMount {
    attachingDiskCount: Int
    authorizedOperations: AuthorizedOperations!
    cdmId: String!
    cluster: Cluster!
    clusterName: String!
    hasAttachingDisk: Boolean
    host: VSphereHost
    id: UUID!
    isReady: Boolean!
    migrateDatastoreRequestId: String
    mountRequestId: String
    mountTimestamp: DateTime
    newVMName: String
    newVm: VSphereVm
    sourceSnapshot: CdmSnapshot
    sourceVm: VSphereVm
    status: VSphereLiveMountStatusEnum!
    unmountRequestId: String
}

type VSphereMountConnection {
    count: Int!
    edges: [VSphereMountEdge!]!
    nodes: [VSphereMount!]!
    pageInfo: PageInfo!
}

type VSphereMountEdge {
    cursor: String!
    node: VSphereMount!
}

type VSphereNetwork implements CdmHierarchyObject & HierarchyObject & VSphereHostDescendantType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereRecoveryComputeTarget {
    computeClusterId: String!
    computeClusterName: String!
    hostId: String!
    hostName: String!
    resourcePoolId: String!
    resourcePoolName: String!
    vCenterId: String!
    vCenterName: String!
}

type VSphereRecoverySpec implements RecoverySpec {
    memoryMbs: Int!
    "Recovery point of the snappable."
    recoveryPointOpt: Long
    target: VSphereRecoveryComputeTarget!
    userData: String
    vCpus: Int!
    vSphereNicSpecs: [VSphereVMNicSpec!]!
    vSphereVolumeSpecs: [VSphereVMVolumeSpec!]!
    version: Long!
}

type VSphereResourcePool implements CdmHierarchyObject & HierarchyObject & VSphereComputeClusterDescendantType & VSphereComputeClusterPhysicalChildType & VSphereDatacenterDescendantType & VSphereHostDescendantType & VSphereHostPhysicalChildType & VSphereResourcePoolDescendantType & VSphereResourcePoolPhysicalChildType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereResourcePoolDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereResourcePoolPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VSphereResourcePoolDescendantTypeConnection {
    count: Int!
    edges: [VSphereResourcePoolDescendantTypeEdge!]!
    nodes: [VSphereResourcePoolDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereResourcePoolDescendantTypeEdge {
    cursor: String!
    node: VSphereResourcePoolDescendantType!
}

type VSphereResourcePoolPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereResourcePoolPhysicalChildTypeEdge!]!
    nodes: [VSphereResourcePoolPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereResourcePoolPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereResourcePoolPhysicalChildType!
}

type VSphereTag implements CdmHierarchyObject & HierarchyObject & VSphereTagCategoryDescendantType & VSphereTagCategoryTagChildType & VSphereVCenterDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereTagTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereTagCategory implements CdmHierarchyObject & HierarchyObject & VSphereVCenterDescendantType & VSphereVCenterTagChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "object id"
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereTagCategoryTagChildTypeConnection!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereTagCategoryTagChildTypeConnection {
    count: Int!
    edges: [VSphereTagCategoryTagChildTypeEdge!]!
    nodes: [VSphereTagCategoryTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereTagCategoryTagChildTypeEdge {
    cursor: String!
    node: VSphereTagCategoryTagChildType!
}

type VSphereTagTagChildTypeConnection {
    count: Int!
    edges: [VSphereTagTagChildTypeEdge!]!
    nodes: [VSphereTagTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereTagTagChildTypeEdge {
    cursor: String!
    node: VSphereTagTagChildType!
}

type VSphereVCenter implements CdmHierarchyObject & HierarchyObject {
    aboutInfo: AboutInformation
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    caCerts: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    conflictResolutionAuthz: ConflictResolutionAuthzEnum
    connectionStatus: RefreshableObjectConnectionStatus!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    lastRefreshTime: DateTime
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "List of physical children"
    physicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterPhysicalChildTypeConnection!
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "List of tag children"
    tagChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VSphereVCenterTagChildTypeConnection!
    username: String!
    vcenterId: String!
    vsphereTagPath: [PathNode!]!
}

type VSphereVCenterConnection {
    count: Int!
    edges: [VSphereVCenterEdge!]!
    nodes: [VSphereVCenter!]!
    pageInfo: PageInfo!
}

type VSphereVCenterDescendantTypeConnection {
    count: Int!
    edges: [VSphereVCenterDescendantTypeEdge!]!
    nodes: [VSphereVCenterDescendantType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterDescendantTypeEdge {
    cursor: String!
    node: VSphereVCenterDescendantType!
}

type VSphereVCenterEdge {
    cursor: String!
    node: VSphereVCenter!
}

type VSphereVCenterLogicalChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterLogicalChildTypeEdge!]!
    nodes: [VSphereVCenterLogicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterLogicalChildTypeEdge {
    cursor: String!
    node: VSphereVCenterLogicalChildType!
}

type VSphereVCenterPhysicalChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterPhysicalChildTypeEdge!]!
    nodes: [VSphereVCenterPhysicalChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterPhysicalChildTypeEdge {
    cursor: String!
    node: VSphereVCenterPhysicalChildType!
}

type VSphereVCenterTagChildTypeConnection {
    count: Int!
    edges: [VSphereVCenterTagChildTypeEdge!]!
    nodes: [VSphereVCenterTagChildType!]!
    pageInfo: PageInfo!
}

type VSphereVCenterTagChildTypeEdge {
    cursor: String!
    node: VSphereVCenterTagChildType!
}

type VSphereVMNicSpec {
    adapterType: NetworkAdapterTypeEnum!
    dnsInfos: [String!]!
    gateway: String!
    ipv4Address: String!
    ipv6Address: String!
    isPrimaryNic: Boolean!
    key: String!
    netmask: String!
    networkId: String!
    networkMoid: String!
    networkType: NetworkTypeEnum!
}

type VSphereVMVolumeSpec {
    dataStoreCdmId: String!
    dataStoreId: String!
    key: String!
    sizeGbs: Int!
}

type VSphereVirtualDisk {
    cdmId: String!
    cdmVersion: String!
    clusterUuid: UUID!
    deviceKey: Int
    excludeFromSnapshots: Boolean!
    fid: UUID!
    fileName: String!
    size: Long
    virtualMachineId: String!
}

type VSphereVirtualDiskConnection {
    count: Int!
    edges: [VSphereVirtualDiskEdge!]!
    nodes: [VSphereVirtualDisk!]!
    pageInfo: PageInfo!
}

type VSphereVirtualDiskEdge {
    cursor: String!
    node: VSphereVirtualDisk!
}

type VSphereVm implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & VSphereComputeClusterDescendantType & VSphereDatacenterDescendantType & VSphereFolderDescendantType & VSphereFolderLogicalChildType & VSphereHostDescendantType & VSphereHostPhysicalChildType & VSphereTagCategoryDescendantType & VSphereTagDescendantType & VSphereTagTagChildType & VSphereVCenterDescendantType {
    "Status of the Rubrik Backup Service agent on this VM"
    agentStatus: AgentStatus
    "Whether array integration is enabled for this VM"
    arrayIntegrationEnabled: Boolean!
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "Guest credential authorization status"
    guestCredentialAuthorizationStatus: GuestCredentialAuthorizationStatusEnum!
    guestOsName: String!
    "The Guest OS Type of this VM"
    guestOsType: GuestOsTypeEnum!
    "object id"
    id: UUID!
    "If VM is active."
    isActive: Boolean!
    "If VM is a child of a blueprint."
    isBlueprintChild: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    parentSnappableIdOpt: UUID
    parentSnappableTypeOpt: String
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "postBackupScript"
    postBackupScript: PrePostScript
    "postSnapScript"
    postSnapScript: PrePostScript
    powerStatus: VmPowerStatusEnum
    "preBackupScript"
    preBackupScript: PrePostScript
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "Date that effective SLA was assigned / inherited."
    protectionDate: DateTime
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "contains stats for this snappable (e.g., capacity)"
    reportSnappable: Snappable
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "snapshot consistency mandate"
    snapshotConsistencyMandate: ConsistencyLevelEnum!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    "list of liveMounts for this VM"
    vSphereMounts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM live mounts"
        filter: VSphereMountFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereMountSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereMountConnection!
    vmwareToolsInstalled: Boolean!
    vsphereTagPath: [PathNode!]!
    "list of virtual disks for this VM"
    vsphereVirtualDisks(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter for VM virtual disks"
        filter: VSphereVirtualDiskFilter,
        "Returns the first n elements from the list."
        first: Int,
        sortBy: VSphereVirtualDiskSortByEnum,
        "sort order"
        sortOrder: SortOrderEnum
    ): VSphereVirtualDiskConnection!
}

type VSphereVmChild implements BlueprintChild {
    bootPriority: Int!
    "failover instance of child snappable"
    failoverInstance: VSphereBlueprintChildFailoverInstance
    fid: UUID!
    "local RPO lag information"
    localRpoLagInfo: RPOLagInfo
    "The recovery info of the child virtual machine"
    recoveryInfo(
        "The id of the cluster"
        clusterUuid: UUID
    ): ChildVmRecoveryInfo
    "recoverySpec of child snappable"
    recoverySpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): RecoverySpec
    "remote RPO lag information"
    remoteRpoLagInfo: RPOLagInfo
    "resourceSpec of child snappable"
    resourceSpec(
        "The recovery point of the snappable."
        recoveryPoint: Long
    ): VmwareResourceSpec
    "the child snappable"
    snappable: VSphereVm
    snappableType: ObjectTypeEnum!
}

type VSphereVmConnection {
    count: Int!
    edges: [VSphereVmEdge!]!
    nodes: [VSphereVm!]!
    pageInfo: PageInfo!
}

type VSphereVmEdge {
    cursor: String!
    node: VSphereVm!
}

"Aws cloud accounts validate response."
type ValidateAndCreateAwsCloudAccountReply {
    "AWS cloud account initiate response if the request is successful."
    initiateResponse: AwsCloudAccountCreateResponse
    "Error messages related to the failure of the request to create an AWS cloud account."
    validateResponse: AwsCloudAccountValidateResponse
}

"Validate AWS RDS Instance name for export."
type ValidateAwsNativeRdsInstanceNameForExportReply {
    "Refers to the reason for the RDS name being invalid."
    error: String!
    "Specifies whether the RDS name is valid or not."
    isValid: Boolean!
}

"Response of the operation to validate Azure Cloud Account Exocompute Configurations."
type ValidateAzureSubnetsForCloudAccountExocomputeReply {
    "List of validation information on Azure Exocompute Configurations provided."
    validationInfo: [AzureExocomputeConfigValidationInfo!]!
}

"Blueprint validation reply."
type ValidateBlueprintReply {
    "Blueprint uuid."
    blueprintId: id
    "Status of the validation."
    isValidationSucceeded: Boolean!
    "Detailed information about each resource validation."
    statusInfos: [ValidationStatusInfo!]!
}

"Multiple blueprint validation reply."
type ValidateBlueprintsReply {
    "Detailed information about each blueprint validation."
    blueprintStatus: [ValidateBlueprintReply!]!
}

"Contains a map representing feasibility to do file recovery on snapshots"
type ValidateCloudNativeFileRecoveryFeasibilityReply {
    snapshotFileRecoveryFeasibility: [CloudNativeFileRecoveryFeasibility!]!
}

type ValidateFailureReason {
    failureReason: String!
    planName: PlanNameEnum!
    snappableId: String!
    snapshotId: String!
}

"Status for resource mapping validation for blueprint."
type ValidationStatusInfo {
    "List of all failure error messages."
    failureReasons: [String!]!
    "Validated resource info."
    resourceInfo: ResourceInfo
    "Resource mapping validation status for the snappable."
    validationStatus: ValidationStatus!
    "List of all warning messages."
    warningReasons: [String!]!
}

type ValueBoolean implements Value {
    serializedValue: String!
    value: Boolean
}

type ValueDateTime implements Value {
    serializedValue: String!
    value: DateTime
}

type ValueFloat implements Value {
    serializedValue: String!
    value: Float
}

type ValueInteger implements Value {
    serializedValue: String!
    value: Int
}

type ValueLong implements Value {
    serializedValue: String!
    value: Long
}

type ValueNull implements Value {
    serializedValue: String!
}

type ValueString implements Value {
    serializedValue: String!
    value: String
}

type Vcd implements CdmHierarchyObject & HierarchyObject & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdCatalog implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdDescendantTypeConnection {
    count: Int!
    edges: [VcdDescendantTypeEdge!]!
    nodes: [VcdDescendantType!]!
    pageInfo: PageInfo!
}

type VcdDescendantTypeEdge {
    cursor: String!
    node: VcdDescendantType!
}

type VcdLogicalChildTypeConnection {
    count: Int!
    edges: [VcdLogicalChildTypeEdge!]!
    nodes: [VcdLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdLogicalChildTypeEdge {
    cursor: String!
    node: VcdLogicalChildType!
}

type VcdOrg implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdOrgDescendantTypeConnection {
    count: Int!
    edges: [VcdOrgDescendantTypeEdge!]!
    nodes: [VcdOrgDescendantType!]!
    pageInfo: PageInfo!
}

type VcdOrgDescendantTypeEdge {
    cursor: String!
    node: VcdOrgDescendantType!
}

type VcdOrgLogicalChildTypeConnection {
    count: Int!
    edges: [VcdOrgLogicalChildTypeEdge!]!
    nodes: [VcdOrgLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdOrgLogicalChildTypeEdge {
    cursor: String!
    node: VcdOrgLogicalChildType!
}

type VcdOrgVdc implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdOrgDescendantType & VcdOrgLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdOrgVdcLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type VcdOrgVdcDescendantTypeConnection {
    count: Int!
    edges: [VcdOrgVdcDescendantTypeEdge!]!
    nodes: [VcdOrgVdcDescendantType!]!
    pageInfo: PageInfo!
}

type VcdOrgVdcDescendantTypeEdge {
    cursor: String!
    node: VcdOrgVdcDescendantType!
}

type VcdOrgVdcLogicalChildTypeConnection {
    count: Int!
    edges: [VcdOrgVdcLogicalChildTypeEdge!]!
    nodes: [VcdOrgVdcLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdOrgVdcLogicalChildTypeEdge {
    cursor: String!
    node: VcdOrgVdcLogicalChildType!
}

type VcdTopLevelDescendantTypeConnection {
    count: Int!
    edges: [VcdTopLevelDescendantTypeEdge!]!
    nodes: [VcdTopLevelDescendantType!]!
    pageInfo: PageInfo!
}

type VcdTopLevelDescendantTypeEdge {
    cursor: String!
    node: VcdTopLevelDescendantType!
}

type VcdVapp implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & VcdCatalogDescendantType & VcdCatalogLogicalChildType & VcdDescendantType & VcdOrgDescendantType & VcdOrgVdcDescendantType & VcdOrgVdcLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    isRelic: Boolean!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): VcdVappLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
}

type VcdVappConnection {
    count: Int!
    edges: [VcdVappEdge!]!
    nodes: [VcdVapp!]!
    pageInfo: PageInfo!
}

type VcdVappEdge {
    cursor: String!
    node: VcdVapp!
}

type VcdVappLogicalChildTypeConnection {
    count: Int!
    edges: [VcdVappLogicalChildTypeEdge!]!
    nodes: [VcdVappLogicalChildType!]!
    pageInfo: PageInfo!
}

type VcdVappLogicalChildTypeEdge {
    cursor: String!
    node: VcdVappLogicalChildType!
}

type VcdVimServer implements CdmHierarchyObject & HierarchyObject & VcdDescendantType & VcdLogicalChildType & VcdTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

"""

Supported in v5.3+
"""
type VcenterCreateResponse {
    """

    Required. Supported in v5.3+
    """
    asyncRequestStatus: AsyncRequestStatus
    """

    Required. Supported in v5.3+
    The ID of the vCenter server that controls the management of the virtual machine whose metadata will be refreshed.
    """
    id: String!
    """

    Required. Supported in v5.3+
    Whether the new vCenter is a VMC Instance.
    """
    isVmc: Boolean!
}

type VerifySLAWithReplicationToClusterResp {
    isActiveSla: Boolean!
}

type VersionedFile {
    absolutePath: String!
    displayPath: String!
    fileVersions: [HierarchySnappableFileVersion!]!
    filename: String!
    path: String!
}

type VersionedFileConnection {
    count: Int!
    edges: [VersionedFileEdge!]!
    nodes: [VersionedFile!]!
    pageInfo: PageInfo!
}

type VersionedFileEdge {
    cursor: String!
    node: VersionedFile!
}

"Vm Application Consistency Specs Info"
type VmAppConsistentSpecsInternal {
    cancelBackupIfPreScriptFails: Boolean!
    postScriptTimeoutInSeconds: Int!
    postSnapshotScriptPath: String!
    preScriptTimeoutInSeconds: Int!
    preSnapshotScriptPath: String!
    rbaStatus: CloudNativeRBAStatusType!
}

type VmDatastore {
    datastoreId: String!
    datastoreName: String!
}

type VmDiskMapEntry {
    sourceDatastore: VmDatastore
    sourceVmDiskId: String!
    targetDiskId: String!
    targetDiskNativeId: String!
    targetIsOsDisk: Boolean!
    targetLogicalSize: Long!
    targetSnapshotId: String!
}

type VmHost {
    hostId: String!
    hostName: String!
    vcenterId: String!
    vcenterName: String!
}

type VmInfo {
    gateway: String!
    ipAddress: String!
    subnetMask: String!
    vmName: String!
}

type VmNic {
    nicId: String!
    nicMoid: String!
    nicName: String!
}

type VmNicMapEntry {
    sourceNic: VmNic
    sourceNicAdapterType: String!
    sourceNicId: String!
    targetNicId: String!
}

"""

Supported in v5.1+
"""
type VmwareCdpLiveInfo {
    """

    Supported in v5.1+
    The time on this node. Computed after computing the live CDP info for the virtual machine.
    """
    currentTime: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered locally.
    """
    localRecoveryPoint: DateTime
    """

    Supported in v5.1+
    The latest time to which this virtual machine can be recovered on a remote cluster.
    """
    remoteRecoveryPoint: DateTime
    """

    Required. Supported in v5.1+
    The ID of the virtual machine that we are getting CDP live fields for.
    """
    vmId: String!
}

"""

Supported in v5.1+
"""
type VmwareRecoverableRange {
    """

    Supported in v5.1+
    """
    beginTime: DateTime
    """

    Supported in v5.1+
    """
    endTime: DateTime
}

type VmwareRecoveryPoints {
    localRecoveryPoint: DateTime
    remoteRecoveryPoint: DateTime
}

type VmwareRecoveryState {
    healthPercentage: Float!
    localStatus: CdpLocalStatusEnum!
    replicationStatus: CdpReplicationStatusEnum!
}

type VmwareResourceSpec implements ResourceSpec {
    isArchived: Boolean!
    memoryMbs: Int!
    osType: String!
    "Recovery point of the snappable."
    recoveryPointOpt: Long
    snappableId: String!
    snappableName: String!
    snapshotId: String!
    vCpus: Int!
    vmWareVolumeSpecs: [VmwareVirtualMachineVolume!]!
    vmwareNics: [VmwareVirtualMachineNic!]!
}

type VmwareVirtualMachineNic {
    deviceLabel: String!
    key: Int!
    networkLabel: String!
    v4Addresses: [String!]!
}

type VmwareVirtualMachineVolume {
    capacityKbs: Long!
    key: Int!
    label: String!
}

type VmwareVmConfig {
    logRetentionSeconds: Long!
}

"""

Supported in v5.0+
"""
type VmwareVmMountDetailV1 {
    "The IP address of the NFS share."
    nasIp: String
    """

    Supported in v5.0+
    The power status of the mounted VM(ON,OFF,SLEEP etc.).
    """
    powerStatus: String
    vmwareVmMountSummaryV1: VmwareVmMountSummaryV1
}

"""

Supported in v5.0+
"""
type VmwareVmMountSummaryV1 {
    """

    Supported in v5.0+
    An integer value that identifies how many disks are attached.
    """
    attachingDiskCount: Int
    """

    Supported in v5.0+
    This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
    """
    createDatastoreOnlyMount: Boolean
    """

    Supported in v5.0+
    The name of the datastore that contains the mounted VMDK.
    """
    datastoreName: String
    """

    Supported in v5.0+
    A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
    """
    datastoreReady: Boolean
    """

    Supported in v5.0+
    A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
    """
    hasAttachingDisk: Boolean
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Required. Supported in v5.0+
    """
    isReady: Boolean!
    """

    Supported in v5.0+
    """
    mountRequestId: String
    """

    Supported in v5.0+
    Gives the timestamp at which the mount was created.
    """
    mountTimestamp: DateTime
    """

    Supported in v5.0+
    """
    mountedVmId: String
    """

    Required. Supported in v5.0+
    """
    snapshotDate: DateTime
    """

    Supported in v5.0+
    """
    unmountRequestId: String
    """

    Required. Supported in v5.0+
    """
    vmId: String!
}

"""

Supported in v5.3+
"""
type VmwareVmRecoverableRanges {
    """

    Required. Supported in v5.3+
    The recoverable ranges for the virtual machine.
    """
    recoverableRanges: [VmwareRecoverableRange!]!
    """

    Required. Supported in v5.3+
    The ID of the virtual machine for which to retrieve recoverable ranges.
    """
    vmId: String!
}

"Volume group for a host."
type VolumeGroup implements CdmHierarchyObject & CdmHierarchySnappableNew & HierarchyObject & HierarchySnappable & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "CDM ID of the volume group."
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "List of snapshots taken for a Volume Group."
    cdmSnapshots(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the first n elements from the list."
        first: Int,
        "sort order"
        sortOrder: SortOrderEnum
    ): CDMSnapshotConnection!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The fid of the hierarchy object."
    id: UUID!
    "Whether the volume group is a relic."
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    "Volumes in the volume group."
    volumes: [String!]!
}

type VolumeGroupConnection {
    count: Int!
    edges: [VolumeGroupEdge!]!
    nodes: [VolumeGroup!]!
    pageInfo: PageInfo!
}

"""

Supported in v5.0+
"""
type VolumeGroupDetail {
    blackoutWindowResponseInfo: BlackoutWindowResponseInfo
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Assign this Volume Group to the given SLA domain.
    v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
    """
    configuredSlaDomainId: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
    v5.3+: Indicates whether backup, archival, and replication are paused for this Volume Group.
    """
    isPaused: Boolean!
    """

    Supported in v5.3+
    Describes any pending SLA Domain assignment on this object.
    """
    pendingSlaDomain: ManagedObjectPendingSlaInfo
    volumeGroupSummary: VolumeGroupSummary
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: Configuration details for the volumes in the Volume Group.
    """
    volumes: [HostVolumeSummary!]!
}

type VolumeGroupEdge {
    cursor: String!
    node: VolumeGroup!
}

"Volume group live mount."
type VolumeGroupMount {
    "Operations authorized to perform on this object."
    authorizedOperations: AuthorizedOperations!
    "Describes if the live mount can be unmounted."
    canUnmount: Boolean!
    "CDM Id of the live mount."
    cdmId: String!
    "Cluster details."
    cluster: Cluster!
    "Fid of the live mount."
    id: UUID!
    "Describes if the live mount is ready."
    isReady: Boolean!
    "Id of the location of the live mount."
    locationId: String!
    "Path where the live mount is mounted."
    mountPath: String
    "Id of the mount request."
    mountRequestId: String
    "Timestamp when the live mount was performed."
    mountTimestamp: DateTime
    "Details about the mounted volumes."
    mountedVolumes: [MountedVolume!]!
    "Name of the live mount."
    name: String!
    "Composite Id of the node in the live mount."
    nodeCompositeId: String
    "IP of the node in the live mount."
    nodeIp: String
    "Name of SMB share."
    smbShareName: String
    "Id of the snapshot used in the live mount."
    snapshotId: String!
    "Details about the source host used in the live mount."
    sourceHost: PhysicalHost!
    "Details about the source snapshot used in the live mount."
    sourceSnapshot: CdmSnapshot!
    "Details about the source volume group used in the live mount."
    sourceVolumeGroup: VolumeGroup!
    "Id of the target host."
    targetHostId: String
    "Name of the target host."
    targetHostName: String
    "Id of the unmount request."
    unmountRequestId: String
}

type VolumeGroupMountConnection {
    count: Int!
    edges: [VolumeGroupMountEdge!]!
    nodes: [VolumeGroupMount!]!
    pageInfo: PageInfo!
}

type VolumeGroupMountEdge {
    cursor: String!
    node: VolumeGroupMount!
}

"""

Supported in v5.0+
"""
type VolumeGroupSnapshotVolumeSummary {
    fileSystemType: FileSystemTypeEnum!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The unique ID of the snapshot volume summary.
    """
    id: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Mount point locations of this Volume on the Host
    v5.3+: The mount points of the volume on the host.
    """
    mountPoints: [String!]!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Size of the Volume in bytes
    v5.3+: The size of the volume in bytes.
    """
    size: Long!
}

"A volume captured in a volume group snapshot."
type VolumeGroupSubObject {
    "Capacity of the volume in bytes."
    capacityInBytes: Long!
    "File size of the volume in bytes."
    fileSizeInBytes: Long!
    "File system type of the volume."
    fileSystemType: String!
    "Mount point for the volume."
    mountPointsOpt: [String!]!
    "ID of the volume."
    volumeId: String!
}

"""

Supported in v5.0+
"""
type VolumeGroupSummary {
    """

    Supported in v5.3+
    Specifies whether the Volume Group is set to take a full snapshot for the next backup.
    """
    forceFull: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: Id of the host of the volume group
    v5.3+: The unique ID of the host that contains the Volume Group.
    """
    hostId: String
    """

    Supported in v5.0+
    v5.0-v5.2: IP Address or fully qualified domain name with which the host was added
    v5.3+: The name of the host that contains the Volume Group.
    """
    hostname: String
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The unique ID of the Volume Group.
    """
    id: String!
    """

    Required. Supported in v5.0+
    v5.0-v5.2: Whether this Volume Group is currently accessible on the host
    v5.3+: Specifies whether the Volume Group is accessible on the Rubrik cluster.
    """
    isRelic: Boolean!
    """

    Required. Supported in v5.0+
    v5.0-v5.2:
    v5.3+: The name of the Volume Group.
    """
    name: String!
    """

    Supported in v5.3+
    Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.
    """
    needsMigration: Boolean
    snappable: CDMSnappable
}

type Vpc {
    cidrBlock: AddressBlockV4
    id: String!
    name: String!
    vpcId: String!
}

type VpcConnection {
    count: Int!
    edges: [VpcEdge!]!
    nodes: [Vpc!]!
    pageInfo: PageInfo!
}

type VpcEdge {
    cursor: String!
    node: Vpc!
}

type VsphereBlueprintChildSnapshotInfo {
    host: VmHost
    memoryMbs: Int!
    nicMap: [VmNicMapEntry!]!
    osType: String!
    snapshotAppMetadata: String!
    snapshotId: String!
    vcpus: Int!
    volumeMap: [VmDiskMapEntry!]!
}

type WeeklySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfWeek: DayOfWeekEnum!
}

type WhitelistedAnalyzer {
    isExplicit: Boolean!
    whitelistedAnalyzerId: String!
    whitelistedPath: String!
}

type WindowsCluster implements CdmHierarchyObject & HierarchyObject & MssqlTopLevelDescendantType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "List of descendants"
    descendantConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): WindowsClusterDescendantTypeConnection!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    "The list of hosts associated with a Windows Cluster."
    hosts: [PhysicalHost!]!
    "The fid of the hierarchy object."
    id: UUID!
    "List of logical children"
    logicalChildConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        filter: [Filter!],
        "Returns the first n elements from the list."
        first: Int,
        "provide optional snappable hierarchy for RBAC and SLA, none value is assumed to be All snappable hierarchy"
        snappableHierarchy: SnappableLevelHierarchyTypeEnum,
        sortBy: HierarchySortByField,
        sortOrder: HierarchySortOrder,
        typeFilter: [HierarchyObjectTypeEnum!]
    ): WindowsClusterLogicalChildTypeConnection!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The name of the hierarchy object."
    name: String!
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
}

type WindowsClusterDescendantTypeConnection {
    count: Int!
    edges: [WindowsClusterDescendantTypeEdge!]!
    nodes: [WindowsClusterDescendantType!]!
    pageInfo: PageInfo!
}

type WindowsClusterDescendantTypeEdge {
    cursor: String!
    node: WindowsClusterDescendantType!
}

type WindowsClusterLogicalChildTypeConnection {
    count: Int!
    edges: [WindowsClusterLogicalChildTypeEdge!]!
    nodes: [WindowsClusterLogicalChildType!]!
    pageInfo: PageInfo!
}

type WindowsClusterLogicalChildTypeEdge {
    cursor: String!
    node: WindowsClusterLogicalChildType!
}

type WindowsFileset implements CdmHierarchyObject & CdmHierarchySnappableNew & FailoverClusterAppDescendantType & FailoverClusterAppPhysicalChildType & FailoverClusterTopLevelDescendantType & FilesetTemplateDescendantType & FilesetTemplatePhysicalChildType & HierarchyObject & HierarchySnappable & HostFailoverClusterDescendantType & HostFailoverClusterPhysicalChildType & PhysicalHostDescendantType & PhysicalHostPhysicalChildType {
    "The authorized operations on the object."
    authorizedOperations: [OperationEnum!]!
    cdmId: String!
    "A link to view the snappable on the CDM cluster. For dev use only."
    cdmLink: String!
    "The cluster from which this object originated."
    cluster: Cluster!
    "The configured SLA Domain of the hierarchy object."
    configuredSlaDomain: SlaDomain!
    "The Effective Retention SLA Domain of the hierarchy object."
    effectiveRetentionSlaDomain: SlaDomain
    "The Effective SLA Domain of the hierarchy object."
    effectiveSlaDomain: SlaDomain!
    "The path node of the effective SLA source"
    effectiveSlaSourceObject: PathNode
    failoverClusterApp: FailoverClusterApp
    hardlinkSupportEnabled: Boolean!
    host: PhysicalHost
    "The fid of the hierarchy object."
    id: UUID!
    isPassThrough: Boolean!
    isRelic: Boolean!
    "A sequential list containing this object's logical ancestors."
    logicalPath: [PathNode!]!
    "The list of missed snapshots for this VM"
    missedSnapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int
    ): MissedSnapshotCommonConnection
    "The list of missed snapshots for this VM"
    missedSnapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter missed snapshots by date"
        filter: MissedSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: MissedSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): MissedSnapshotGroupByConnection
    "The name of the hierarchy object."
    name: String!
    "the newest snapshot archived to AWS."
    newestArchivedSnapshot: CdmSnapshot
    "the newest snapshot replicated to a cluster."
    newestReplicatedSnapshot: CdmSnapshot
    "the most recent snapshot of this snappable"
    newestSnapshot: CdmSnapshot
    "The number of snappable descendants of this object"
    numSnappableDescendants: Int!
    "The object type of this object."
    objectType: HierarchyObjectTypeEnum!
    "the oldest snapshot of this snappable"
    oldestSnapshot: CdmSnapshot
    "the number of on-demand snapshots"
    onDemandSnapshotCount: Int!
    pathExceptions: [String!]!
    pathExcluded: [String!]!
    pathIncluded: [String!]!
    "Mapping from objectId to object deletion pending status"
    pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion
    "Non-null when a user has assigned a SLA to this object, and the SLA assignment is in the process of being synced over to CDM"
    pendingSla: SlaDomain
    "A sequential list containing this object's physical ancestors."
    physicalPath: [PathNode!]!
    "The source cluster of this object. Returned as a data location because there is no guarantee that Polaris has knowledge about the source cluster."
    primaryClusterLocation: DataLocation!
    "The number of objects either replicated by this object or related by replication."
    replicatedObjectCount: Int!
    "Objects either replicated by this object or related by replication"
    replicatedObjects: [CdmHierarchyObject!]!
    "The assignmennt type for this object's SLA"
    slaAssignment: SlaAssignmentTypeEnum!
    "The pause status of the hierarchy object's effective SLA Domain."
    slaPauseStatus: Boolean!
    "The list of snapshots taken for this VM"
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection
    "The distribution of the snapshots of the hierarchy object"
    snapshotDistribution: SnapshotDistribution!
    "GroupBy connection for this VM's snapshots."
    snapshotGroupByConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "filter snapshot connection"
        filter: CdmSnapshotFilterInput,
        "Returns the first n elements from the list."
        first: Int,
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!,
        "Returns the last n elements from the list."
        last: Int,
        timezoneOffset: Float = 0.0
    ): cdmSnapshotGroupByConnection
    symlinkResolutionEnabled: Boolean!
}

type YARAMatchDetail {
    "Required. The name of the matching YARA rule."
    name: String!
    "Required. Optional YARA tags https://yara.readthedocs.io/en/latest/writingrules.html#rule-tags."
    tags: [String!]!
}

type YearlySnapshotSchedule {
    basicSchedule: BasicSnapshotSchedule
    dayOfYear: DayOfYearEnum!
    yearStartMonth: MonthEnum!
}

"Snapshot data with groupby info applied to it."
type cdmSnapshotGroupBy {
    "Further provide groupings for the data."
    cdmSnapshotGroupBy(
        "group snapshots by field"
        groupBy: CdmSnapshotGroupByEnum!
    ): [cdmSnapshotGroupBy!]!
    "The data groupby info."
    groupByInfo: CdmSnapshotGroupByInfo!
    "Paginated snapshot data."
    snapshotConnection(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int,
        "sort snapshots by field"
        sortBy: CdmSnapshotSortByEnum = Date,
        "sort order"
        sortOrder: SortOrderEnum
    ): CdmSnapshotConnection!
}

type cdmSnapshotGroupByConnection {
    count: Int!
    edges: [cdmSnapshotGroupByEdge!]!
    nodes: [cdmSnapshotGroupBy!]!
    pageInfo: PageInfo!
}

type cdmSnapshotGroupByEdge {
    cursor: String!
    node: cdmSnapshotGroupBy!
}

type clusterState {
    "Cluster removal job creation time."
    clusterRemovalCreatedAt: DateTime
    "Cluster removal status of cdm cluster"
    clusterRemovalState: ClusterRemovalState!
    "Cluster removal job update time."
    clusterRemovalUpdatedAt: DateTime
    "ConnectedStatus of cdm cluster"
    connectedState: ClusterStatus!
}

type configGroupBy {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection"
    groupById: String!
}

type dataViewMetadata {
    count: Long!
    dataViewType: DataViewTypeEnum!
}

"Response of the operation to delete Exocompute Configuration from the Azure Cloud Account ."
type deleteAzureCloudAccountExocomputeConfigurationsResponse {
    "IDs of the Azure Cloud Account which failed to be deleted."
    deletionFailedIds: [String!]!
    "IDs of the Azure Cloud Account which were successfully deleted."
    deletionSuccessIds: [String!]!
}

"ID of the resource."
type id {
    id: String!
}

"Cluster metric data grouped by a time unit."
type metricTimeSeries {
    "cluster metric data for the given time interval."
    metric: ClusterMetric!
    "The time groupby info."
    timeInfo: ClusterMetricGroupByInfo!
}

type pendingAction {
    actionType: PendingActionType
    actionTypeStr: String!
    clusterUuid: String!
    createdAt: DateTime
    description: String!
    info: String!
    pendingActionId: String!
    status: PendingActionStatusEnum!
    updatedAt: DateTime
}

type reportGenerateReply {
    "The Id of the job"
    jobId: Long!
    "The reference Id of the job"
    referenceId: String!
}

"The status of the async cdm request"
type vSphereAsyncRequestStatus {
    endTime: DateTime!
    error: vSphereRequestErrorInfo
    id: String!
    links: [vSphereLink!]!
    nodeId: String!
    progress: Float!
    startTime: DateTime!
    status: String!
}

"a link with href and rel properties."
type vSphereLink {
    href: String!
    rel: String!
}

"contains error info for a cdm response"
type vSphereRequestErrorInfo {
    message: String!
}

enum AccessTypeEnum {
    CREATE_ACCESS
    DELETE_ACCESS
    FULL_CONTROL
    READ_ACCESS
    WRITE_ACCESS
}

enum AceFlagsEnum {
    CONTAINER_INHERIT
    EMPTY_FLAG
    FAILED_ACCESS
    INHERITED
    INHERIT_ONLY
    NO_PROPAGATE_INHERIT
    OBJECT_INHERIT
    SUCCESSFUL_ACCESS
}

enum AceQualifierEnum {
    ACCESS_ALLOWED
    ACCESS_DENIED
    CUSTOM
    SYSTEM_ALARM
    SYSTEM_AUDIT
}

enum AckClusterStatus {
    DownloadFailed
    PrechecksError
}

enum ActionEnum {
    RESUME
    ROLLBACK
    START
}

enum ActivityAccessTypeEnum {
    CREATE_ACTIVITY
    DELETE_ACTIVITY
    READ_ACTIVITY
    WRITE_ACTIVITY
}

enum ActivityObjectTypeEnum {
    AppBlueprint
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    AzureSqlDatabase
    AzureSqlManagedInstance
    CASSANDRA_COLUMN_FAMILY
    CASSANDRA_KEYSPACE
    CASSANDRA_SOURCE
    CapacityBundle
    Certificate
    CloudNativeVirtualMachine
    CloudNativeVm
    Cluster
    ComputeInstance
    DataLocation
    Ec2Instance
    Envoy
    Exocompute
    FailoverClusterApp
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Hdfs
    Host
    HypervScvmm
    HypervServer
    HypervVm
    JobInstance
    KuprCluster
    KuprNamespace
    Ldap
    LinuxFileset
    LinuxHost
    ManagedVolume
    Mssql
    NasHost
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Group
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Team
    ObjectProtection
    Oracle
    OracleDb
    OracleHost
    OracleRac
    PolarisAccount
    PolarisEbsVolume
    PolarisEc2Instance
    PublicCloudMachineInstance
    SamlSso
    SapHanaDb
    SapHanaSystem
    ShareFileset
    SlaDomain
    SmbDomain
    SnapMirrorCloud
    StorageArray
    StorageArrayVolumeGroup
    StorageLocation
    Storm
    SupportBundle
    UnknownObjectType
    Upgrade
    User
    Vcd
    VcdVapp
    Vcenter
    VmwareComputeCluster
    VmwareVm
    VolumeGroup
    WindowsFileset
    WindowsHost
}

enum ActivitySeriesGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    LastActivityStatus
    LastActivityType
    Month
    ObjectType
    Quarter
    Week
    Year
}

enum ActivitySeriesSortByEnum {
    ActivityStatus
    ActivityType
    ClusterName
    LastUpdated
    Location
    ObjectName
    ObjectType
    Severity
    StartTime
}

"The severity of the anomalous activity detected in the snapshot."
enum ActivitySeverity {
    "\"Critical\" level of anomalous activity."
    CRITICAL
    "\"Warning\" level of anomalous activity."
    WARNING
}

enum ActivitySeverityEnum {
    Critical
    Info
    Warning
}

enum ActivityStatusEnum {
    Canceled
    Canceling
    Failure
    Info
    Queued
    Running
    Success
    TaskFailure
    TaskSuccess
    Warning
}

enum ActivityTableColumnEnum {
    ActivityStatus
    ActivityType
    ClusterName
    ClusterType
    ComplianceStatus
    LastUpdated
    Location
    ObjectName
    ObjectType
    SlaDomain
    StartTime
}

enum ActivityTypeEnum {
    Anomaly
    Archive
    AuthDomain
    AwsEvent
    Backup
    Classification
    CloudNativeSource
    CloudNativeVirtualMachine
    CloudNativeVm
    Configuration
    Connection
    Conversion
    Diagnostic
    Discovery
    Download
    EmbeddedEvent
    Failover
    Fileset
    Hardware
    Hdfs
    HostEvent
    HypervScvmm
    HypervServer
    Index
    Instantiate
    LegalHold
    LocalRecovery
    Maintenance
    NutanixCluster
    RadarAnalysis
    Recovery
    Replication
    ResourceOperations
    Storage
    StorageArray
    StormResource
    Support
    Sync
    System
    TestFailover
    UnknownEventType
    Upgrade
    VCenter
    Vcd
    VolumeGroup
}

enum AgentConnectStatusEnum {
    Connected
    Disconnected
    SecondaryCluster
    Unregistered
}

"AMIType to be used for exporting an archived EC2 instance snapshot."
enum AmiType {
    "EC2 instance is a linux instance wihtout marketplace code. AMI will be created at runtime."
    CREATED_AT_RUNTIME
    "An AMI already exists which can be used for export."
    EXISTING
    "User needs to provide an AMI id, which will be used for export."
    USER_SPECIFIED
}

enum AnalyzerErrorCodeEnum {
    ANALYZER
    NOERROR
    OTHER
    PARSING
    READING
}

enum AnalyzerGroupTypeEnum {
    CCPA
    CUSTOM
    GLBA
    HIPAA
    PCI_DSS
    UK_PII
    UNDEFINED
    US_FINANCE
    US_PII
}

enum AnalyzerTypeEnum {
    ABA_ROUTING_NUMBER
    AUSTRALIA_ABN
    AUSTRALIA_ACN
    AUSTRALIA_DL
    AUSTRALIA_MEDICAL_ACCOUNT
    AUSTRALIA_PASSPORT
    AUSTRALIA_TFN
    BELGIUM_BNN
    BELGIUM_DL
    BELGIUM_PASSPORT
    CREDIT_CARD
    CUSIP_NUMBER
    DEA_NUMBER
    EIN
    EMAIL_ADDRESS
    GERMANY_DL
    GERMANY_ID
    GERMANY_PASSPORT
    IBAN
    IPV4_ADDRESS
    IRELAND_PPS
    KEYWORD
    MAC_ADDRESS
    NETHERLANDS_BSN
    NETHERLANDS_DL
    NETHERLANDS_PASSPORT
    NETHERLANDS_TIN
    NETHERLANDS_VAT
    PASSPORT
    PHONE_NUMBER
    REGEX
    SIMHASH
    SWEDEN_DL
    SWEDEN_NIN
    SWEDEN_PASSPORT
    SWEDEN_TIN
    SWIFT_CODE
    UK_DL
    UK_ELECTORAL
    UK_NHS
    UK_NINO
    UK_UTR
    UNDEFINED
    US_BANK_ACCT
    US_CA_DL
    US_DL
    US_HEALTHCARE_NPI
    US_ITIN
    US_MBI
    US_SSN
    US_VIN
    WORD_FREQUENCY
}

enum AnomalyResultGroupByEnum {
    ClusterUuid
    Day
    Hour
    IsAnomaly
    ManagedId
    Month
    Week
    Year
}

enum AnomalyResultSortByEnum {
    AnomalyProbability
    BytesCreatedCount
    BytesDeletedCount
    BytesModifiedCount
    BytesNetChangedCount
    ClusterUuid
    FilesCreatedCount
    FilesDeletedCount
    FilesModifiedCount
    IsAnomaly
    ManagedId
    ObjectType
    PreviousSnapshotDate
    PreviousSnapshotId
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
    SuspiciousFilesCount
}

enum AnomalyTableColumnEnum {
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    PreviousSnapshotDate
    PreviousSnapshotId
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
    SuspiciousFilesAdded
}

enum AppBlueprintFailoverStatusEnum {
    CleanupInProgress
    InProgress
    Paused
    Ready
    TestCleanupInProgress
    TestInProgress
    TestPaused
    TestPending
    Tested
}

enum AppBlueprintLastFailoverStatusEnum {
    Failed
    NotExist
    Succeeded
}

enum AppBlueprintRmStatusEnum {
    Configured
    Invalid
    MissingVms
    NotConfigured
}

enum AppBlueprintStatusEnum {
    Creating
    Deleted
    Deleting
    Ready
    Updating
}

enum AppFilterFieldEnum {
    APP_ID
    APP_TYPE
    SUBSCRIPTION
    TENANT_ID
}

enum AppSortByFieldEnum {
    ADDED_AT
    APP_ID
    APP_OWNER
    APP_TYPE
    IS_AUTHENTICATED
    SUBSCRIPTION
}

enum AppSortOrderEnum {
    ASC
    DESC
}

enum AppflowsBlueprintFailoverReportStatusEnum {
    ACTIVE
    CREATING
    EXPIRED
}

enum ArchivalGroupTypeEnum {
    AUTOMATIC_ARCHIVAL_GROUP
    CLOUD_NATIVE_ARCHIVAL_GROUP
    DATACENTER_ARCHIVAL_GROUP
    MANUAL_ARCHIVAL_GROUP
    UNKNOWN_ARCHIVAL_GROUP
}

enum ArchivalLocationType {
    Azure
    Cleversafe
    Glacier
    Google
    HDS
    Nfs
    Qstar
    Rehydrated
    S3
    S3Compatible
    Scality
}

enum AssignSLAWarningsEnum {
    ARCHIVAL_CONFIGURATION_NOT_RESPECTED
    ARCHIVAL_LOCATION_NOT_SPECIFIED
    AWS_ARCHIVAL_NOT_SUPPORTED_FOR_GOVCLOUD_OBJECTS
    AWS_CROSS_ACCOUNT_REPLICATION_CONFIG_WARNING
    AWS_RDS_LOG_BACKUP_CONFIG_WARNING
    AWS_REPLICATION_REGION_VALIDATION
    AZURE_FULL_SNAPSHOTS
    AZURE_NATIONAL_PUBLIC_REPLICATION_NOT_SUPPORTED
    BACKUP_WINDOWS_NOT_RESPECTED
    CROSS_REGION_ARCHIVAL
    DIFFERENTIAL_BACKUP_FREQUENCY_NOT_RESPECTED
    INCREMENTAL_BACKUP_FREQUENCY_NOT_RESPECTED
    INSTANT_ARCHIVAL_ACCOUNT_LEVEL_DISK_SIZE_WARNING
    INSTANT_ARCHIVAL_DISK_SIZE_WARNING
    NO_WARNING
    REMOTE_CONFIGURATION_NOT_RESPECTED
    REPLICATION_CONFIGURATION_NOT_RESPECTED
    REPLICATION_TARGET_SAME_AS_SOURCE
    SLA_NOT_SYNCED
    SNAPSHOTS_MAY_EXPIRE
}

enum AuthTypeEnum {
    KERBEROS
    NONE
}

enum AwsAccountStatusEnum {
    Added
    Deleted
    Deleting
    DeletionFailed
    Disconnected
    RefreshFailed
    Refreshed
    Refreshing
}

"AWS cloud account regions enum."
enum AwsCloudAccountRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    SA_EAST_1
    UNKNOWN_AWS_REGION
    US_EAST_1
    US_EAST_2
    "AWS Gov cloud US East 1 (N. Virginia) region."
    US_GOV_EAST_1
    "AWS Gov cloud US West 1 (N. California) region."
    US_GOV_WEST_1
    US_WEST_1
    US_WEST_2
}

enum AwsCloudComputeSettingFilterFieldEnum {
    CLOUD_ACCOUNT_ID
    CLUSTER_ALL
    CLUSTER_ID
    IS_ARCHIVED
    IS_SG_POLARIS_MANAGED
    NAME
}

enum AwsCloudComputeSettingSortByFieldEnum {
    NAME
}

"AWS Cloud Type Enum."
enum AwsCloudTypeEnum {
    "Cloud type for AWS China cloud account"
    CHINA
    "Cloud type for AWS Gov cloud account"
    GOV
    "Cloud type for AWS Commercial cloud account"
    STANDARD
}

enum AwsFeatureForPermissionCheck {
    AWS_EXPORT_VM_IN_POWERED_OFF_STATE
    AWS_UNSPECIFIED
}

enum AwsInstanceTenancyEnum {
    DEDICATED
    DEFAULT
    HOST
}

enum AwsNativeAccountSortFieldsEnum {
    EBS_VOLUME_COUNT
    EC2_INSTANCE_COUNT
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AwsNativeEbsVolumeSortFieldsEnum {
    AWS_NATIVE_ACCOUNT_NAME
    EBS_VOLUME_ID
    EBS_VOLUME_NAME
    EBS_VOLUME_SIZE
    EBS_VOLUME_TYPE
    EFFECTIVE_SLA_DOMAIN
}

enum AwsNativeEbsVolumeTypeEnum {
    GP2
    GP3
    IO1
    IO2
    NOT_SPECIFIED
    SC1
    ST1
    STANDARD
    UNKNOWN
}

enum AwsNativeEc2InstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_VPC_ID
    EC2_INSTANCE_ID
    EC2_INSTANCE_NAME
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA_DOMAIN
}

enum AwsNativeEc2InstanceTypeEnum {
    A1_2XLARGE
    A1_4XLARGE
    A1_LARGE
    A1_MEDIUM
    A1_METAL
    A1_XLARGE
    C1_MEDIUM
    C1_XLARGE
    C3_2XLARGE
    C3_4XLARGE
    C3_8XLARGE
    C3_LARGE
    C3_XLARGE
    C4_2XLARGE
    C4_4XLARGE
    C4_8XLARGE
    C4_LARGE
    C4_XLARGE
    C5D_12XLARGE
    C5D_18XLARGE
    C5D_24XLARGE
    C5D_2XLARGE
    C5D_4XLARGE
    C5D_9XLARGE
    C5D_LARGE
    C5D_METAL
    C5D_XLARGE
    C5N_18XLARGE
    C5N_2XLARGE
    C5N_4XLARGE
    C5N_9XLARGE
    C5N_LARGE
    C5N_XLARGE
    C5_12XLARGE
    C5_18XLARGE
    C5_24XLARGE
    C5_2XLARGE
    C5_4XLARGE
    C5_9XLARGE
    C5_LARGE
    C5_METAL
    C5_XLARGE
    CC1_4XLARGE
    CC2_8XLARGE
    CG1_4XLARGE
    CR1_8XLARGE
    D2_2XLARGE
    D2_4XLARGE
    D2_8XLARGE
    D2_XLARGE
    F1_16XLARGE
    F1_2XLARGE
    F1_4XLARGE
    G2_2XLARGE
    G2_8XLARGE
    G3S_XLARGE
    G3_16XLARGE
    G3_4XLARGE
    G3_8XLARGE
    G4DN_12XLARGE
    G4DN_16XLARGE
    G4DN_2XLARGE
    G4DN_4XLARGE
    G4DN_8XLARGE
    G4DN_XLARGE
    H1_16XLARGE
    H1_2XLARGE
    H1_4XLARGE
    H1_8XLARGE
    HI1_4XLARGE
    HS1_8XLARGE
    I2_2XLARGE
    I2_4XLARGE
    I2_8XLARGE
    I2_XLARGE
    I3EN_12XLARGE
    I3EN_24XLARGE
    I3EN_2XLARGE
    I3EN_3XLARGE
    I3EN_6XLARGE
    I3EN_LARGE
    I3EN_METAL
    I3EN_XLARGE
    I3_16XLARGE
    I3_2XLARGE
    I3_4XLARGE
    I3_8XLARGE
    I3_LARGE
    I3_METAL
    I3_XLARGE
    INF1_24XLARGE
    INF1_2XLARGE
    INF1_6XLARGE
    INF1_XLARGE
    M1_LARGE
    M1_MEDIUM
    M1_SMALL
    M1_XLARGE
    M2_2XLARGE
    M2_4XLARGE
    M2_XLARGE
    M3_2XLARGE
    M3_LARGE
    M3_MEDIUM
    M3_XLARGE
    M4_10XLARGE
    M4_16XLARGE
    M4_2XLARGE
    M4_4XLARGE
    M4_LARGE
    M4_XLARGE
    M5AD_12XLARGE
    M5AD_16XLARGE
    M5AD_24XLARGE
    M5AD_2XLARGE
    M5AD_4XLARGE
    M5AD_8XLARGE
    M5AD_LARGE
    M5AD_XLARGE
    M5A_12XLARGE
    M5A_16XLARGE
    M5A_24XLARGE
    M5A_2XLARGE
    M5A_4XLARGE
    M5A_8XLARGE
    M5A_LARGE
    M5A_XLARGE
    M5DN_12XLARGE
    M5DN_16XLARGE
    M5DN_24XLARGE
    M5DN_2XLARGE
    M5DN_4XLARGE
    M5DN_8XLARGE
    M5DN_LARGE
    M5DN_XLARGE
    M5D_12XLARGE
    M5D_16XLARGE
    M5D_24XLARGE
    M5D_2XLARGE
    M5D_4XLARGE
    M5D_8XLARGE
    M5D_LARGE
    M5D_METAL
    M5D_XLARGE
    M5N_12XLARGE
    M5N_16XLARGE
    M5N_24XLARGE
    M5N_2XLARGE
    M5N_4XLARGE
    M5N_8XLARGE
    M5N_LARGE
    M5N_XLARGE
    M5_12XLARGE
    M5_16XLARGE
    M5_24XLARGE
    M5_2XLARGE
    M5_4XLARGE
    M5_8XLARGE
    M5_LARGE
    M5_METAL
    M5_XLARGE
    NOT_SPECIFIED
    P2_16XLARGE
    P2_8XLARGE
    P2_XLARGE
    P3DN_24XLARGE
    P3_16XLARGE
    P3_2XLARGE
    P3_8XLARGE
    R3_2XLARGE
    R3_4XLARGE
    R3_8XLARGE
    R3_LARGE
    R3_XLARGE
    R4_16XLARGE
    R4_2XLARGE
    R4_4XLARGE
    R4_8XLARGE
    R4_LARGE
    R4_XLARGE
    R5AD_12XLARGE
    R5AD_16XLARGE
    R5AD_24XLARGE
    R5AD_2XLARGE
    R5AD_4XLARGE
    R5AD_8XLARGE
    R5AD_LARGE
    R5AD_XLARGE
    R5A_12XLARGE
    R5A_16XLARGE
    R5A_24XLARGE
    R5A_2XLARGE
    R5A_4XLARGE
    R5A_8XLARGE
    R5A_LARGE
    R5A_XLARGE
    R5DN_12XLARGE
    R5DN_16XLARGE
    R5DN_24XLARGE
    R5DN_2XLARGE
    R5DN_4XLARGE
    R5DN_8XLARGE
    R5DN_LARGE
    R5DN_XLARGE
    R5D_12XLARGE
    R5D_16XLARGE
    R5D_24XLARGE
    R5D_2XLARGE
    R5D_4XLARGE
    R5D_8XLARGE
    R5D_LARGE
    R5D_METAL
    R5D_XLARGE
    R5N_12XLARGE
    R5N_16XLARGE
    R5N_24XLARGE
    R5N_2XLARGE
    R5N_4XLARGE
    R5N_8XLARGE
    R5N_LARGE
    R5N_XLARGE
    R5_12XLARGE
    R5_16XLARGE
    R5_24XLARGE
    R5_2XLARGE
    R5_4XLARGE
    R5_8XLARGE
    R5_LARGE
    R5_METAL
    R5_XLARGE
    T1_MICRO
    T2_2XLARGE
    T2_LARGE
    T2_MEDIUM
    T2_MICRO
    T2_NANO
    T2_SMALL
    T2_XLARGE
    T3A_2XLARGE
    T3A_LARGE
    T3A_MEDIUM
    T3A_MICRO
    T3A_NANO
    T3A_SMALL
    T3A_XLARGE
    T3_2XLARGE
    T3_LARGE
    T3_MEDIUM
    T3_MICRO
    T3_NANO
    T3_SMALL
    T3_XLARGE
    UNKNOWN
    U_12TB1_METAL
    U_18TB1_METAL
    U_24TB1_METAL
    U_6TB1_METAL
    U_9TB1_METAL
    X1E_16XLARGE
    X1E_2XLARGE
    X1E_32XLARGE
    X1E_4XLARGE
    X1E_8XLARGE
    X1E_XLARGE
    X1_16XLARGE
    X1_32XLARGE
    Z1D_12XLARGE
    Z1D_2XLARGE
    Z1D_3XLARGE
    Z1D_6XLARGE
    Z1D_LARGE
    Z1D_METAL
    Z1D_XLARGE
}

enum AwsNativeFileRecoveryStatusEnum {
    DISABLED
    ENABLED
    NOT_SPECIFIED
}

enum AwsNativeProtectionFeatureEnum {
    EC2
    RDS
}

enum AwsNativeRdsDbEngineEnum {
    MARIADB
    MYSQL
    ORACLE_EE
    ORACLE_SE
    ORACLE_SE1
    ORACLE_SE2
    POSTGRES
    SQLSERVER_EE
    SQLSERVER_EX
    SQLSERVER_SE
    SQLSERVER_WEB
    UNKNOWN
}

enum AwsNativeRdsDbInstanceClassEnum {
    DB_M1_LARGE
    DB_M1_MEDIUM
    DB_M1_SMALL
    DB_M1_XLARGE
    DB_M2_2XLARGE
    DB_M2_4XLARGE
    DB_M2_XLARGE
    DB_M3_2XLARGE
    DB_M3_LARGE
    DB_M3_MEDIUM
    DB_M3_XLARGE
    DB_M4_10XLARGE
    DB_M4_16XLARGE
    DB_M4_2XLARGE
    DB_M4_4XLARGE
    DB_M4_LARGE
    DB_M4_XLARGE
    DB_M5_12XLARGE
    DB_M5_16XLARGE
    DB_M5_24XLARGE
    DB_M5_2XLARGE
    DB_M5_4XLARGE
    DB_M5_8XLARGE
    DB_M5_LARGE
    DB_M5_XLARGE
    DB_R3_2XLARGE
    DB_R3_4XLARGE
    DB_R3_8XLARGE
    DB_R3_LARGE
    DB_R3_XLARGE
    DB_R4_12XLARGE
    DB_R4_16XLARGE
    DB_R4_2XLARGE
    DB_R4_4XLARGE
    DB_R4_8XLARGE
    DB_R4_LARGE
    DB_R4_XLARGE
    DB_R5_12XLARGE
    DB_R5_16XLARGE
    DB_R5_24XLARGE
    DB_R5_2XLARGE
    DB_R5_4XLARGE
    DB_R5_8XLARGE
    DB_R5_LARGE
    DB_R5_XLARGE
    DB_T2_2XLARGE
    DB_T2_LARGE
    DB_T2_MEDIUM
    DB_T2_MICRO
    DB_T2_SMALL
    DB_T2_XLARGE
    DB_T3_2XLARGE
    DB_T3_LARGE
    DB_T3_MEDIUM
    DB_T3_MICRO
    DB_T3_SMALL
    DB_T3_XLARGE
    DB_X1E_16XLARGE
    DB_X1E_2XLARGE
    DB_X1E_32XLARGE
    DB_X1E_4XLARGE
    DB_X1E_8XLARGE
    DB_X1E_XLARGE
    DB_X1_16XLARGE
    DB_X1_32XLARGE
    DB_Z1D_12XLARGE
    DB_Z1D_2XLARGE
    DB_Z1D_4XLARGE
    DB_Z1D_6XLARGE
    DB_Z1D_LARGE
    DB_Z1D_XLARGE
    UNKNOWN
}

enum AwsNativeRdsInstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_NATIVE_RDS_DB_ENGINE
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    AWS_VPC_ID
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AwsNativeRdsStorageTypeEnum {
    GP2
    IO1
    NOT_SPECIFIED
    STANDARD
    UNKNOWN
}

enum AwsNativeRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    NOT_SPECIFIED
    SA_EAST_1
    US_EAST_1
    US_EAST_2
    "AWS Gov cloud US East 1 (N. Virginia) region"
    US_GOV_EAST_1
    "AWS Gov cloud US West 1 (N. California) region"
    US_GOV_WEST_1
    US_WEST_1
    US_WEST_2
}

enum AwsNativeRegionForReplicationEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_NORTH_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    NOT_DEFINED
    SA_EAST_1
    SOURCE_REGION
    US_EAST_1
    US_EAST_2
    US_GOV_EAST_1
    US_GOV_WEST_1
    US_WEST_1
    US_WEST_2
}

enum AwsRegionEnum {
    AF_SOUTH_1
    AP_EAST_1
    AP_NORTHEAST_1
    AP_NORTHEAST_2
    AP_NORTHEAST_3
    AP_SOUTHEAST_1
    AP_SOUTHEAST_2
    AP_SOUTH_1
    CA_CENTRAL_1
    CN_NORTHWEST_1
    CN_NORTH_1
    EU_CENTRAL_1
    EU_SOUTH_1
    EU_WEST_1
    EU_WEST_2
    EU_WEST_3
    ME_SOUTH_1
    SA_EAST_1
    UNKNOWN_AWS_REGION
    US_EAST_1
    US_EAST_2
    US_GOV_WEST_1
    US_WEST_1
    US_WEST_2
}

enum AwsRetrievalTier {
    BULK_TIER
    EXPEDITED_TIER
    STANDARD_TIER
}

enum AwsStorageClassTypeEnum {
    ONEZONE_IA
    STANDARD
    STANDARD_IA
    UNKNOWN_STORAGE_CLASS
}

enum AzureCloudAccountRegionEnum {
    AUSTRALIACENTRAL
    AUSTRALIACENTRAL2
    AUSTRALIAEAST
    AUSTRALIASOUTHEAST
    BRAZILSOUTH
    CANADACENTRAL
    CANADAEAST
    CENTRALINDIA
    CENTRALUS
    CHINAEAST
    CHINAEAST2
    CHINANORTH
    CHINANORTH2
    EASTASIA
    EASTUS
    EASTUS2
    FRANCECENTRAL
    FRANCESOUTH
    GERMANYNORTH
    GERMANYWESTCENTRAL
    JAPANEAST
    JAPANWEST
    KOREACENTRAL
    KOREASOUTH
    NORTHCENTRALUS
    NORTHEUROPE
    NORWAYEAST
    NORWAYWEST
    SOUTHAFRICANORTH
    SOUTHAFRICAWEST
    SOUTHCENTRALUS
    SOUTHEASTASIA
    SOUTHINDIA
    SWITZERLANDNORTH
    SWITZERLANDWEST
    UAECENTRAL
    UAENORTH
    UKSOUTH
    UKWEST
    UNKNOWN_AZURE_REGION
    WESTCENTRALUS
    WESTEUROPE
    WESTINDIA
    WESTUS
    WESTUS2
    WESTUS3
}

enum AzureCloudTypeEnum {
    AZURECHINACLOUD
    AZUREPUBLICCLOUD
}

enum AzureFeatureForPermissionCheck {
    AZURE_CROSS_REGION_REPLICATION
    AZURE_EXPORT_VM_IN_POWERED_OFF_STATE
    AZURE_LIST_AVAILABILITY_SET
    AZURE_UNSPECIFIED
}

enum AzureHostTypeEnum {
    BOTH_HOSTS
    CUSTOMER_HOST
    RUBRIK_HOST
    UNDEFINED
}

"The field type used to sort the resource groups."
enum AzureNativeCommonResourceGroupSortFieldsEnum {
    "Use region name for sorting."
    AZURE_REGION
    "Use managed disk SLA for sorting."
    AZURE_RG_DISK_EFFECTIVE_SLA
    "Use SQL Database SLA for sorting."
    AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA
    "Use Managed Instance Database SLA for sorting."
    AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA
    "Use subscription name for sorting."
    AZURE_RG_SUBSCRIPTION_NAME
    "Use virtual machine SLA for sorting."
    AZURE_RG_VM_EFFECTIVE_SLA
    NAME
}

enum AzureNativeDiskSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_DISK_CRG_NAME
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    AZURE_DISK_RG_NAME
    AZURE_DISK_SIZE
    AZURE_DISK_SUBSCRIPTION_NAME
    AZURE_DISK_TYPE
    AZURE_REGION
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeFileIndexingStatus {
    DISABLED
    ENABLED
    NOT_SPECIFIED
}

enum AzureNativeManagedDiskTypeEnum {
    NOT_SPECIFIED
    Premium_LRS
    StandardSSD_LRS
    Standard_LRS
    UNKNOWN
    UltraSSD_LRS
}

"The type of protection feature application on Azure Native offerings."
enum AzureNativeProtectionFeature {
    "Protection on Azure SQL Databases."
    SQL_DB
    "Protection on Azure Native Managed Instances."
    SQL_MI
    "Protection on Azure Native Virtual Machines."
    VM
}

enum AzureNativeRegionEnum {
    AustraliaCentral
    AustraliaCentral2
    AustraliaEast
    AustraliaSoutheast
    BrazilSouth
    CanadaCentral
    CanadaEast
    CentralIndia
    CentralUS
    ChinaEast
    ChinaEast2
    ChinaNorth
    ChinaNorth2
    EastAsia
    EastUS
    EastUS2
    FranceCentral
    FranceSouth
    GermanyNorth
    GermanyWestCentral
    JapanEast
    JapanWest
    KoreaCentral
    KoreaSouth
    NorthCentralUS
    NorthEurope
    NorwayEast
    NorwayWest
    NotSpecified
    SouthAfricaNorth
    SouthAfricaWest
    SouthCentralUS
    SouthIndia
    SoutheastAsia
    SwitzerlandNorth
    SwitzerlandWest
    UKSouth
    UKWest
    UaeCentral
    UaeNorth
    WestCentralUS
    WestEurope
    WestIndia
    WestUS
    WestUS2
    WestUS3
}

enum AzureNativeRegionForReplicationEnum {
    AustraliaCentral
    AustraliaCentral2
    AustraliaEast
    AustraliaSoutheast
    BrazilSouth
    CanadaCentral
    CanadaEast
    CentralIndia
    CentralUS
    ChinaEast
    ChinaEast2
    ChinaNorth
    ChinaNorth2
    EastAsia
    EastUS
    EastUS2
    FranceCentral
    FranceSouth
    GermanyNorth
    GermanyWestCentral
    JapanEast
    JapanWest
    KoreaCentral
    KoreaSouth
    NorthCentralUS
    NorthEurope
    NorwayEast
    NorwayWest
    NotDefined
    SourceRegion
    SouthAfricaNorth
    SouthAfricaWest
    SouthCentralUS
    SouthIndia
    SoutheastAsia
    SwitzerlandNorth
    SwitzerlandWest
    UKSouth
    UKWest
    UaeCentral
    UaeNorth
    WestCentralUS
    WestEurope
    WestIndia
    WestUS
    WestUS2
    WestUS3
}

enum AzureNativeSubscriptionSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_SUBSCRIPTION_DISKCOUNT
    AZURE_SUBSCRIPTION_VMCOUNT
    AZURE_TENANT_ID
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeVirtualMachineSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    AZURE_REGION
    AZURE_SUBNET_NAME
    AZURE_VM_CRG_NAME
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    AZURE_VM_RG_NAME
    AZURE_VM_SIZE
    AZURE_VM_SUBSCRIPTION_NAME
    AZURE_VNET_NAME
    EFFECTIVE_SLA_DOMAIN
    NAME
}

enum AzureNativeVmOsTypeEnum {
    Linux
    Unknown
    Windows
}

enum AzureNetworkSecurityRulesStatusEnum {
    BLOCKING
    GOOD
    MAYBE_BLOCKING
}

"Redundancy value for the azure resource. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy"
enum AzureRedundancy {
    "Geo-redundant storage."
    GRS
    "Geo-zone-redundant storage."
    GZRS
    "Locally redundant storage."
    LRS
    "Read access Geo-redundant storage."
    RA_GRS
    "Read Access Geo-zone-redundant storage."
    RA_GZRS
    UNKNOWN_AZURE_REDUNDANCY
    "Zone-redundant storage."
    ZRS
}

enum AzureRegionEnum {
    ASIA_EAST
    ASIA_SOUTHEAST
    AUSTRALIA_CENTRAL
    AUSTRALIA_CENTRAL2
    AUSTRALIA_EAST
    AUSTRALIA_SOUTHEAST
    BRAZIL_SOUTH
    CANADA_CENTRAL
    CANADA_EAST
    CHINA_EAST
    CHINA_EAST2
    CHINA_NORTH
    EUROPE_NORTH
    EUROPE_WEST
    FRANCE_CENTRAL
    FRANCE_SOUTH
    GERMANY_CENTRAL
    GERMANY_NORTHEAST
    GERMANY_WEST_CENTRAL
    GOV_US_ARIZONA
    GOV_US_DOD_CENTRAL
    GOV_US_DOD_EAST
    GOV_US_IOWA
    GOV_US_TEXAS
    GOV_US_VIRGINIA
    INDIA_CENTRAL
    INDIA_SOUTH
    INDIA_WEST
    JAPAN_EAST
    JAPAN_WEST
    KOREA_CENTRAL
    KOREA_SOUTH
    NORWAY_EAST
    NORWAY_WEST
    SOUTH_AFRICA_NORTH
    SOUTH_AFRICA_WEST
    SWITZERLAND_NORTH
    SWITZERLAND_WEST
    UAE_CENTRAL
    UAE_NORTH
    UK_SOUTH
    UK_WEST
    UNKNOWN_AZURE_REGION
    US_CENTRAL
    US_EAST
    US_EAST2
    US_NORTH_CENTRAL
    US_SOUTH_CENTRAL
    US_WEST
    US_WEST2
    US_WEST_CENTRAL
    WEST_US3
}

"The type of snapshot to be used in export or restore jobs."
enum AzureSnapshotType {
    "Use the archived snapshot."
    ARCHIVED
    "Use the replicated snapshot."
    REPLICATED
    "Use the source snapshot."
    SOURCE
}

"The type of backup storage redundancy for Azure SQL."
enum AzureSqlBackupStorageRedundancyType {
    "Geo-Redundant Storage."
    GRS
    "Locally-Redundant Storage."
    LRS
    "Zone-Redundant Storage."
    ZRS
}

"Fields on which the list of Azure SQL Database Servers can be sorted."
enum AzureSqlDatabaseServerSortFields {
    NAME
}

"Fields on which the list of Azure SQL Databases can be sorted."
enum AzureSqlDatabaseSortFields {
    NAME
}

"Fields on which the list of Azure SQL Managed Instance Databases can be sorted."
enum AzureSqlManagedInstanceDatabaseSortFields {
    NAME
}

"Fields on which the list of Azure SQL Managed Instance Servers can be sorted."
enum AzureSqlManagedInstanceServerSortFields {
    NAME
}

"Storage Tier for the storage accounts/containers. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers"
enum AzureStorageTier {
    "Optimized for storing data that is rarely accessed."
    ARCHIVE
    "Optimized for storing data that is accessed frequently."
    COOL
    "Optimized for storing data that is infrequently accessed."
    HOT
    UNKNOWN_STORAGE_TIER
}

enum AzureSubscriptionStatusEnum {
    Added
    Deleted
    Deleting
    DeletionFailed
    RefreshFailed
    Refreshed
    Refreshing
}

"Color of the banner displayed on UI for accounts with classified snappables"
enum BannerColor {
    "Blue"
    BLUE
    "Green"
    GREEN
    "None"
    NONE
    "Orange"
    ORANGE
    "Red"
    RED
    "Yellow"
    YELLOW
}

enum BlueprintFailoverIgnorableError {
    NETWORK_RECONFIGURE_ERROR
    POSTSCRIPT_EXECUTION_ERROR
}

"Blueprint failover status enum."
enum BlueprintFailoverStatus {
    "Blueprint failover failed."
    FAILED
    "Blueprint failover does not exist."
    NOT_EXIST
    "Blueprint failover succeeded."
    SUCCEEDED
}

enum BlueprintLocationTypeEnum {
    Aws
    Azure
    CDM
    Unknown
}

enum BlueprintPlatformEnum {
    Aws
    UnknownPlatform
    vSphere
}

enum BlueprintStatusEnum {
    Configured
    Invalid
    MissingChildren
    NotConfigured
    Uncompleted
}

enum CalendarEmailAddressFilterTypeEnum {
    ALL
    ATTENDEE
    ORGANIZER
}

enum CalendarEventTypeEnum {
    SERIES_EXCEPTION
    SERIES_MASTER
    SERIES_OCCURRENCE
    SINGLE_INSTANCE
}

enum CalendarSearchKeywordTypeEnum {
    NAME
}

enum CalendarSearchObjectTypeEnum {
    ALL
    CALENDAR
    EVENT
}

"Enum for cassandra source status."
enum CassandraSourceStatus {
    "Source is getting added."
    ADDING
    "Source is connected."
    CONNECTED
    "Source is deleted."
    DELETED
    "Source is getting deleted."
    DELETING
    "Source is disconnected."
    DISCONNECTED
    "Source data is getting refreshed."
    REFRESHING
    "Unknown source status."
    UNKNOWN_SYSTEM_STATUS
}

"Status of Job."
enum CcpJobStatus {
    "Bootstrapping cluster."
    BOOTSTRAPPING
    "Completed successfully."
    COMPLETED
    "Failed."
    FAILED
    "Initializing."
    INITIALIZING
    "Invalid status."
    INVALID
    "Node connection verify."
    NODE_CONNECTION_VERIFICATION
    "Node creation."
    NODE_CREATE
    "Node information retrieval."
    NODE_INFO_EXTRACTION
    "Rotate token."
    ROTATE_TOKEN
}

"Type of cluster job."
enum CcpJobType {
    "Add a node to cluster."
    ADD_NODE
    "Create cluster job."
    CLUSTER_CREATE
    "Delete cluster job."
    CLUSTER_DELETE
    "Remove node from cluster."
    REMOVE_NODE
}

"Cloud vendor provider."
enum CcpVendorType {
    "AWS."
    AWS
    "Azure."
    AZURE
    "GCP."
    GCP
}

enum CdmClusterStatusTypeEnum {
    Disconnected
    DownloadPackageFailed
    DownloadingPackage
    FailedToInitiateUpgrade
    OnOldRelease
    PrechecksFailureError
    PrechecksFailureWarning
    PrechecksRunning
    ReadyForDownload
    ReadyForUpgrade
    ResumingUpgrade
    RollbackFailed
    RollingBackUpgrade
    Stable
    StableWithUpgradeInfo
    Unknown
    UpgradeFailed
    UpgradeRecommended
    UpgradeScheduled
    UpgradeScheduledWithWarning
    Upgrading
}

enum CdmSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum CdmSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

enum CdpLocalStatusEnum {
    CDP_LOCAL_STATUS_ACTIVE
    CDP_LOCAL_STATUS_FAILED
    CDP_LOCAL_STATUS_NOT_ENABLED
    CDP_LOCAL_STATUS_PENDING
    CDP_LOCAL_STATUS_RESYNCING
    CDP_LOCAL_STATUS_TAKING_SNAPSHOT
}

enum CdpReplicationStatusEnum {
    CDP_REPLICATION_STATUS_FAILED
    CDP_REPLICATION_STATUS_HEALTHY
    CDP_REPLICATION_STATUS_INITIALIZING
    CDP_REPLICATION_STATUS_NOT_ENABLED
}

enum CertMgmtSortByEnum {
    NAME
}

enum ChartType {
    BAR_CHART
    DONUT_CHART
    LINE_CHART
}

enum ChronologicalOrderEnum {
    ASC
    DESC
}

enum ClassificationPolicyColor {
    COLOR_001
    COLOR_002
    COLOR_003
    COLOR_004
    COLOR_005
    COLOR_006
    COLOR_007
    COLOR_008
    COLOR_009
    COLOR_010
    COLOR_011
    COLOR_012
    UNKNOWN
}

enum ClassificationPolicyMode {
    COMPLIANCE
    DISCOVERY
}

enum CloudAccountActionEnum {
    CREATE
    DELETE
    UPDATE_CHILD_ACCOUNTS
    UPDATE_PERMISSIONS
    UPDATE_REGIONS
}

enum CloudAccountFeatureEnum {
    ALL
    APP_FLOWS
    ARCHIVAL
    AZURE_SQL_DB_PROTECTION
    AZURE_SQL_MI_PROTECTION
    CLOUDACCOUNTS
    CLOUD_NATIVE_ARCHIVAL
    CLOUD_NATIVE_ARCHIVAL_ENCRYPTION
    CLOUD_NATIVE_PROTECTION
    EXOCOMPUTE
    GCP_SHARED_VPC_HOST
    RDS_PROTECTION
    SERVERS_AND_APPS
}

enum CloudAccountFilterFieldEnum {
    ACCOUNT_PROVIDER_TYPE
    IS_KEY_BASED
    NAME
}

enum CloudAccountSortByFieldEnum {
    NAME
}

enum CloudAccountStatusEnum {
    CONNECTED
    CONNECTING
    DISABLED
    DISCONNECTED
    MISSING_PERMISSIONS
}

enum CloudNativeLabelObjectType {
    GCP_DISK
    GCP_GCE_INSTANCE
}

enum CloudNativeLocTemplateTypeEnum {
    INVALID
    SOURCE_REGION
    SPECIFIC_REGION
}

enum CloudNativeRBAStatusType {
    Not_Registered
    Registered
    Unavailable
}

enum CloudNativeTagObjectType {
    AWS_EBS_VOLUME
    AWS_EC2_INSTANCE
    AWS_RDS_INSTANCE
    AZURE_MANAGED_DISK
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_DATABASE_SERVER
    AZURE_SQL_MANAGED_INSTANCE_SERVER
    AZURE_VIRTUAL_MACHINE
}

enum CloudNativeTagRuleFilterFieldsEnum {
    AWS_ACCOUNT
    CLOUD_NATIVE_ACCOUNT
    NAME
    SLA_DOMAIN
}

enum CloudNativeTagRuleSortByFieldsEnum {
    NAME
    SLA_DOMAIN
    TAG
}

enum CloudNativeVmAppConsistentObjectType {
    AZURE_VIRTUAL_MACHINE
}

enum CloudProviderEnum {
    AWS
    AZURE
}

enum CloudProviderType {
    AWS
    AZURE
    GCP
    NOT_SPECIFIED
}

enum CloudProviderTypeEnum {
    CLOUD_ACCOUNT_AWS
    CLOUD_ACCOUNT_AWS_ROLE_BASED
    CLOUD_ACCOUNT_AZURE
    CLOUD_ACCOUNT_AZURE_ROLE_BASED
    CLOUD_ACCOUNT_GCP
    UNKNOWN_CLOUD_ACCOUNT
}

enum CloudVendorEnum {
    AWS
    AZURE
    GCP
}

"Connection status of the cluster with Rubrik."
enum ClusterConnectionStatus {
    "Cluster is connected to Rubrik."
    CONNECTED
    "Cluster is disconnected from Rubrik."
    DISCONNECTED
    "Cluster was not added or got removed from Rubrik."
    NOT_ATTACHED
}

enum ClusterDiskStatus {
    ACTIVE
    FAILED
    LOCKED
    MISSING
    REMOVED
    UNFORMATTED
    UNKNOWN
}

enum ClusterDiskType {
    FLASH
    HDD
    UNKNOWN
}

enum ClusterGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Type
    Week
    Year
}

enum ClusterJobStatusTypeEnum {
    DownloadPackageFailed
    DownloadingPackage
    FailedToInitiateUpgrade
    PreCheckFailureError
    PreCheckFailureWarning
    ReadyForDownload
    ReadyForUpgrade
    ResumingUpgrade
    RollbackFailed
    RollingBackUpgrade
    Unknown
    UpToDate
    UpgradeFailed
    Upgrading
}

enum ClusterProductEnum {
    CDM
    DATOS
    POLARIS
}

enum ClusterRemovalState {
    DATA_DELETING
    DISCONNECTING
    FAILED
    REGISTERED
    UNREGISTERED
    WAITING_FOR_DATA_DELETION
}

enum ClusterSortByEnum {
    ClusterName
    ClusterType
    RegisteredAt
}

enum ClusterStatus {
    Connected
    Disconnected
    Initializing
}

enum ClusterTypeEnum {
    Cloud
    ExoCompute
    OnPrem
    Polaris
    Robo
    Unknown
}

"Available cold storage class options for tiering."
enum ColdStorageClass {
    "Glacier cold storage class for AWS."
    AWS_GLACIER
    "GDA cold storage class for AWS."
    AWS_GLACIER_DEEP_ARCHIVE
    "Archive cold storage tier for Azure."
    AZURE_ARCHIVE
    COLD_STORAGE_CLASS_UNKNOWN
}

enum ComplianceStatusEnum {
    Empty
    InCompliance
    NotApplicable
    NotAvailable
    Null
    OutOfCompliance
    Unprotected
}

enum ComponentEnum {
    APP_FLOWS
    AWS_NATIVE
    AWS_SOURCE
    AZURE_NATIVE
    BLOBSTORE
    CEREBRO
    CLOUD_ACCOUNTS
    CLOUD_NATIVE
    COLOSSUS
    DATA_GOV
    EXO_COMPUTE
    FELDSPAR
    FORGE
    GCP_NATIVE
    GPS
    KUPR
    O365
    PLATFORM
    RADAR
    SNAPPABLES
    SONAR
    THOR
    USER_MANAGEMENT
    WATCHERS
}

enum ConfiguredSlaTypeEnum {
    CONFIGURED_SLA_TYPE_PROTECTION_SLA
    CONFIGURED_SLA_TYPE_RETENTION_SLA
}

enum ConflictResolutionAuthzEnum {
    ALLOW_AUTO_CONFLICT_RESOLUTION
    NONE
    NO_CONFLICT_RESOLUTION
}

enum ConnectionStatusType {
    CONNECTED
    DISCONNECTED
}

"Tells whether snapshot has app or crash consistency"
enum ConsistencyLevelEnum {
    AppConsistent
    CrashConsistent
    FileSystemConsistent
    Inconsistent
    Unknown
    VssConsistent
}

enum ContextFilterTypeEnum {
    APPFLOWS_FAILOVER_TO_AWS
    APPFLOWS_FAILOVER_TO_CDM
    DEFAULT
}

enum CrawlStatusEnum {
    COMPLETE
    COMPLETE_WITH_FAIL
    IN_PROGRESS
    IN_PROGRESS_WITH_FAIL
}

enum CustomReportGroupByEnum {
    ReportFocus
}

enum CustomReportSortByEnum {
    CreationTime
    UpdateTime
    ViewTime
}

enum DataGovFileModeEnum {
    DIRECTORY
    FILE
    SYMLINK
    UNKNOWN
}

enum DataGovOsTypeEnum {
    LINUX
    NONE
    WINDOWS
}

enum DataGovShareTypeEnum {
    NFS
    SMB
    UNKNOWN_SHARE_TYPE
}

enum DataGovSortOrderEnum {
    ASC
    DESC
}

enum DataTransferTypeEnum {
    EMPTY_VALUE
    EXPORT
    HYDRATION
    INPLACE
}

enum DataTypeEnum {
    BOOLEAN
    BYTE
    DATE_TIME
    FILTER_DATE_RANGE
    FLOAT
    INTEGER
    LONG
    STRING
    URL
}

enum DataViewTypeEnum {
    BACKUP_COMPLIANCE
    CDM_UPGRADES
    INDEXING
    MONITORING_ALL
    MONITORING_CANCELED
    MONITORING_COMPLETED
    MONITORING_FAILED
    MONITORING_IN_PROGRESS
    MONITORING_RETRYABLE_CANCELED
    MONITORING_RETRYABLE_FAILED
    MONITORING_SCHEDULED
    MONITORING_TASK_COUNT_TIME_SERIES
    OBJECT_AUDIT_DETAIL
    OBJECT_AUDIT_LIST
    PROTECTION_TASK_DETAILS
    SLA_AUDIT_DETAIL
    SLA_AUDIT_LIST
    SLA_COMPLIANCE
}

enum DayOfMonthEnum {
    FIFTEENTH
    FIRST_DAY
    LAST_DAY
}

enum DayOfQuarterEnum {
    FIRST_DAY
    LAST_DAY
}

enum DayOfWeekEnum {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum DayOfYearEnum {
    FIRST_DAY
    LAST_DAY
}

"Status for Db2 instances."
enum Db2InstanceStatus {
    "ERROR"
    ERROR
    "OK"
    OK
    "UNKNOWN"
    UNKNOWN
    "WARNING"
    WARNING
}

enum DeltaTypeEnum {
    BYTES_CREATED
    BYTES_DELETED
    BYTES_MODIFIED
    NODES_CREATED
    NODES_DELETED
    NODES_MODIFIED
    NODES_SUSPICIOUS
}

enum DiagnosticTaskStatusEnum {
    DIAGNOSTIC_TASK_STATUS_CANCELED
    DIAGNOSTIC_TASK_STATUS_FAILED
    DIAGNOSTIC_TASK_STATUS_QUEUED
    DIAGNOSTIC_TASK_STATUS_RETRIED
    DIAGNOSTIC_TASK_STATUS_STARTED
    DIAGNOSTIC_TASK_STATUS_SUCCEEDED
}

enum DiskEncryptionType {
    CUSTOMER_MANAGED_KEY
    CUSTOMER_MANAGED_KEY_RESOURCE_ID
    GOOGLE_MANAGED_KEY
    SOURCE_DISK_ENCRYPTION
}

enum DownloadIdentifierEnum {
    REPORT
    SEND_NOW_EMAIL
    SNAPSHOT_FILES_DOWNLOAD
    SONAR_DOWNLOAD
}

enum DownloadStatusEnum {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

enum EmailAddressFilterTypeEnum {
    ALL
    FROM
    TO
}

"The level of encryption detected in the snapshot."
enum EncryptionLevel {
    "High level of encryption."
    HIGH
    "Low level of encryption."
    LOW
    "Medium level of encryption."
    MEDIUM
    "Encryption level is unavailable."
    UNAVAILABLE
}

enum ExistingSnapshotRetentionEnum {
    EXISTING_SNAPSHOT_RETENTION_EXPIRE_IMMEDIATELY
    EXISTING_SNAPSHOT_RETENTION_KEEP_FOREVER
    EXISTING_SNAPSHOT_RETENTION_RETAIN_SNAPSHOTS
}

enum FailoverClusterAppConnectionStatusEnum {
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_APP_CONNECTION_STATUS_REPLICATION_TARGET
}

enum FailoverClusterConnectionStatusEnum {
    FAILOVER_CLUSTER_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_CONNECTION_STATUS_REPLICATION_TARGET
}

enum FailoverClusterNodeConnectionStatusEnum {
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTOR_NOT_DEPLOYED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETING
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DISCONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_PARTIALLY_CONNECTED
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REPLICATION_TARGET
    FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_SECONDARY_CLUSTER
}

enum FailoverClusterOsTypeEnum {
    FAILOVER_CLUSTER_OS_TYPE_AIX
    FAILOVER_CLUSTER_OS_TYPE_ANY
    FAILOVER_CLUSTER_OS_TYPE_HPUX
    FAILOVER_CLUSTER_OS_TYPE_LINUX
    FAILOVER_CLUSTER_OS_TYPE_SUN_OS
    FAILOVER_CLUSTER_OS_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_OS_TYPE_WINDOWS
}

enum FailoverClusterTypeEnum {
    FAILOVER_CLUSTER_TYPE_UNIX_LIKE
    FAILOVER_CLUSTER_TYPE_WINDOWS
}

enum FailoverGroupByEnum {
    Day
    FailoverStatus
    FailoverType
    Hour
    LastTestStatus
    Month
    Quarter
    Source
    TargetSite
    Week
    Year
}

enum FailoverSortByEnum {
    AppBlueprintName
    SourceSiteName
    StartTime
    TargetSiteName
}

enum FailoverStatusEnum {
    FailoverCleanupStarted
    FailoverFailed
    FailoverJobFailed
    FailoverJobSucceeded
    LocalRecoverySucceeded
    Ongoing
    Paused
    TestFailoverSucceeded
}

enum FailoverTableColumnEnum {
    AppBlueprintName
    Duration
    EndTime
    FailoverStatus
    FailoverType
    LastTestStatus
    LastTestTime
    Source
    StartTime
    TargetSite
}

enum FailoverTypeEnum {
    FAILOVER
    LOCALRECOVERY
    TEST_FAILOVER
}

enum FeatureFlagEntityTypeEnum {
    ACCOUNT
    RANDOM
    SESSION
    USER
}

"Feature flag names."
enum FeatureFlagNameEnum {
    APPFLOWS_DEV_ENABLED
    AWSAutoProtectByTagsEnabled
    AWSCrossRegionReplicationEnabled
    AWSCustomCMKInExportEnabled
    AWSCustomKeyPairInExportEnabled
    AWSEc2CrashConsistentSnapshotEnabled
    AWSFileIndexingEnabled
    AWSFilterByTagsEnabled
    AWSOnDemandIndexingEnabled
    AWSReplaceVolumeOptionEnabled
    AWSSnapshotIntegrityEnabled
    AWS_NATIVE_INSTANT_ARCHIVAL_ENABLED
    AZURE_NATIVE_INSTANT_ARCHIVAL_ENABLED
    AZURE_SQL_V1_ENABLED
    AddonsUIEnabled
    AppFlowsEnabled
    AppFlowsGAEnabled
    ArchivalTieringEnabled
    AutoStorageSettingClusterListEnabled
    AutoStorageSettingEnabled
    AwsChinaCloudEnabled
    AwsComputeSettingsEnabled
    AwsCrossAccountReplicationEnabled
    AwsExocomputeConfigEnabled
    AwsExportInstanceInPoweredOffStateEnabled
    AwsNativeArchivalEnabled
    AwsNativeArchivalShortTermRetentionEnabled
    AwsRDSAutoProtectByTagsEnabled
    AwsRDSCrossRegionReplicationEnabled
    AwsRDSProtectionEnabled
    AwsRoleBasedArchivalLocationsEnabled
    AwsSnsSqsBasedAutomatedFlowEnabled
    AzureAppConsistentSnapshotsEnabled
    AzureAutoProtectByTagsEnabled
    AzureCommonResourceGroupEnabled
    AzureCrossRegionReplicationEnabled
    AzureCrossSubscriptionExportEnabled
    AzureFileIndexingEnabled
    AzureLockSnapshotsEnabled
    AzureNationalCloudEnabled
    AzureNativeArchivalEnabled
    AzureRecoverPoweredOffEnabled
    AzureSeparateResourceGroupEnabled
    AzureSnapshotIntegrityEnabled
    BackupFailureRemediationEnabled
    CANCEL_TASKCHAIN_ENABLED
    CLASSIFICATION_BANNER_ENABLED
    CLASSIFICATION_LOGIN_ENABLED
    CLOUD_CLUSTER_ES_ENABLED
    CLOUD_DIRECT_ENABLED
    CapacityReportNativeSnappableEnabled
    CardPinningEnabled
    CassandraBetaEnabled
    CdmUpgradesEnabled
    CdmUpgradesReportNgEnabled
    CertMgmtEnabled
    CloudAccountForAppFlowsEnabled
    CloudAccountListCombinedEnabled
    CloudAccountsAwsUpgradePermissionEnabled
    CloudAccountsAzureUpgradePermissionEnabled
    CloudAccountsSeamlessFlowEnabled
    CloudAccountsStackSetFlowEnabled
    CloudNativeAWSEnabled
    CloudNativeAzureEnabled
    CloudNativeGCPEnabled
    CloudNativePermissionsVisibilityEnabled
    CloudNativeUnmanagedObjectsEnabled
    ClusterAddForbidden
    ClusterListFilterEnabled
    ClusterStatusEnabled
    ClusterSyncJobsAlertsEnabled
    ComplianceReportNativeSnappableEnabled
    DB2_ENABLED
    DarkSiteEnabled
    DataClassificationDevEnabled
    DataClassificationEnabled
    DatagovNasAuditEnabled
    DatagovUAEnabled
    DetailedInventoryCardEnabled
    EnforceMoatOnAPIsEnabled
    EntitlementsAndSubscriptionsEnabled
    ExpandedGlobalSearchEnabled
    FederatedLoginEnabled
    FederatedLoginManagementEnabled
    FilesetFeatureEnablementEnabled
    FilesetInventoryEAEnabled
    FilesetInventoryEnabled
    FilesetInventoryGAEnabled
    FilesetRbacEnabled
    GcpNativeAutoProtectByTagsEnabled
    GcpNativeCrossProjectInstanceExport
    GcpNativeDiskProtection
    GcpNativeExportEncryptedInstances
    GcpNativeExportInstanceInStoppedState
    GcpNativeExportInstancesInSharedVPC
    GcpNativeRestoreEncryptedInstances
    GcpNativeSnapshotStorageReport
    GlobalDashboardEntryPointEnabled
    GlobalDashboardPageEnabled
    GlobalSLAForCDMSnappablesEnabled
    GlobalSLAGPSEnabled
    GoFeatureExtractionEnabled
    HyperVHierarchyEnabled
    HyperVInventoryViewEnabled
    IAM_MULTITENANCY_ENABLED
    JobMonitoringUIEnabled
    KubernetesInventoryEnabled
    LambdaEnabled
    LdapEnabled
    LegalHoldEnabled
    LocalSlaEnabled
    MONGO_BETA_ENABLED
    MULTIPLE_ACCOUNT_OWNERS_ENABLED
    ManagedVolumeHierarchyEnabled
    MetadataIncrementalSyncEnabled
    MetadataPullerPrioritySchedulingEnabled
    MetadataSyncAdvancedMetricsEnabled
    MetadataSyncDeletionEnabled
    MetadataSyncEnabled
    MfaLoginEnabled
    MssqlBetaEnabled
    MssqlFeatureEnablementEnabled
    MssqlGAEnabled
    MssqlHierarchyEnabled
    NameSplitRefreshKorgJobEnabled
    NasFilesetRbacEnabled
    NewThemesEnabled
    O365CalendarEnabled
    O365DashboardEnabled
    O365DashboardV2Enabled
    O365ExchangeAppShardingEnabled
    O365InventoryEnabled
    O365OnedriveEnabled
    O365OnedriveGAEnabled
    O365OnedriveGAOrgSlaAssigmnentEnabled
    O365SharePointEnabled
    O365SharedMailboxEnabled
    O365TeamsEnabled
    O365_ADGROUPS_ENABLED
    O365_EXPORT_ENABLED
    O365_OBJECT_RBAC_ENABLED
    O365_SHAREPOINT_LIST_ENABLED
    O365_TEAMS_POSTS_ENABLED
    ON_PREM_PREFERENCES_ENABLED
    ObjectLevelRBACEnabled
    ObjectTypeSLAEnhancementEnabled
    OnDemandCrawlEnabled
    OnDemandSnapshotExpirationEnabled
    OnPremNotificationEnabled
    OracleHierarchyEnabled
    PACTSAFE_EULA_ENABLED
    PreferDarkTheme
    "Determines whether the Radar BrowseDiffCache is enabled."
    RADAR_BROWSE_DIFF_CACHE_ENABLED
    "Enables the Radar bulk recovery flow."
    RADAR_BULK_RECOVERY_ENABLED
    "Enables the Radar per snappable investigation flow."
    RADAR_INVESTIGATION_ENABLED
    RADAR_WEEKLY_LIMIT_ENABLED
    RBACForCDMSnappablesEnabled
    RBACForGlobalSLAEnabled
    RCS_ENABLED
    REPLICATION_TARGETS_ENABLED
    RadarAnomalyModelBEnabled
    RadarAppFlowsEnabled
    RadarBetaEnabled
    RadarDashboardEnabled
    RadarDemoEnabled
    RadarDevEnabled
    RadarDownloadCsvEnabled
    RadarEncryptionBetaEnabled
    RadarEncryptionModelBEnabled
    RadarSIEMEnabled
    RecoverySearchEnabled
    RemoveClusterEnabled
    ReportAsyncDownloadEnabled
    ReportForecasterEnabled
    ReportForwardUIEnabled
    ReportLastSyncedDateEnabled
    ReportPDFEnabled
    RkTableEnabled
    RollbackOnSuccessEnabled
    RollingUpgradeEnabled
    RubrikSEDemoEnabled
    SAP_HANA_REPLICATION_ENABLED
    SENTRY_PERFORMANCE_ENABLED
    SETTINGS_MENU_REDESIGN_ENABLED
    SLAAuditReportsEnabled
    SLAHierarchyEnabled
    SLASyncHighFreqEnabled
    SONAR_DASH_V2_ENABLED
    SSOEnhancementEnabled
    STORAGE_LOCATIONS_ENABLED
    SapHanaInventoryEnabled
    SapHanaOnGcpEnabled
    ScheduledReportEnabled
    SecureUploadEnabled
    ServiceAccountEnabled
    SkipFailedEventQueryEnabled
    SlaComplianceFilterEnabled
    SlaPauseEnabled
    SnapMirrorInventoryEnabled
    SnapshotWindowEnabled
    SonarDashEnabled
    SonarObjectFilesEnabled
    SonarReplicatedObjectsEnabled
    SonarUKAnalyzersEnabled
    SonarVMObjectsEnabled
    SonarVirtualAppliancesEnabled
    SsoEnabled
    StaticRetentionEnabled
    SystemAnnouncementsEnabled
    THEME_SWITCHER_ENABLED
    ThemedClusterCardEnabled
    UAFileCountsEnabled
    UAPermissionsTabEnabled
    UnmanagedObjectEnabled
    UserAwarenessV1Enabled
    UserAwarenessV2Enabled
    VSphereSearchAndRecoveryRolloutEnabled
    VcdHierarchyEnabled
    WINDOWS_VOLUME_GROUP_INVENTORY_ENABLED
    WINDOWS_VOLUME_GROUP_LIVE_MOUNT_ENABLED
    WIPEnabled
    WorkflowBasedRolesEnabled
}

enum FeatureNameEnum {
    FilesetManagement
    NotSpecified
    VmwareManagement
}

enum FieldEnum {
    ALL
    IS_COMPLETE
    IS_CORRUPTED
    IS_DELETED_FROM_SOURCE
    IS_EXPIRED
    IS_HINT_SET
    IS_INDEXED
    IS_INDEX_MERGED
    IS_ON_DEMAND
    IS_SKIPPED_FOR_REPLICATION
    TIME_RANGE_WITH_OFFSET
}

enum FileActivitiesSortBy {
    NUM_ACTIVITIES
    USER_NAME
}

enum FileCountTypeEnum {
    ANY
    HITS
    OPEN_ACCESS
    OPEN_ACCESS_HITS
    STALE
    STALE_HITS
}

enum FileModeEnum {
    DIRECTORY
    FILE
    SYMLINK
}

enum FileRecoveryFeasibility {
    EXOCOMPUTE_NOT_CONFIGURED
    FEASIBLE
    SNAPSHOT_EXPIRED
    UNKNOWN
}

enum FileResultSortByEnum {
    CLUSTER
    DAILY_CHANGE
    FILES_WITH_HITS
    FILES_WITH_OPEN_ACCESS_HITS
    HITS
    LAST_ACCESS_TIME
    NAME
    NATIVE_PATH
    NUM_ACTIVITIES
    NUM_ACTIVITIES_DELTA
    OBJECT_LOCATION
    OBJECT_NAME
    OPEN_ACCESS_TYPE
    SNAPSHOT_TIME
    STALE_FILES_WITH_HITS
}

enum FileSystemTypeEnum {
    FILE_SYSTEM_TYPE_NTFS
    FILE_SYSTEM_TYPE_RE_FS
}

enum FileTypeEnum {
    CSV
    PDF
}

enum FileVersionSourceEnum {
    CLOUD
}

enum FilesetOSType {
    LINUX
    NO_OS_TYPE
    UNIX_LIKE
    WINDOWS
}

enum FilesetTemplateCreateOperatingSystemTypeEnum {
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplateCreateShareTypeEnum {
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_NFS
    FILESET_TEMPLATE_CREATE_SHARE_TYPE_SMB
}

enum FilesetTemplatePatchOperatingSystemTypeEnum {
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_UNIX_LIKE
    FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_WINDOWS
}

enum FilesetTemplatePatchShareTypeEnum {
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_NFS
    FILESET_TEMPLATE_PATCH_SHARE_TYPE_SMB
}

enum FilterTypeEnum {
    CLUSTER_FILTER
    DATE_RANGE
    MULTI_SELECT
    SEARCH
    SINGLE_SELECT
}

enum GcpNativeDiskSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    EFFECTIVE_SLA_DOMAIN
    GCP_DISK_LOCATION
    GCP_DISK_NATIVE_ID
    GCP_DISK_NATIVE_NAME
    GCP_DISK_PROJECT_NAME
    GCP_DISK_SIZE
}

enum GcpNativeGCEInstanceSortFieldsEnum {
    ASSIGNED_SLA_DOMAIN
    EFFECTIVE_SLA_DOMAIN
    GCP_INSTANCE_NATIVE_ID
    GCP_INSTANCE_NATIVE_NAME
    GCP_INSTANCE_NETWORK_NAME
    GCP_INSTANCE_PROJECT_NAME
    GCP_INSTANCE_REGION
    GCP_INSTANCE_TYPE
}

enum GcpNativeLabelFilterTypeEnum {
    LABEL_KEY
    LABEL_KEY_VALUE
}

enum GcpNativeProjectSortFieldsEnum {
    EFFECTIVE_SLA_DOMAIN
    GCP_PROJECT_DISK_COUNT
    GCP_PROJECT_INSTANCE_COUNT
    GCP_PROJECT_NATIVE_ID
    GCP_PROJECT_NUMBER
    GCP_PROJECT_ORG_NAME
    NAME
}

enum GcpNativeProjectStatusEnum {
    Deleted
    Deleting
    DeletionFailed
    Refreshed
    Refreshing
}

enum GcpRegionEnum {
    ASIA
    ASIA1
    ASIA_EAST1
    ASIA_EAST2
    ASIA_NORTHEAST1
    ASIA_NORTHEAST2
    ASIA_NORTHEAST3
    ASIA_SOUTH1
    ASIA_SOUTHEAST1
    ASIA_SOUTHEAST2
    AUSTRALIA_SOUTHEAST1
    EU
    EUR4
    EUROPE_NORTH1
    EUROPE_WEST1
    EUROPE_WEST2
    EUROPE_WEST3
    EUROPE_WEST4
    EUROPE_WEST6
    NAM4
    NORTHAMERICA_NORTHEAST1
    SOUTHAMERICA_EAST1
    UNKNOWN_GCP_REGION
    US
    USCENTRAL1
    USEAST1
    USEAST4
    USWEST1
    USWEST2
    US_WEST3
    US_WEST4
}

enum GcpStorageClassTypeEnum {
    COLDLINE_GCP
    DURABLE_REDUCED_AVAILABILITY_GCP
    NEARLINE_GCP
    STANDARD_GCP
    UNKNOWN_STORAGE_CLASS_GCP
}

"Available options for retention for existing snapshots"
enum GlobalExistingSnapshotRetentionEnum {
    "Expire immediately"
    EXPIRE_IMMEDIATELY
    "Keep forever"
    KEEP_FOREVER
    NOT_APPLICABLE
    "Preserve retention from previous SLA"
    RETAIN_SNAPSHOTS
}

enum GlobalSlaQueryFilterInputField {
    CLUSTER_UUID
    IS_ELIGIBLE_FOR_MIGRATION
    MIGRATION_STATUS
    NAME
    OBJECT_TYPE
    SHOW_CLUSTER_SLAS_ONLY
}

enum GroupByFieldEnum {
    Analyzer
    Cluster
    ClusterType
    ClusterUuid
    ComplianceStatus
    Day
    FailoverStatus
    FailoverType
    File
    Hour
    IsAnomaly
    LastActivityStatus
    LastActivityType
    LastTestStatus
    ManagedId
    Month
    Object
    ObjectName
    ObjectType
    POLICY_VIOLATIONS
    Policy
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SLADomain
    STATUS_POLICY
    SlaDomain
    Source
    Status
    TIME_ISSUES
    TIME_VIOLATIONS
    TargetSite
    TaskDetailClusterType
    TaskDetailObjectType
    Time
    Type
    UserAuditStatus
    UserAuditType
    Week
    Year
}

enum GuestCredentialAuthorizationStatusEnum {
    FAILED
    PENDING
    SUCCESSFUL
}

enum GuestOSEnum {
    CENTOS
    RHEL
    UBUNTU
    UNKNOWN
    WINDOWS
}

"The guest operating system"
enum GuestOsTypeEnum {
    "Linux Operating System"
    Linux
    "Unknown Guest OS type"
    Unknown
    "Windows Operating System"
    Windows
}

enum HashTypeEnum {
    HASH_TYPE_M_D5
    HASH_TYPE_SH_A1
    HASH_TYPE_SH_A256
}

enum HierarchyFilterField {
    "Filter aws native account based on the features enabled  for them."
    AWS_NATIVE_ACCOUNT_ENABLED_FEATURE
    "Filter on Aws account id"
    AWS_NATIVE_ACCOUNT_ID
    """

    ID of the AWS native ec2 instance (Rubrik ID), applicable for filtering
    EBS volumes with their EC2 instance IDs. Applicable only if the object
    type is AwsNativeEbsVolume
    """
    AWS_NATIVE_EC2_INSTANCE_ID
    "Filter on RDS Instace Db Engine"
    AWS_NATIVE_RDS_DB_ENGINE
    "Filter on RDS Instance Db Instance Class"
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    """

    Filter on AWSAccount.aws_region_spec.region, EC2Instance.region, and
    EBSVolume.region
    """
    AWS_REGION
    "Filter by aws_native_tags"
    AWS_TAG
    "Filter on vpc id"
    AWS_VPC_ID
    "Filter Azure Disks on Attached VM ID"
    AZURE_DISK_ATTACHED_VM
    "Filter Azure disks on common resource group name"
    AZURE_DISK_CRG_NAME
    "Filter Azure disks on subscription ID of common resource group"
    AZURE_DISK_CRG_SUBSCRIPTION_ID
    "Filter Azure Disks on resource group name"
    AZURE_DISK_RG_NAME
    "Filter Azure resource groups on subscription id"
    AZURE_DISK_RG_SUBSCRIPTION_ID
    "Filter Azure Disks on Disk size"
    AZURE_DISK_SIZE
    "Filter Azure Disks on subscription id"
    AZURE_DISK_SUBSCRIPTION_ID
    "Filter Azure Disks on Disk type"
    AZURE_DISK_TYPE
    "Filters Azure disks whose regions have a \"CONNECTED\" exocompute."
    AZURE_NATIVE_DISK_EXOCOMPUTE_CONNECTED
    "Filter on the \"indexing status\" of Azure disks."
    AZURE_NATIVE_DISK_INDEXING_STATUS
    "Filters Azure VMs whose regions have a \"CONNECTED\" exocompute."
    AZURE_NATIVE_VM_EXOCOMPUTE_CONNECTED
    "Filter on the \"indexing status\" of Azure VMs."
    AZURE_NATIVE_VM_INDEXING_STATUS
    """

    Filter on AzureSubscription.region_spec.region, AzureResourceGroup.region,
    AzureVm.Region and AzureDisk.region
    """
    AZURE_REGION
    "Filter Azure resource groups by disk SLA or VM SLA"
    AZURE_RG_DISK_OR_VM_SLA
    """

    Filter Azure Resource Groups by SLAs of given snappable types.
    SLAs need to be passed as "texts" and snappable types need to be
    passed as "object_type_filter_params".
    Note: When using this filter for more than two types of snappables,
    do test the performance for large data size because internally it
    does some heavy joins.
    """
    AZURE_RG_SNAPPABLE_TYPES_SLA
    "Filter Azure resource groups on subscription id"
    AZURE_RG_SUBSCRIPTION_ID
    "Filter Azure SQL Databases on resource group name"
    AZURE_SQL_DB_RG_NAME
    "Filter Azure SQL Database Servers on resource group name"
    AZURE_SQL_DB_SERVER_RG_NAME
    "Filter Azure SQL Database Servers on subscription ID"
    AZURE_SQL_DB_SERVER_SUBSCRIPTION_ID
    "Filter Azure SQL Databases on subscription ID"
    AZURE_SQL_DB_SUBSCRIPTION_ID
    "Filter Azure SQL Managed Instance Databases on resource group name"
    AZURE_SQL_MI_DB_RG_NAME
    "Filter Azure SQL Managed Instances Databases on subscription ID"
    AZURE_SQL_MI_DB_SUBSCRIPTION_ID
    "Filter Azure SQL Managed Instance Database Servers on resource group name"
    AZURE_SQL_MI_SERVER_RG_NAME
    "Filter Azure SQL Managed Instances Database Servers on subscription ID"
    AZURE_SQL_MI_SERVER_SUBSCRIPTION_ID
    "Filter by azure_native_tags. Need to populate"
    AZURE_TAG
    "Filter Azure VMs on common resource group name"
    AZURE_VM_CRG_NAME
    "Filter Azure VMs on subscription ID of common resource group"
    AZURE_VM_CRG_SUBSCRIPTION_ID
    "Filter Azure VMs on resource group name"
    AZURE_VM_RG_NAME
    "Filter Azure resource groups on subscription id"
    AZURE_VM_RG_SUBSCRIPTION_ID
    "Filter Azure VMs on VM size"
    AZURE_VM_SIZE
    "Filter Azure VMs on subscription id"
    AZURE_VM_SUBSCRIPTION_ID
    "Filter Azure VMs on Vnet name"
    AZURE_VNET_NAME
    "Filter by ID of parent Cassandra Keyspace"
    CASSANDRA_KEYSPACE_ID
    "Filter by ID of parent Cassandra Source"
    CASSANDRA_SOURCE_ID
    "Filter by cluster id (for CDM objects)."
    CLUSTER_ID
    "Filter clusters by the ClusterTypeEnum"
    CLUSTER_TYPE
    "Filter by relic filesets of a physical host"
    DOES_PHYSICAL_HOST_HAVE_RELIC_FILESETS
    "Filter by relic volume group of a physical host"
    DOES_PHYSICAL_HOST_HAVE_RELIC_VOLUME_GROUP
    "Filter whether the sharepoint is relic or contains relic object"
    DOES_SHAREPOINT_HAVE_RELIC_OBJECTS
    "Filter on EBSVolume native id"
    EBS_VOLUME_ID
    "Filter EBS Volumes by status of indexing."
    EBS_VOLUME_INDEXING_STATUS
    "Filter on EBSVOlume.name"
    EBS_VOLUME_NAME
    "Filter on ebs volume name or volume id"
    EBS_VOLUME_NAME_OR_VOLUME_ID
    "Filter on EbsVolume.type"
    EBS_VOLUME_TYPE
    "Filter on EC2Instance native id"
    EC2_INSTANCE_ID
    """

    Filter EC2 Instances by status of indexing. Possible values for
    filter are generated strings from AwsIndexingStatusFilter enum.
    """
    EC2_INSTANCE_INDEXING_STATUS
    "Filter on EC2Instance.name"
    EC2_INSTANCE_NAME
    "Filter on ec2 instance name or instance id"
    EC2_INSTANCE_NAME_OR_INSTANCE_ID
    "Filter on Ec2Instance.type"
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA
    """

    Filter to include or exclude objects with a specific effective sla
    source object.
    """
    EFFECTIVE_SLA_SOURCE_OBJECT
    "Filter on the sla type of the effective sla"
    EFFECTIVE_SLA_TYPE
    "Filter on the ID of Failover cluster app"
    FAILOVER_CLUSTER_APP_ID
    "Filter on ID of parent of Failover Cluster"
    FAILOVER_CLUSTER_ID
    "Filter physical hosts by SLAs attached to their filesets."
    FILESET_SLA
    """

    Filter physical hosts by which fileset templates are attached
    to them.
    """
    FILESET_TEMPLATE_ID
    "Filter Fileset Templates by OS Type"
    FILESET_TEMPLATE_OS_TYPE
    "Filter by gcp_native_labels"
    GCP_LABEL
    "Filter on GCP Disk location (for regional disk: location=region, for zonal disk: location=zone)"
    GCP_NATIVE_DISK_LOCATION
    "Filter on GCP Disk name or native ID"
    GCP_NATIVE_DISK_NAME_OR_NATIVE_ID
    "Filter on GCP Disk project name"
    GCP_NATIVE_DISK_PROJECT
    """

    Filter by GCP Disk type
    GCP_DISK_TYPE's texts can have one of the following values:
    regional-pd-ssd regional-pd-standard regional-pd-balanced
    zonal-pd-ssd zonal-pd-standard zonal-pd-balanced
    """
    GCP_NATIVE_DISK_TYPE
    "Filter on GCP instance native id or name"
    GCP_NATIVE_INSTANCE_NAME_OR_NATIVE_ID
    "Filter on GCP Instance Network Name"
    GCP_NATIVE_INSTANCE_NETWORK_NAME
    "Filter on GCP instance type"
    GCP_NATIVE_INSTANCE_TYPE
    "Filter on GCP project ID for GCE instances"
    GCP_NATIVE_PROJECT_ID
    "Filter on GCP project name or project number"
    GCP_NATIVE_PROJECT_NAME_OR_PROJECT_NUMBER
    "Filter GCP projects by their native ID"
    GCP_NATIVE_PROJECT_NATIVE_ID
    "Filter on GCP region"
    GCP_NATIVE_REGION
    "Filter VSphere VMs by guest OS type for file export"
    GUEST_OS_TYPE_FOR_FILE_RESTORE
    "Filter if a snappable has parent snappable."
    HAS_PARENT_SNAPPABLE
    "Filter the Host by  their Operating System"
    HOST_OPERATING_SYSTEM
    """

    Return only the snappables that are active.
    An active snappable is a snappable that is without a snappable group or
    snappable with the highest primary sequence number in the snappable group
    """
    IS_ACTIVE
    IS_ARCHIVED
    "Filter archived and non-relic managed-objects."
    IS_GHOST
    "Snappable must not be a member of any active bluprint"
    IS_NOT_BLUEPRINT_CHILD
    "Filter on whether object is protected by some SLA"
    IS_PROTECTED
    IS_RELIC
    IS_REPLICATED
    """

    Filter K8s clusters based on associated CDM cluster
    Since KuprCluster is natively polaris MO, a separate filter is used
    """
    KUPR_CDM_CLUSTER_ID
    "Filter K8s clusters based on connection status"
    KUPR_CLUSTER_STATUS
    """

    Filter K8s namespaces based on parent's associated CDM cluster
    Since KuprNamespace is natively polaris MO, a separate filter is used
    """
    KUPR_NAMESPACE_CDM_CLUSTER_ID
    "Filter K8s namespace based on parent's connection status"
    KUPR_NAMESPACE_CLUSTER_STATUS
    "Filter by location/path of an object"
    LOCATION
    NAME
    """

    There is already a filter called NAME which filters for all the rows
    where name is "LIKE" the provided string. We have a use-case in
    Azure where we would like to filter on name but exact-match, not just
    similar match. The use case is that resource groups are identified by
    the tuple of subscription ID and resource group name, similarity
    measure will not distinguish between two similar names.
    """
    NAME_EXACT_MATCH
    "Filter by name or email-address of o365 user."
    NAME_OR_EMAIL_ADDRESS
    """

    O365 specific type: O365_SHARED_USER, O365_SHARED_MAILBOX...This filter is
    introduced to support api-server since it is not convenient to add object-specific
    subtype knowledge there. To query for shared users, we can either:
    1. Specify O365_USER in object type AND this filter with value O365_SHARED_USER
    (api-server way)
    2. Specify O365_SHARED_USER in object type, ignore this filter
    (others should do this)
    """
    O365_SPECIFIC_TYPE
    "Filter on software version of the cluster"
    ON_OR_ABOVE_CLUSTER_VERSION
    "Filter physical hosts by os name"
    OS_NAME
    "Filter physical hosts by os type"
    OS_TYPE
    "Filter on the sla of physical host's volume group"
    PHYSICAL_HOST_BY_VOLUME_GROUP_EFFECTIVE_SLA
    "Filter on the RBS status of the cdm_host"
    PHYSICAL_HOST_CONNECTION_STATUS
    "Filter on the sla of a host's filesets"
    PHYSICAL_HOST_EFFECTIVE_SLA
    """

    tag_filter_params field.
    Filter on the ID of a Physical Host
    """
    PHYSICAL_HOST_ID
    "Filter on the name by a given regex expression"
    REGEX
    "Filter on the ID of parent sap hana system"
    SAP_HANA_SYSTEM_ID
    "Filter by sid of SapHanaSystem"
    SAP_HANA_SYSTEM_SID
    "Filter by status of SapHanaSystem"
    SAP_HANA_SYSTEM_STATUS
    "Filter based on type of database in udf schema."
    UDF_DATABASE_TYPE
    """

    Filter for the root level of compute resources for the restore
    hierarchy i.e. compute clusters + standalone hosts
    """
    VSPHERE_GET_ROOT_RESTORE_HIERARCHY
}

enum HierarchyObjectTypeEnum {
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_MANAGED_INSTANCE_DB
    AllSubHierarchyType
    AppBlueprint
    AppflowsBlueprint
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeResourceGroup
    AzureNativeSubscription
    AzureNativeVm
    AzureSqlDatabaseServer
    AzureSqlManagedInstanceServer
    Blueprint
    CassandraColumnFamily
    CassandraKeyspace
    CassandraSource
    CloudNativeTagRule
    Ec2Instance
    FailoverClusterApp
    FeldsparSite
    Fileset
    FilesetTemplate
    GcpNativeDisk
    GcpNativeGCEInstance
    GcpNativeProject
    Hdfs
    HostFailoverCluster
    HostShare
    HypervCluster
    HypervSCVMM
    HypervServer
    HypervVirtualMachine
    KuprCluster
    KuprNamespace
    LinuxFileset
    ManagedVolume
    MongoCollection
    MongoDb
    MongoSource
    Mssql
    MssqlAvailabilityGroup
    MssqlDatabaseBatchMaintenance
    MssqlInstance
    NasNamespace
    NasShare
    NasSystem
    NasVolume
    NutanixCluster
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Group
    O365Mailbox
    O365Onedrive
    O365Org
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
    O365User
    OracleDatabase
    OracleHost
    OracleRac
    PhysicalHost
    PolarisEbsVolume
    PolarisEc2Instance
    SapHanaDatabase
    SapHanaSystem
    ShareFileset
    SnapMirrorCloud
    StorageArrayVolumeGroup
    VSphereComputeCluster
    VSphereDatacenter
    VSphereDatastore
    VSphereFolder
    VSphereHost
    VSphereNetwork
    VSphereResourcePool
    VSphereTag
    VSphereTagCategory
    VSphereVCenter
    Vcd
    VcdCatalog
    VcdOrg
    VcdOrgVdc
    VcdVapp
    VcdVimServer
    VmwareVirtualMachine
    VolumeGroup
    WindowsCluster
    WindowsFileset
    WindowsVolumeGroup
}

enum HierarchySortByField {
    ASSIGNED_SLA_DOMAIN
    AWS_NATIVE_ACCOUNT_NAME
    AWS_NATIVE_RDS_DB_ENGINE
    AWS_NATIVE_RDS_DB_INSTANCE_CLASS
    AWS_REGION
    AWS_VPC_ID
    AZURE_DISK_ATTACHED_VM
    AZURE_DISK_CRG_NAME
    AZURE_DISK_CRG_SUBSCRIPTION_NAME
    AZURE_DISK_RG_DISKCOUNT
    AZURE_DISK_RG_NAME
    AZURE_DISK_RG_SUBSCRIPTION_NAME
    AZURE_DISK_SIZE
    AZURE_DISK_SUBSCRIPTION_NAME
    AZURE_DISK_TYPE
    AZURE_REGION
    AZURE_RG_DISKCOUNT
    AZURE_RG_DISK_EFFECTIVE_SLA
    AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA
    AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA
    AZURE_RG_SUBSCRIPTION_NAME
    AZURE_RG_VMCOUNT
    AZURE_RG_VM_EFFECTIVE_SLA
    AZURE_SUBNET_NAME
    AZURE_SUBSCRIPTION_DISKCOUNT
    AZURE_SUBSCRIPTION_VMCOUNT
    AZURE_TENANT_ID
    AZURE_VM_CRG_NAME
    AZURE_VM_CRG_SUBSCRIPTION_NAME
    AZURE_VM_RG_NAME
    AZURE_VM_RG_SUBSCRIPTION_NAME
    AZURE_VM_RG_VMCOUNT
    AZURE_VM_SIZE
    AZURE_VM_SUBSCRIPTION_NAME
    AZURE_VNET_NAME
    EBS_VOLUME_COUNT
    EBS_VOLUME_ID
    EBS_VOLUME_NAME
    EBS_VOLUME_SIZE
    EBS_VOLUME_TYPE
    EC2_INSTANCE_COUNT
    EC2_INSTANCE_ID
    EC2_INSTANCE_NAME
    EC2_INSTANCE_TYPE
    EFFECTIVE_SLA_DOMAIN
    EMAIL_ADDRESS
    FILESET_TEMPLATE_DOES_NOT_EXCLUDE
    FILESET_TEMPLATE_EXCLUDES
    FILESET_TEMPLATE_INCLUDES
    GCP_DISK_LOCATION
    GCP_DISK_NATIVE_ID
    GCP_DISK_NATIVE_NAME
    GCP_DISK_PROJECT_NAME
    GCP_DISK_SIZE
    GCP_INSTANCE_NATIVE_ID
    GCP_INSTANCE_NATIVE_NAME
    GCP_INSTANCE_NETWORK_NAME
    GCP_INSTANCE_PROJECT_NAME
    GCP_INSTANCE_REGION
    GCP_INSTANCE_TYPE
    GCP_PROJECT_DISK_COUNT
    GCP_PROJECT_INSTANCE_COUNT
    GCP_PROJECT_NATIVE_ID
    GCP_PROJECT_NUMBER
    GCP_PROJECT_ORG_NAME
    ID
    NAME
    PHYSICAL_HOST_CONNECTION_STATUS
    PHYSICAL_HOST_OS_NAME
    SAP_HANA_SYSTEM_SID
    SAP_HANA_SYSTEM_STATUS
    VSPHERE_DATASTORE_CAPACITY
    VSPHERE_DATASTORE_FREE_SPACE
    VSPHERE_DATASTORE_TYPE
}

enum HierarchySortOrder {
    ASC
    DESC
}

enum HostConnectivityStatusEnum {
    BADLY_CONFIGURED
    CONNECTED
    CONNECTING
    CONNECTOR_NOT_DEPLOYED
    DELETED
    DELETING
    DELETION_FAILED
    DISCONNECTED
    PARTIALLY_CONNECTED
    REFRESHING
    REFRESH_FAILED
    REMOTE
    REPLICATED_TARGET
    SECONDARY_CLUSTER
    UNKNOWN_CONNECTIVITY_STATUS
}

enum HostFailoverClusterRoot {
    LINUX_HOST_ROOT
    WINDOWS_HOST_ROOT
}

enum HostRoot {
    LINUX_HOST_ROOT
    NAS_HOST_ROOT
    WINDOWS_HOST_ROOT
}

enum HostVfdInstallConfigEnum {
    HOST_VFD_INSTALL_CONFIG_DISABLED
    HOST_VFD_INSTALL_CONFIG_ENABLED
}

enum HostVfdStateEnum {
    HOST_VFD_STATE_INSTALLED
    HOST_VFD_STATE_INSTALLED_BUT_RESTART_REQUIRED
    HOST_VFD_STATE_NOT_INSTALLED
    HOST_VFD_STATE_UNINSTALLED_BUT_RESTART_REQUIRED
}

enum IndicatorOfCompromiseTypeEnum {
    INDICATOR_OF_COMPROMISE_TYPE_HASH
    INDICATOR_OF_COMPROMISE_TYPE_PATH_OR_FILENAME
    INDICATOR_OF_COMPROMISE_TYPE_YARA_RULE
}

enum InfrastructureTableColumnEnum {
    ClusterName
    ClusterType
    EncryptionEnabled
    EstimatedRunway
    Location
    TotalCapacity
    UsedCapacity
}

enum InodeTypeEnum {
    DIRECTORY
    FILE
    UNKNOWN_INODE
}

enum InstanceTypeEnum {
    AZURE_CHINA
    AZURE_DEFAULT
    AZURE_GERMANY
    AZURE_GOVERNMENT
    UNKNOWN_INSTANCE
}

enum InterfaceTypeEnum {
    BOND0
    BOND1
    CUSTOM
    UNKNOWN_TYPE
}

enum InternalQueryNetworkThrottleRequestResourceIdEnum {
    INTERNAL_QUERY_NETWORK_THROTTLE_REQUEST_RESOURCE_ID_ARCHIVAL_EGRESS
    INTERNAL_QUERY_NETWORK_THROTTLE_REQUEST_RESOURCE_ID_REPLICATION_EGRESS
}

enum InventorySubHierarchyRootEnum {
    APPFLOWS_ROOT
    AWSNATIVE_ROOT
    AZURENATIVE_ROOT
    CASSANDRA_ROOT
    CLOUD_NATIVE_TAG_RULE_ROOT
    FELDSPAR_ROOT
    GCPNATIVE_ROOT
    HYPERV_ROOT
    KUPR_ROOT
    LINUX_HOST_ROOT
    MANAGED_VOLUME_ROOT
    MONGODB_ROOT
    MONGO_ROOT
    MSSQL_ROOT
    NAS_HOST_ROOT
    NAS_ROOT
    NUTANIX_ROOT
    O365_ROOT
    ORACLE_ROOT
    PHYSICAL_HOST_ROOT
    SAP_HANA_ROOT
    VCD_ROOT
    VSPHERE_ROOT
    WINDOWS_HOST_ROOT
}

enum IssueEventTypeEnum {
    ADD_WHITELIST_EVENT
    CREATE_EVENT
    DELETE_POLICY_EVENT
    NO_ISSUES_SNAPSHOT_EVENT
    REMOVE_POLICY_OBJ_EVENT
    REMOVE_WHITELIST_EVENT
    SNAPSHOT_EVENT
}

enum IssueStatusEnum {
    OPEN
    RESOLVED
}

enum K8sClusterDBType {
    AWS
    Azure
    GCP
    OnPrem
}

enum K8sClusterProtoType {
    AWS
    AZURE
    GCP
    ON_PREM
    UNKNOWN
}

enum K8sClusterStatus {
    STATUS_CONNECTED
    STATUS_DISCONNECTED
    STATUS_INIT
    STATUS_UNKNOWN
}

enum LastTestStatusEnum {
    Failed
    NotExist
    Succeeded
}

"Field Enum for Authorized LDAP Principal list."
enum LdapAuthorizedPrincipalFieldEnum {
    "Authentication domain of principal."
    DirectoryName
    "Email of principal."
    Email
    "Last login time of principal."
    LAST_LOGIN
    "Name of principal."
    Name
}

enum LdapIntegrationFieldEnum {
    Name
}

enum LdapPrincipalFieldEnum {
    Name
}

enum ListAccessUsersSortEnum {
    EMAIL
    NUM_ACTIVITIES
    NUM_ACTIVITY_DELTA
    USERNAME
}

enum LocationType {
    AWS
    AZURE
    CDM
    GCP
    UNKNOWN_TYPE
}

"type of data location"
enum LocationTypeEnum {
    Azure
    CLOUD_NATIVE_AWS
    CLOUD_NATIVE_GCP
    Cleversafe
    Glacier
    Google
    HDS
    LOCAL
    Nfs
    Qstar
    REPLICATION_OFF
    REPLICATION_POLARIS_SOURCE
    REPLICATION_SOURCE
    REPLICATION_SOURCE_AND_TARGET
    REPLICATION_TARGET
    Rehydrated
    S3
    S3Compatible
    Scality
}

enum LogLevelEnum {
    DEBUG
    INFO
}

enum MalwareScanInSnapshotStatusEnum {
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_ERROR
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_FINISHED
    MALWARE_SCAN_IN_SNAPSHOT_STATUS_PENDING
}

enum ManagedObjectType {
    APP_BLUEPRINT
    AWS_NATIVE_ACCOUNT
    AWS_NATIVE_EBS_VOLUME
    AWS_NATIVE_EC2_INSTANCE
    AWS_NATIVE_RDS_INSTANCE
    AZURE_MANAGED_DISK
    AZURE_RESOURCE_GROUP
    AZURE_RESOURCE_GROUP_FOR_DISK_HIERARCHY
    AZURE_RESOURCE_GROUP_FOR_VM_HIERARCHY
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_DATABASE_SERVER
    AZURE_SQL_MANAGED_INSTANCE_DB
    AZURE_SQL_MANAGED_INSTANCE_SERVER
    AZURE_SUBSCRIPTION
    AZURE_UNMANAGED_DISK
    AZURE_VIRTUAL_MACHINE
    BLUEPRINT
    CASSANDRA_COLUMN_FAMILY
    CASSANDRA_KEYSPACE
    CASSANDRA_SOURCE
    CLOUD_NATIVE_TAG_RULE
    FAILOVER_CLUSTER_APP
    FELDSPAR_SITE
    FILESET_TEMPLATE
    GCP_NATIVE_DISK
    GCP_NATIVE_GCE_INSTANCE
    GCP_NATIVE_PROJECT
    HOST_FAILOVER_CLUSTER
    HOST_SHARE
    HYPERV_CLUSTER
    HYPERV_SCVMM
    HYPERV_SERVER
    HYPERV_VIRTUAL_MACHINE
    KUPR_CLUSTER
    KUPR_NAMESPACE
    LINUX_FILESET
    MANAGED_VOLUME
    MONGODB_COLLECTION
    MONGODB_DATABASE
    MONGODB_SOURCE
    MONGO_COLLECTION
    MONGO_DB
    MONGO_SOURCE
    MSSQL_AVAILABILITY_GROUP
    MSSQL_DAG
    MSSQL_DATABASE
    MSSQL_INSTANCE
    NAS_NAMESPACE
    NAS_SHARE
    NAS_SYSTEM
    NAS_VOLUME
    NUTANIX_CLUSTER
    NUTANIX_VIRTUAL_MACHINE
    O365_CALENDAR
    O365_GROUP
    O365_INDIVIDUAL_MAILBOX
    O365_INDIVIDUAL_USER
    O365_MAILBOX
    O365_ONEDRIVE
    O365_ORGANIZATION
    O365_SHARED_MAILBOX
    O365_SHARED_USER
    O365_SHAREPOINT_DRIVE
    O365_SHAREPOINT_LIST
    O365_SITE
    O365_TEAMS
    O365_USER
    ORACLE_DATABASE
    ORACLE_HOST
    ORACLE_RAC
    PHYSICAL_HOST
    SAP_HANA_DATABASE
    SAP_HANA_SYSTEM
    SHARE_FILESET
    SNAPMIRROR_CLOUD
    UDF_DATABASE
    UDF_INSTANCE
    VCD
    VCD_CATALOG
    VCD_ORG
    VCD_ORG_VDC
    VCD_VAPP
    VCD_VIM_SERVER
    VOLUME_GROUP
    VSPHERE_COMPUTE_CLUSTER
    VSPHERE_DATACENTER
    VSPHERE_DATASTORE
    VSPHERE_FOLDER
    VSPHERE_HOST
    VSPHERE_NETWORK
    VSPHERE_RESOURCE_POOL
    VSPHERE_TAG
    VSPHERE_TAG_CATEGORY
    VSPHERE_VCENTER
    VSPHERE_VIRTUAL_MACHINE
    WINDOWS_CLUSTER
    WINDOWS_FILESET
}

enum MissedSnapshotDayOfTimeUnitEnum {
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIFTEENTH
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIRST_DAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FRIDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_LAST_DAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_MONDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SATURDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SUNDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_THURSDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_TUESDAY
    MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_WEDNESDAY
}

enum MissedSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum MissedSnapshotSortByEnum {
    Date
}

enum MonthEnum {
    APRIL
    AUGUST
    DECEMBER
    FEBRUARY
    JANUARY
    JULY
    JUNE
    MARCH
    MAY
    NOVEMBER
    OCTOBER
    SEPTEMBER
}

enum MosaicAddStoreRequestStoreTypeEnum {
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_AZURE_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_GS_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_NFS_STORE
    MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_S3_STORE
}

"Enums for grouping mosaic snapshots."
enum MosaicSnapshotGroupBy {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

"Enums for sorting mosaic snapshots."
enum MosaicSnapshotSortBy {
    Date
    SnappableId
    SnapshotId
}

enum MosaicStoreObjectStoreTypeEnum {
    MOSAIC_STORE_OBJECT_STORE_TYPE_AZURE_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_GS_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_NFS_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_S3_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_SWIFT_STORE
    MOSAIC_STORE_OBJECT_STORE_TYPE_VFS_STORE
}

enum MosaicVersionObjectVersionStateEnum {
    MOSAIC_VERSION_OBJECT_VERSION_STATE_DATA_COPIED
    MOSAIC_VERSION_OBJECT_VERSION_STATE_REPLAYED
}

enum MssqlBackupTypeEnum {
    MSSQL_BACKUP_TYPE_LOG
    MSSQL_BACKUP_TYPE_SNAPSHOT
}

enum MssqlCbtEffectiveStatusTypeEnum {
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF_DEFAULT
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON
    MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON_DEFAULT
}

enum MssqlCbtStatusTypeEnum {
    MSSQL_CBT_STATUS_TYPE_DEFAULT
    MSSQL_CBT_STATUS_TYPE_DISABLED
    MSSQL_CBT_STATUS_TYPE_ENABLED
}

enum MssqlDatabaseFileTypeEnum {
    MSSQL_DATABASE_FILE_TYPE_DATA
    MSSQL_DATABASE_FILE_TYPE_FILESTREAM
    MSSQL_DATABASE_FILE_TYPE_LOG
}

"Filter for Mssql database live mount results."
enum MssqlDatabaseLiveMountFilterField {
    "Cluster UUID filter field for Mssql database live mount results."
    CLUSTER_UUID
    """

    Mounted database name filter field for Mssql database
    live mount results.
    """
    MOUNTED_DATABASE_NAME
    """

    Source database ID filter field for Mssql database
    live mount results.
    """
    SOURCE_DATABASE_ID
}

"Sort by param for Mssql database live mount results."
enum MssqlDatabaseLiveMountSortByField {
    """

    Creation date sort by field for Mssql database
    live mount results.
    """
    CREATION_DATE
    """

    Mounted database name sort by field for Mssql database
    live mount results.
    """
    MOUNTED_DATABASE_NAME
}

"Sort order param for Mssql database live mount results."
enum MssqlDatabaseLiveMountSortOrderField {
    "Sort in ascending order."
    ASC
    "Sort in descending order."
    DESC
}

enum MssqlDatabaseRecoveryModelEnum {
    MSSQL_DATABASE_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DATABASE_RECOVERY_MODEL_FULL
    MSSQL_DATABASE_RECOVERY_MODEL_SIMPLE
}

enum MssqlDbReplicaAvailabilityInfoRoleEnum {
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_PRIMARY
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_RESOLVING
    MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_SECONDARY
}

enum MssqlDbReplicaRecoveryModelEnum {
    MSSQL_DB_REPLICA_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DB_REPLICA_RECOVERY_MODEL_FULL
    MSSQL_DB_REPLICA_RECOVERY_MODEL_SIMPLE
}

enum MssqlDbSummaryRecoveryModelEnum {
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_BULK_LOGGED
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_FULL
    MSSQL_DB_SUMMARY_RECOVERY_MODEL_SIMPLE
}

enum MssqlLogShippingStatusEnum {
    MSSQL_LOG_SHIPPING_STATUS_BROKEN
    MSSQL_LOG_SHIPPING_STATUS_INITIALIZING
    MSSQL_LOG_SHIPPING_STATUS_OK
    MSSQL_LOG_SHIPPING_STATUS_STALE
}

enum MssqlRootPropertiesRootTypeEnum {
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_HOST
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_MSSQL_AVAILABILITY_GROUP
    MSSQL_ROOT_PROPERTIES_ROOT_TYPE_WINDOWS_CLUSTER
}

enum MssqlUnprotectableTypeEnum {
    MSSQL_UNPROTECTABLE_TYPE_INSUFFICIENT_PERMISSIONS
}

enum NasVendorTypeEnum {
    NAS_VENDOR_TYPE_FLASHBLADE
    NAS_VENDOR_TYPE_ISILON
    NAS_VENDOR_TYPE_NETAPP
    NAS_VENDOR_TYPE_NUTANIX
}

enum NetworkAdapterTypeEnum {
    E1000
    E1000E
    PCNET32
    VMXNET
    VMXNET2
    VMXNET3
}

enum NetworkProtocolTypeEnum {
    TCP
    UDP
}

enum NetworkThrottleResourceIdEnum {
    NETWORK_THROTTLE_RESOURCE_ID_ARCHIVAL_EGRESS
    NETWORK_THROTTLE_RESOURCE_ID_REPLICATION_EGRESS
}

enum NetworkTypeEnum {
    DHCP
    STATIC
}

enum O365AzureCloudTypeEnum {
    PUBLIC
    USGOV
}

"Recover task type i.e Restore/Export."
enum O365RestoreActionType {
    "Used for export task."
    EXPORT_SNAPPABLE
    "Used for restore task."
    RESTORE_SNAPPABLE
}

enum O365ServiceAccountStatusEnum {
    INVALID
    NOT_CONFIGURED
    VALID
}

enum O365ServiceStatusEnum {
    DOWN
    ONLINE
}

enum ObjectPolicyStatus {
    STALE
    UNKNOWN
    UP_TO_DATE
}

enum ObjectTypeEnum {
    AZURE_SQL_DATABASE_DB
    AZURE_SQL_MANAGED_INSTANCE_DB
    AppBlueprint
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVm
    CassandraColumnFamily
    CassandraKeyspace
    CassandraSource
    Ec2Instance
    Fileset
    GcpNativeDisk
    GcpNativeGCEInstance
    Hdfs
    HypervVirtualMachine
    KuprNamespace
    LinuxFileset
    ManagedVolume
    Mssql
    MssqlDatabaseBatchMaintenance
    NutanixVirtualMachine
    O365Calendar
    O365File
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
    OracleDatabase
    PolarisEbsVolume
    PolarisEc2Instance
    SapHanaDatabase
    ShareFileset
    SnapMirrorCloud
    StorageArrayVolumeGroup
    VcdVapp
    VmwareVirtualMachine
    VolumeGroup
    WindowsFileset
    WindowsVolumeGroup
}

enum OnedriveSearchKeywordTypeEnum {
    FILE_TYPE
    NAME
}

enum OnedriveSearchObjectTypeEnum {
    ALL
    O365_FOLDER
    ONEDRIVE_FILE
}

enum OpenAccessTypeEnum {
    EXPLICIT
    INHERITED
    NOT_OPEN
    UNKNOWN_ACCESS
}

enum OperationEnum {
    AddAwsCloudAccount
    AddAzureCloudAccount
    AddCluster
    AddGcpCloudAccount
    AddInventory
    AddStorageSettings
    CancelRunningActivity
    CategoryManageDataSource
    CategoryProtection
    CategoryRecovery
    CategoryViewDataSource
    ConfigureDataClassGlobal
    CreateReport
    CreateSLA
    DeleteAwsCloudAccount
    DeleteAzureCloudAccount
    DeleteCluster
    DeleteGcpCloudAccount
    DeleteInventory
    DeleteReport
    DeleteSLA
    DeleteSnapshot
    DeleteStorageSettings
    Download
    DownloadFromArchivalLocation
    EditAwsCloudAccount
    EditAzureCloudAccount
    EditCdmNetworkSetting
    EditCdmSupportSetting
    EditCdmSysConfig
    EditGcpCloudAccount
    EditSecuritySettings
    EditStorageSettings
    EditSystemPreference
    EditUserManagement
    Export
    ExportDataClassGlobal
    ExportFiles
    ExportSnapshots
    InstantRecover
    ManageAccess
    ManageDataSource
    ManageLegalHold
    ManageProtection
    ManageSLA
    ModifyCluster
    ModifyInventory
    ModifyReport
    ModifySLA
    Mount
    ProvisionOnInfrastructure
    RefreshDataSource
    Restore
    RestoreToOrigin
    TakeOnDemandSnapshot
    TransferAccountOwnership
    UPDATE_ACCOUNT_OWNERSHIP
    UpgradeCluster
    ViewAccess
    ViewAuditLog
    ViewAwsCloudAccount
    ViewAzureCloudAccount
    ViewCdmNetworkSetting
    ViewCdmSupportSetting
    ViewCdmSysConfig
    ViewCluster
    ViewDashboard
    ViewDataClassGlobal
    ViewGcpCloudAccount
    ViewInventory
    ViewInventoryWithHierarchy
    ViewNonSystemEvent
    ViewReport
    ViewSLA
    ViewSecuritySettings
    ViewStorageSettings
    ViewSystemEvent
    ViewSystemPreference
    ViewUserManagement
}

enum OrgStatusEnum {
    ACTIVE
    DELETED
    DELETING
    REFRESHING
}

enum OsTypeEnum {
    Linux
    Other
    Undefined
    Windows
}

enum PastDurationEnum {
    NONE
    PAST_12_MONTHS
    PAST_24_HOURS
    PAST_30_DAYS
    PAST_3_DAYS
    PAST_7_DAYS
}

"Pause Status of the SLA."
enum PauseStatus {
    "SLA not paused."
    NOT_PAUSED
    "SLA paused."
    PAUSED
    "Unknown Status."
    UNKNOWN
}

enum PendingActionGroupTypeEnum {
    APP_FLOW
    ARCHIVAL_LOCATION
    CLOUD_ACCOUNTS
    GLOBAL_SLA
    REPLICATION
    UNMANAGED_OBJECTS
}

enum PendingActionStatusEnum {
    FAILED
    IN_PROGRESS
    QUEUED
    SUCCEEDED
    SYNCED_TO_CDM
}

enum PendingActionSubGroupTypeEnum {
    ARCHIVAL_LOCATION_DELETE
    ARCHIVAL_LOCATION_PAUSE
    ARCHIVAL_LOCATION_RESUME
    AWS_COMPUTE_SETTING_UPSERT
    AWS_IAM_CUSTOMER_ACCOUNT_UPSERT
    AWS_ROLE_BASED_ARCHIVAL_LOCATION
    BLUEPRINT_CREATE
    BLUEPRINT_DELETE
    BLUEPRINT_DEPRECATE
    BLUEPRINT_UPDATE
    CLUSTER_PEER_TOKEN_GET
    CLUSTER_PEER_TOKEN_GET_AND_SET
    CLUSTER_PEER_TOKEN_SET
    DISABLE_REPLICATION_LOCATION_PUT
    ENABLE_LOCATION_AS_REPLICATION_TARGET
    ENABLE_POLARIS_AS_REPLICATION_SOURCE
    GLOBAL_SLA_ASSIGN
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPPABLE
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT
    GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT_V2
    GLOBAL_SLA_DELETE
    GLOBAL_SLA_PUT
    NFS_LOCATION_PUT
    OBJECT_STORE_LOCATION_PUT
    S3COMPATIBLE_LOCATION_PUT
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS
    UNMANAGED_OBJECT_DELETE_SNAPSHOTS_OF_OBJECT
}

enum PendingActionSyncTypeEnum {
    CDM
    POLARIS
}

enum PlanNameEnum {
    PROD
    PROD_LOCAL
    TEST
}

enum PolarisObjectAuthorizedOperationsEnum {
    ManageDataSource
    ManageProtection
    RefreshDataSource
    ViewInventory
}

enum PolarisSLASyncStatusEnum {
    FAILED
    PENDING
    SUCCEEDED
}

enum PolarisSnappableAuthorizedOperationsEnum {
    DeleteSnapshot
    Download
    ExportSnapshots
    ManageProtection
    RestoreToOrigin
    TakeOnDemandSnapshot
    ViewInventory
}

enum PolarisSnapshotGroupByEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum PolarisSnapshotSortByEnum {
    Date
    SnappableId
    SnapshotId
}

enum PolicyObjectFilterEnum {
    ALL
    HAS_OBJECTS
    NO_OBJECTS
}

enum PrePostScriptFailureHandlingEnum {
    abort
    continue
}

enum PrechecksStatusTypeEnum {
    PrechecksFailureError
    PrechecksFailureWarning
    PrechecksRunning
    PrechecksSuccess
    Unknown
}

enum PrincipalTypeEnum {
    CLIENT
    GROUP
    UNKNOWN
    USER
}

"Name of product."
enum ProductName {
    "AppFlows."
    APPFLOWS
    "Cloud Cluster ES."
    CC_ES
    "CloudNative."
    CLOUDNATIVE
    "GPS."
    GPS
    "O365."
    O365
    "Radar."
    RADAR
    "Saphana."
    SAPHANA
    "Sonar."
    SONAR
    "Unknown name."
    UNSPECIFIED_NAME
}

"State of product."
enum ProductState {
    "Product failed to activate."
    ACTIVATION_FAILED
    "Product is in activation."
    ACTIVATION_PENDING
    "Active product."
    ACTIVE
    "Disabled Product."
    DISABLED
    "Product couldn't be disabled."
    DISABLE_FAILED
    "Product is being disabled."
    DISABLE_PENDING
    "Product has been selected for expiration, but somehow expiration failed."
    EXPIRATION_PENDING
    "Expired product."
    EXPIRED
    "Unknown state."
    UNSPECIFIED_STATE
}

"Type of product."
enum ProductType {
    "POC product."
    POC
    "Revenue product."
    REVENUE
    "Trial product."
    TRIAL
    "Unknown type."
    UNSPECIFIED_TYPE
}

enum ProtectionStatusEnum {
    DoNotProtect
    NoSla
    Protected
}

"Provision status of o365 subscription"
enum ProvisionStatus {
    "Organization is active to use."
    ACTIVE
    "Organization is deleted."
    DELETED
    "Organization is being deleted."
    DELETING
    "Organization is being refreshed."
    REFRESHING
}

enum RansomwareResultGroupByEnum {
    ClusterUuid
    ManagedId
    SnapshotDay
    SnapshotHour
    SnapshotMonth
    SnapshotWeek
    SnapshotYear
}

enum RansomwareResultSortByEnum {
    ClusterUuid
    EncryptionProbability
    IsEncrypted
    ManagedId
    SnappableId
    SnapshotDate
    SnapshotId
}

"Regions for Rubrik Cloud Storage Archival Location"
enum RcsRegionEnumType {
    "Europe north or Netherlands"
    EUROPE_NORTH
    "Europe west or Ireland"
    EUROPE_WEST
    "US central or Iowa"
    US_CENTRAL
    "US east 2 or Virginia"
    US_EAST_2
    "US west 2 or Washington"
    US_WEST_2
}

"Tiers for Rubrik Cloud Storage Archival Location"
enum RcsTierEnumType {
    "Cold tier for Rubrik Cloud Storage Archival Location"
    COLD
    "Hot tier for Rubrik Cloud Storage Archival Location"
    HOT
}

enum RecoverySpecTypeEnum {
    AWS_EC2
    UNKNOWN_VM
    VMWARE_VM
}

"Connection status of the replication pair."
enum ReplicationPairConnectionStatus {
    "Rubrik clusters are connected and replication is unpaused"
    REPLICATION_ACTIVE
    "Rubrik clusters are disconnected from each other."
    REPLICATION_DISCONNECTED
    "Replication is paused between the Rubrik clusters."
    REPLICATION_PAUSED
}

"Field to sort by for replication pairs."
enum ReplicationPairsQuerySortByField {
    "Active network throttle limit for source Rubrik Cluster."
    CURRENT_THROTTLE_LIMIT
    "Failed replication task count."
    FAILED_TASKS
    "Running replication task count."
    RUNNING_TASKS
    "Source Rubrik cluster name."
    SOURCE_CLUSTER_NAME
    "Connection status of the replication pair."
    STATUS
    "Storage consumed by replicated snapshots."
    STORAGE
    "Target Rubrik cluster name."
    TARGET_CLUSTER_NAME
}

"Sort order for replication pairs."
enum ReplicationQuerySortByOrder {
    "Ascending order sort."
    ASC
    "Descending order sort."
    DESC
}

enum ReplicationTypeEnum {
    REPLICATION_TO_CLOUD_LOCATION
    REPLICATION_TO_CLOUD_REGION
    UNIDIRECTIONAL_REPLICATION_TO_CLUSTER
    UNKNOWN_REPLICATION_TYPE
}

enum ReportFocusEnum {
    Activity
    Anomaly
    Audit
    Capacity
    Compliance
    Failover
    Infrastructure
    Protection
    ProtectionTaskDetail
    RecoveryTaskDetail
    Sonar
    SonarContent
    TaskSummary
}

enum ReportTableColumnEnum {
    ActivityStatus
    ActivityType
    AnalyzersBreakdown
    AppBlueprintName
    ArchivalTarget
    ArchiveSnapshots
    ArchiveStorage
    BytesCreated
    BytesDeleted
    BytesModified
    BytesNetChanged
    Cluster
    ClusterLocation
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    DataTransferred
    DirectArchive
    Duration
    EncryptionEnabled
    EndDate
    EndTime
    EstimatedRunway
    FailoverStatus
    FailoverType
    FailureReason
    FileName
    FilesCreated
    FilesDeleted
    FilesModified
    IsAnomaly
    LastSnapshot
    LastTestStatus
    LastTestTime
    LastUpdated
    LocalSnapshots
    Location
    LogicalByte
    LogicalBytes
    MissedSnapshots
    NumCoveredObjects
    NumHighRiskLocations
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    NumViolatedFiles
    NumViolations
    ObjectName
    ObjectType
    Path
    PhysicalBytes
    PoliciesBreakdown
    PolicyName
    PolicyStatus
    PreviousSnapshotDate
    PreviousSnapshotId
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicaSnapshots
    ReplicaStorage
    ReplicationSource
    ReplicationTarget
    Size
    SlaDomain
    SlaDomainName
    SnappableName
    SnappableType
    SnapshotConsistency
    SnapshotDate
    SnapshotId
    SnapshotTime
    Source
    StartDate
    StartTime
    Status
    SuspiciousFilesAdded
    TargetSite
    TaskType
    TotalCapacity
    TotalFileTransferred
    TotalHits
    TotalSnapshots
    TransferredBytes
    UsedCapacity
    UserAuditStatus
    UserAuditType
    UserName
}

enum ResolutionTypeEnum {
    RESOLVED_AD
    RESOLVED_ON_HOST
    UNRESOLVED
    WELL_KNOWN
}

enum ResourceType {
    BLUEPRINT
    CLUSTER
    SNAPPABLE
}

enum RetentionUnitEnum {
    DAYS
    HOURS
    MINUTES
    MONTHS
    QUARTERS
    WEEKS
    YEARS
}

enum RiskLevelTypeEnum {
    HIGH_RISK
    LOW_RISK
    MEDIUM_RISK
    NO_RISK
    UNKNOWN_RISK
}

enum RoleFieldEnum {
    Name
}

enum SLAAuditDetailFilterFieldEnum {
    USER_NAME
}

enum SLAComplianceTimeRangeEnum {
    Last24Hours
    Last2Snapshots
    Last3Snapshots
    LastSnapshot
    Past30Days
    Past365Days
    Past7Days
    Past90Days
    SinceProtection
}

enum SLAObjectTypeEnum {
    AWS_EC2_EBS_OBJECT_TYPE
    AWS_RDS_OBJECT_TYPE
    AZURE_OBJECT_TYPE
    AZURE_SQL_DATABASE_OBJECT_TYPE
    AZURE_SQL_MANAGED_INSTANCE_OBJECT_TYPE
    CASSANDRA_OBJECT_TYPE
    FILESET_OBJECT_TYPE
    GCP_OBJECT_TYPE
    KUPR_OBJECT_TYPE
    MSSQL_OBJECT_TYPE
    O365_OBJECT_TYPE
    SAP_HANA_OBJECT_TYPE
    UNKNOWN_OBJECT_TYPE
    VOLUME_GROUP_OBJECT_TYPE
    VSPHERE_OBJECT_TYPE
}

enum SLAQuerySortByFieldEnum {
    NAME
    PROTECTED_OBJECT_COUNT
}

enum SLAQuerySortByOrderEnum {
    ASC
    DESC
}

enum SMTPSecurityTypeEnum {
    NONE
    SSL
    STARTTLS
    TLS
}

enum SapHanaDataPathTypeEnum {
    SAP_HANA_DATA_PATH_TYPE_GCP
    SAP_HANA_DATA_PATH_TYPE_LOCAL
    SAP_HANA_DATA_PATH_TYPE_MANAGED_VOLUME
}

enum SapHanaHostHostTypeEnum {
    SAP_HANA_HOST_HOST_TYPE_MASTER
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_MASTER
    SAP_HANA_HOST_HOST_TYPE_SECONDARY_SLAVE
    SAP_HANA_HOST_HOST_TYPE_SLAVE
}

enum SapHanaLogSnapshotSortByEnum {
    Date
}

enum SapHanaRecoverableRangeSortByEnum {
    EndTime
    StartTime
}

enum SapHanaSslInfoEncryptionProviderEnum {
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_COMMON_CRYPTO
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_OPENSSL
    SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_SAP_CRYPTO
}

enum SapHanaSystemStatus {
    ERROR
    OK
    UNKNOWN_SYSTEM_STATUS
    WARNING
}

enum SapHanaSystemSummaryContainerTypeEnum {
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_MULTI_CONTAINER
    SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_SINGLE_CONTAINER
}

enum SapHanaSystemSummaryStatusEnum {
    SAP_HANA_SYSTEM_SUMMARY_STATUS_ERROR
    SAP_HANA_SYSTEM_SUMMARY_STATUS_OK
    SAP_HANA_SYSTEM_SUMMARY_STATUS_UNKNOWN
    SAP_HANA_SYSTEM_SUMMARY_STATUS_WARNING
}

enum ScriptErrorActionEnum {
    SCRIPT_ERROR_ACTION_ABORT
    SCRIPT_ERROR_ACTION_CONTINUE
}

enum SearchKeywordTypeEnum {
    ALL
    FOLDER_NAME
    SUBJECT
}

enum SearchObjectTypeEnum {
    EMAIL
    FOLDER
}

enum ServiceAccountSortByEnum {
    NAME
}

"Share type for fileset"
enum ShareTypeEnum {
    "NFS share"
    NFS
    "not shared"
    NoShareType
    "SMB share"
    SMB
}

enum SkuEnum {
    STANDARD_GRS
    STANDARD_LRS
    STANDARD_ZRS
}

enum SlaAssignTypeEnum {
    doNotProtect
    noAssignment
    protectWithSlaId
}

enum SlaAssignmentEnum {
    SLA_ASSIGNMENT_DERIVED
    SLA_ASSIGNMENT_DIRECT
    SLA_ASSIGNMENT_UNASSIGNED
}

enum SlaAssignmentTypeEnum {
    Derived
    Direct
    Unassigned
}

"Reasons for the SLA being ineligible for migration."
enum SlaMigrationIneligibilityReason {
    "The remote SLA Domain has an archival policy configured, which is not supported in Polaris currently."
    CASCADED_ARCHIVAL_CONFIGURED
    "Rubrik cluster associated with the SLA Domain is disconnected."
    CLUSTER_DISCONNECTED
    "The version of the Rubrik cluster associated with the SLA Domain is not valid for SLA migration."
    INVALID_CLUSTER_VERSION
    "SLA Domain is not associated with a Rubrik cluster."
    INVALID_LOCAL_SLA
    "The type of replication targets is invalid for migration."
    INVALID_REPLICATION_TARGET
    "Replication targets associated with the SLA Domain have invalid cluster version for migration."
    INVALID_REPLICATION_TARGET_VERSION
    "SLA Domain is eligible for migration."
    NOT_APPLICABLE
    "Replication targets associated with the SLA Domain are disconnected."
    REPLICATION_TARGET_DISCONNECTED
}

enum SlaMigrationStatus {
    FAILED
    IN_PROGRESS
    STUCK
    SUCCEEDED
}

"Filter for SLAStatus."
enum SlaStatusFilterField {
    "Name of Cluster for Filter."
    CLUSTER_NAME
    "Pause Status for Filter."
    PAUSE_STATUS
}

enum SlaTimeUnitEnum {
    SLA_TIME_UNIT_DAILY
    SLA_TIME_UNIT_HOURLY
    SLA_TIME_UNIT_MINUTE
    SLA_TIME_UNIT_MONTHLY
    SLA_TIME_UNIT_QUARTERLY
    SLA_TIME_UNIT_WEEKLY
    SLA_TIME_UNIT_YEARLY
}

enum SnappableAggregationsEnum {
    ArchiveStorage
    Count
    LogicalBytes
    MissedSnapshots
    PhysicalBytes
    ReplicaStorage
    TotalSnapshots
}

"Snappable anomalies sort field."
enum SnappableAnomaliesSortBy {
    "Snapshot created file count sort."
    CREATED_FILE_COUNT
    "Snapshot deleted file count sort."
    DELETED_FILE_COUNT
    "Snapshot encryption level sort."
    ENCRYPTION
    "Snapshot modified file count sort."
    MODIFIED_FILE_COUNT
    "Snappable name sort."
    NAME
    "Anomaly severity sort."
    SEVERITY
    "Snapshot date sort."
    SNAPSHOT_DATE
    "Snapshot suspicious file count sort."
    SUSPICIOUS_FILE_COUNT
}

enum SnappableCrawlStatus {
    COMPLETE
    FAIL
    IN_PROGRESS
}

enum SnappableGroupByEnum {
    Cluster
    ClusterType
    ComplianceStatus
    Day
    Hour
    Month
    ObjectType
    ProtectionStatus
    PullTimeWithOffset
    Quarter
    SlaDomain
    Week
    Year
}

enum SnappableLevelHierarchyTypeEnum {
    AllSubHierarchyType
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeManagedDisk
    AzureNativeVirtualMachine
    AzureSqlDatabaseDb
    AzureSqlManagedInstanceDb
    GcpNativeGCEInstance
    KuprNamespace
    O365Mailbox
    O365Onedrive
    O365SharePointDrive
    O365SharePointList
    O365Site
    O365Teams
}

enum SnappableSlaAssignmentEnum {
    SNAPPABLE_SLA_ASSIGNMENT_DERIVED
    SNAPPABLE_SLA_ASSIGNMENT_DIRECT
    SNAPPABLE_SLA_ASSIGNMENT_UNASSIGNED
}

enum SnappableSortByEnum {
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    Cluster
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    MissedSnapshots
    Name
    ObjectType
    PULL_TIME
    PhysicalBytes
    ProtectionStatus
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SlaDomainName
    TotalSnapshots
    TransferredBytes
}

enum SnappableTableColumnEnum {
    ArchiveSnapshots
    ArchiveStorage
    ClusterName
    ClusterType
    ComplianceStatus
    DataReduction
    LastSnapshot
    LocalSnapshots
    Location
    LogicalByte
    MissedSnapshots
    ObjectType
    PhysicalBytes
    ReplicaSnapshots
    ReplicaStorage
    SlaDomain
    SnappableName
    TotalSnapshots
    TransferredBytes
}

enum SnappableTypeEnum {
    CALENDAR
    EXCHANGE
    MAILBOX
    ONEDRIVE
    SHAREPOINT_DRIVE
    SHAREPOINT_LIST
    SHAREPOINT_SITE
    TEAMS
}

enum SnapshotCloudStorageTierEnum {
    SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_COLD
    SNAPSHOT_CLOUD_STORAGE_TIER_COOL
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER
    SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER_DEEP_ARCHIVE
    SNAPSHOT_CLOUD_STORAGE_TIER_HOT
}

enum SnapshotConsistencyLevelEnum {
    SNAPSHOT_APP_CONSISTENT
    SNAPSHOT_CRASH_CONSISTENT
    UNKNOWN_CONSISTENCY_LEVEL
}

enum SnapshotFrequencyEnum {
    DAILY
    HOURLY
    MONTHLY
    NA
    QUARTERLY
    WEEKLY
    YEARLY
}

enum SnapshotGroupByTimeEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum SnapshotQueryFilterField {
    ARCHIVAL_LOCATION_IDS
    EBS_AWS_NATIVE_ACCOUNT_ID
    EC2_AWS_NATIVE_ACCOUNT_ID
    HAS_CLOUD_NATIVE_INDEX_FILES
    HAS_UNEXPIRED_ARCHIVED_SNAPSHOTS
    HAS_UNEXPIRED_REPLICAS
    IS_APPFLOWS_QUERY_SNAPSHOT_DETAILS_NOT_NEEDED
    IS_ARCHIVED
    IS_DELETED_FROM_SOURCE
    IS_DOWNLOADED
    IS_GCED
    IS_LEGALLY_HELD
    IS_ON_DEMAND
    IS_REPLICA
    IS_REPLICATED
    IS_SAP_HANA_INCREMENTAL_SNAPSHOT
    IS_SKIPPED_FOR_REPLICATION
    ON_DEMAND_SLA_ID
    SLA_ID
    SNAPPABLE_TYPES
    SNAPSHOT_TYPE
}

enum SnapshotQuerySortByField {
    CREATION_TIME
    UNKNOWN
}

"Errors which may occur when searching for a snapshot."
enum SnapshotSearchError {
    "Access to the resource is denied."
    AccessDenied
    "No matching snapshot found."
    NoSnapshotFound
}

"Type of snapshot to be used for file recovery."
enum SnapshotType {
    "Archived snapshot."
    ARCHIVED
    "Replicated snapshot."
    REPLICATED
    "Source snapshot."
    SOURCE
}

enum SnapshotTypeEnum {
    DOWNLOADED
    ON_DEMAND
    SCHEDULED
}

"The type of snapshot to be used for recovery operations if source snapshot is expired."
enum SnapshotTypeForRestoreIfSourceExpired {
    "Use the archived snapshot."
    ARCHIVED
    "Use the replicated snapshot."
    REPLICATED
}

enum SnapshotTypeToUseIfSourceExpired {
    ARCHIVED
    REPLICATED
}

enum SonarContentReportGroupByEnum {
    Analyzer
    Cluster
    File
    ObjectName
    Policy
    SLADomain
    Time
}

enum SonarContentReportSortByEnum {
    AnalyzerName
    Cluster
    FileName
    FilesWithHits
    Location
    ObjectName
    Path
    PolicyName
    SLADomain
    Size
    SnapshotTime
    TotalHits
}

enum SonarContentReportTableColumnEnum {
    AnalyzersBreakdown
    Cluster
    FileName
    ObjectName
    ObjectType
    Path
    PoliciesBreakdown
    Size
    SnapshotTime
    TotalHits
}

enum SonarReportGroupByEnum {
    POLICY_VIOLATIONS
    STATUS_POLICY
    TIME_ISSUES
    TIME_VIOLATIONS
}

enum SonarReportSortByEnum {
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    POLICY_NAME
    POLICY_STATUS
}

enum SonarReportTableColumnEnum {
    NumCoveredObjects
    NumHighRiskLocations
    NumViolatedFiles
    NumViolations
    PolicyName
    PolicyStatus
}

enum SonarReportTablePolicyStatusEnum {
    DISCOVERY
    IN_COMPLIANCE
    OUT_OF_COMPLIANCE
}

enum SortByFieldEnum {
    ActivityStatus
    ActivityType
    AnalyzerName
    AnomalyProbability
    AppBlueprintName
    ArchivalComplianceStatus
    ArchivalSnapshotLag
    ArchiveSnapshots
    ArchiveStorage
    AwaitingFirstFull
    BytesCreatedCount
    BytesDeletedCount
    BytesModifiedCount
    BytesNetChangedCount
    Cluster
    ClusterName
    ClusterType
    ClusterUuid
    ComplianceStatus
    DataReduction
    Date
    EndTime
    FileName
    FilesCreatedCount
    FilesDeletedCount
    FilesModifiedCount
    FilesWithHits
    IsAnomaly
    LastSnapshot
    LastUpdated
    LatestArchivalSnapshot
    LatestReplicationSnapshot
    LocalOnDemandSnapshots
    LocalSLASnapshots
    LocalSnapshots
    Location
    LogicalBytes
    LogicalDataReduction
    ManagedId
    MissedSnapshots
    NUM_HIGH_RISK_LOCATIONS
    NUM_OBJECTS
    NUM_VIOLATED_FILES
    NUM_VIOLATION
    Name
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    ObjectName
    ObjectType
    POLICY_NAME
    POLICY_STATUS
    PULL_TIME
    Path
    PhysicalBytes
    PolicyName
    PreviousSnapshotDate
    PreviousSnapshotId
    ProtectionStatus
    RegisteredAt
    ReplicaSnapshots
    ReplicaStorage
    ReplicationComplianceStatus
    ReplicationSnapshotLag
    SLADomain
    Severity
    Size
    SlaDomainName
    SnappableName
    SnappableType
    SnapshotDate
    SnapshotId
    SnapshotTime
    SourceSiteName
    StartTime
    SuspiciousFilesCount
    TargetSiteName
    Time
    TotalHits
    TotalSnapshots
    TransferredBytes
}

enum SortOrderEnum {
    Asc
    Desc
}

enum SourceSourceTypeEnum {
    SOURCE_SOURCE_TYPE_CASSANDRA
    SOURCE_SOURCE_TYPE_MONGO
}

enum SourceSslCertReqsEnum {
    SOURCE_SSL_CERT_REQS_NONE
    SOURCE_SSL_CERT_REQS_OPTIONAL
    SOURCE_SSL_CERT_REQS_REQUIRED
}

enum StalenessTypeEnum {
    IS_STALE
    NOT_STALE
}

enum SyslogFacilityTypeEnum {
    ALL_SYSLOG
    AUTH
    RUBRIK_CLI
    RUBRIK_EVENT
    RUBRIK_SSH
    SECURITY
    SYSLOG
}

enum SyslogSeverityTypeEnum {
    ALL_SEVERITY
    CRITICAL
    INFORMATIONAL
    WARNING
}

enum TagFilterType {
    "filter on exact value of key, and all the tag values"
    TAG_KEY
    "filter on exact values of tag key and value"
    TAG_KEY_VALUE
}

enum TagRuleSlaAssignTypeEnum {
    doNotProtect
    protectWithSlaId
}

enum TargetEncryptionTypeEnum {
    KMS_MASTER_KEY_BASED
    RSA_KEY_BASED
    UNKNOWN_ENCRYPTION_TYPE
}

enum TargetMappingQueryFilterFieldEnum {
    ARCHIVAL_GROUP_TYPE
    ARCHIVAL_LOCATION_TYPE
    NAME
}

enum TargetMappingSortByFieldEnum {
    NAME
}

enum TargetQueryFilterFieldEnum {
    IS_MANAGED_BY_AUTO_AG
    LOCATION_TYPE
    NAME
}

enum TargetSortByFieldEnum {
    NAME
}

enum TargetSyncStatusEnum {
    ACTION_FAILED
    NOT_CREATED_ON_CDM
    PENDING_SYNC
    SYNCED
}

enum TargetTypeEnum {
    AWS
    AZURE
    GOOGLE
    NFS
    RCS_AZURE
    S3_COMPATIBLE
}

enum TaskDetailGroupByEnum {
    Cluster
    Day
    Hour
    Month
    Quarter
    Status
    TaskDetailClusterType
    TaskDetailObjectType
    Week
    Year
}

enum TaskDetailSortByEnum {
    EndTime
}

enum TaskDetailTableColumnEnum {
    ArchivalTarget
    ClusterLocation
    DataTransferred
    DirectArchive
    EndTime
    FailureReason
    Location
    LogicalBytes
    ObjectName
    ObjectType
    PhysicalBytes
    ProtectedVolume
    RecoveryPoint
    RecoveryPointType
    ReplicationSource
    ReplicationTarget
    SlaDomainName
    SnapshotConsistency
    StartTime
    Status
    TaskType
    TotalFileTransferred
    UserName
}

enum TaskReportTableColumnEnum {
    EndDate
    Location
    NumOfCanceled
    NumOfExpected
    NumOfFailed
    NumOfSucceeded
    ObjectName
    ObjectType
    SlaDomainName
    StartDate
}

enum TaskSummaryGroupByEnum {
    Cluster
    ClusterType
    Day
    Month
    Object
    ObjectType
    Quarter
    SlaDomain
    Week
    Year
}

enum TaskSummarySortByEnum {
    Date
    NumCanceled
    NumExpected
    NumFailed
    NumSucceeded
    ObjectName
    ObjectType
    SlaDomainName
}

enum TaskchainStateEnum {
    CANCELED
    CANCELING
    FAILED
    READY
    RUNNING
    SUCCEEDED
    UNDOING
}

enum TierEnum {
    COOL
    HOT
}

enum TimeDurationEnum {
    DAY
    HOUR
    MONTH
}

enum TimeGranularityEnum {
    DAY
    MONTH
}

enum TimeUnitEnum {
    Day
    Hour
    Month
    Quarter
    Week
    Year
}

enum UpgradeInfoGroupByEnum {
    ClusterJobStatus
    Type
    VersionStatus
}

enum UpgradeInfoSortByEnum {
    ClusterJobStatus
    ClusterLocation
    ClusterName
    ClusterType
    DownloadedVersion
    InstalledVersion
    RegisteredAt
    VersionStatus
}

enum UserAuditGroupByEnum {
    Cluster
    ClusterType
    Day
    Hour
    Month
    ObjectType
    Quarter
    UserAuditStatus
    UserAuditType
    Week
    Year
}

enum UserAuditObjectTypeEnum {
    AppBlueprint
    ArchivalLocation
    AuthDomain
    AwsAccount
    AwsEventType
    AwsNativeAccount
    AwsNativeEbsVolume
    AwsNativeEc2Instance
    AwsNativeRdsInstance
    AzureNativeDisk
    AzureNativeSubscription
    AzureNativeVm
    Blueprint
    CASSANDRA_COLUMN_FAMILY
    CASSANDRA_KEYSPACE
    CASSANDRA_SOURCE
    CloudNativeTagRule
    Cluster
    DataLocation
    Ec2Instance
    FailoverClusterApp
    FederatedAccess
    GcpNativeDisk
    GcpNativeGceInstance
    GcpNativeProject
    Host
    HostFailoverCluster
    HypervScvmm
    HypervServer
    HypervVm
    IpWhitelist
    JobInstance
    Ldap
    LinuxFileset
    LinuxHost
    ManagedVolume
    Mssql
    MssqlDatabase
    NasHost
    NutanixCluster
    NutanixVm
    O365Calendar
    O365Group
    O365Mailbox
    O365Onedrive
    O365Organization
    O365SharepointDrive
    O365SharepointList
    O365Team
    OracleDb
    OracleHost
    OracleRac
    PublicCloudMachineInstance
    SapHanaDb
    SapHanaSystem
    ShareFileset
    Sla
    SlaDomain
    SmbDomain
    Snapshot
    StorageArray
    StorageArrayVolumeGroup
    StorageSettings
    Storm
    SupportTunnel
    SystemPreference
    UnknownObjectType
    Upgrade
    User
    UserActionAudit
    UserGroup
    UserRole
    Vcd
    VcdVapp
    Vcenter
    VmwareMount
    VmwareVm
    VolumeGroup
    WindowsFileset
    WindowsHost
}

enum UserAuditSeverityEnum {
    Critical
    Info
    NA
    Warning
}

enum UserAuditSortByEnum {
    Time
}

enum UserAuditStatusEnum {
    Failure
    Success
}

enum UserAuditTableColumnEnum {
    ClusterName
    ClusterType
    UserAuditStatus
    UserAuditType
}

enum UserAuditTypeEnum {
    AccessManagement
    Audit
    Backup
    Classification
    Configuration
    Diagnostic
    Download
    Failover
    Index
    LOCAL_RECOVERY
    LegalHold
    Login
    Recovery
    Search
    SlaAssignment
    SlaModification
    Sync
    UnknownUserAuditType
}

enum UserDomainEnum {
    CLIENT
    LDAP
    LOCAL
    SHARED_SSO
    SSO
}

enum UserFieldEnum {
    Domain
    Email
    LastLogin
    Status
}

enum UserStatusEnum {
    ACTIVE
    DEACTIVATED
    UNKNOWN
}

enum V1GetCompatibleMssqlInstancesV1RequestRecoveryTypeEnum {
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_EXPORT
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_MOUNT
    V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_RESTORE
}

enum VCenterConnectionStatusEnum {
    BADLY_CONFIGURED
    CONNECTED
    CONNECTION_STATUS_UNKNOWN
    DELETING
    DISCONNECTED
    REFRESHING
    REMOTE
}

enum VSphereLiveMountStatusEnum {
    DatastoreMounted
    MigratingDatastore
    Mounting
    PoweredOff
    PoweredOn
    Unknown
    Unmounting
}

enum VSphereMountSortByEnum {
    ClusterName
    MountTime
    NewVmName
    SourceVmName
    Status
}

enum VSphereVirtualDiskSortByEnum {
    FileName
    Size
}

enum ValidationStatus {
    FAILURE
    SUCCESS
    WARNING
}

enum VcenterConfigV2ConflictResolutionAuthzEnum {
    VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
    VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}

enum VersionStatusTypeEnum {
    Stable
    Unknown
    UpgradeRecommended
}

enum VmPowerStatusEnum {
    poweredOff
    poweredOn
    suspended
}

enum VmTypeEnum {
    DENSE
    STANDARD
}

"Sort by parameters for volume group live mount."
enum VolumeGroupMountSortBy {
    "Sort by cluster name."
    CLUSTER_NAME
    "Sort by live mount time."
    MOUNT_TIME
    "Sort by volume group live mount name."
    VOLUME_GROUP_MOUNT_NAME
}

enum WarningSeverityEnum {
    BLOCKING
    NONE
    NON_BLOCKING
}

enum WeekDayEnum {
    Friday
    Monday
    Saturday
    Sunday
    Thursday
    Tuesday
    Wednesday
}

enum WhitelistModeEnum {
    ALL_USERS
    LOCAL_USERS
}

"Filter Activity series data"
input ActivitySeriesFilterInput {
    ancestorId: UUID
    cluster: CommonClusterFilterInput
    lastActivityStatus: [ActivityStatusEnum!]
    lastActivityType: [ActivityTypeEnum!]
    lastUpdated_gt: DateTime
    lastUpdated_lt: DateTime
    objectFids: [UUID!]
    objectName: String
    objectType: [ActivityObjectTypeEnum!]
    searchTerm: String
    severity: [ActivitySeverityEnum!]
    startTime_gt: DateTime
    startTime_lt: DateTime
}

"Input to add IAM user-based AWS cloud account for native protection."
input AddAwsIamUserBasedCloudAccountInput {
    "Access key for IAM user with native protection policy on AWS cloud account."
    accessKey: String
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegionEnum!]
    "Name of cloud account."
    cloudAccountName: String!
    "Cloud type (Standard/China/Gov) for the cloud account"
    cloudType: AwsCloudTypeEnum = STANDARD
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeatureEnum!]!
    "Native ID of cloud account."
    nativeId: String!
    "Secret key for IAM user with native protection policy on AWS cloud account."
    secretKey: String
}

"Input for adding Exocompute configurations for an Azure Cloud Account."
input AddAzureCloudAccountExocomputeConfigurationsInput {
    "List of Exocompute configurations to be added."
    azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!
    "Rubrik ID of the Azure Cloud Account."
    cloudAccountId: UUID!
}

"Input for adding an Azure Cloud Account."
input AddAzureCloudAccountInput {
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Regions to be added to the Azure Cloud Account."
    regions: [AzureCloudAccountRegionEnum!]!
    "Session ID of the current OAuth session."
    sessionId: String!
    "Subscriptions to be added to the Azure Cloud Account."
    subscriptions: [AzureSubscriptionInput!]!
    "Domain name of the Azure Tenant."
    tenantDomainName: String!
}

"Input for adding an Azure Cloud Account without OAuth."
input AddAzureCloudAccountWithoutOAuthInput {
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudTypeEnum = AZUREPUBLICCLOUD
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Version of the Azure role policy."
    policyVersion: Int!
    "Regions to be added to the Azure Cloud Account."
    regions: [AzureCloudAccountRegionEnum!]!
    "Subscriptions to be added to the Azure Cloud Account."
    subscriptions: [AzureSubscriptionInput!]!
    "Domain Name of the Azure tenant."
    tenantDomainName: String!
}

"Input request to add a new Db2 instance."
input AddDb2InstanceInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Add a Db2 Instance to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a Db2 Instance."
    db2Instance: Db2InstanceConfigInput!
}

input AddMosaicStoreInput {
    "Required. Add store request object with details of store to be added."
    addStoreData: MosaicAddStoreRequestInput!
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
}

"Input for AmiTypeForAwsNativeArchivedSnapshotExport"
input AmiTypeForAwsNativeArchivedSnapshotExportInput {
    "Rubrik ID of the target AWS account for export."
    destinationAwsAccountRubrikId: UUID!
    "Target region for export"
    destinationRegionId: AwsNativeRegionEnum!
    "ID of snapshot to export. Snapshot should have an archived copy present."
    snapshotId: UUID!
}

input AnalyzerGroupInput {
    analyzers: [AnalyzerInput!] = []
    groupType: AnalyzerGroupTypeEnum = UNDEFINED
    id: String = ""
    name: String = ""
}

input AnalyzerInput {
    analyzerType: AnalyzerTypeEnum = UNDEFINED
    dictionary: [String!] = []
    dictionaryCsv: String = ""
    id: String = ""
    name: String = ""
    regex: String = ""
}

"Filter anomaly result data."
input AnomalyResultFilterInput {
    clusterUuid: [UUID!]
    endTime: DateTime
    isAnomaly: Boolean
    managedId: [String!]
    snappableFid: [UUID!]
    startTime: DateTime
}

input AppBlueprintChildInput {
    bootPriority: Int!
    fid: UUID!
    snappableType: ObjectTypeEnum!
}

input AppBlueprintChildSnappableExportSpec {
    datastoreId: String! = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vmName: String = ""
}

input AppBlueprintChildSnappableInstantRecoverySpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    preserveMoid: Boolean = false
    vlan: Int = 0
}

input AppBlueprintChildSnappableLocalRecoverySpec {
    disableNetwork: Boolean = false
    hostId: String = ""
    originalVmId: String! = ""
    recoveredVmName: String = ""
    removeNetworkDevices: Boolean = false
    shouldKeepMacAddresses: Boolean = false
    shouldUnregisterVm: Boolean = false
}

input AppBlueprintChildSnappableMountSpec {
    dataStoreName: String = ""
    localRecoverySpec: AppBlueprintChildSnappableLocalRecoverySpec
    vlan: Int = 0
    vmName: String = ""
}

input AppBlueprintExportSnapshotJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableExportSpec!]! = []
    newAppName: String = ""
}

input AppBlueprintMountSnapshotJobConfig {
    childrenToRestore: [AppBlueprintChildSnappableMountSpec!]! = []
    jobConfigBase: AppBlueprintRestoreSnapshotJobConfigBase
    newAppName: String = ""
}

input AppBlueprintRecoverySpecCreateReqInputType {
    childRecoverySpecs: [ChildRecoverySpecCreateReqInputType!]!
    locationInfo: LocationInfo
    planType: PlanNameEnum!
    userData: String
}

input AppBlueprintRestoreSnapshotJobConfigBase {
    "Power on the new virtual machine(s) if set to True."
    shouldPowerOn: Boolean = true
}

"O365 list app filter"
input AppFilter {
    field: AppFilterFieldEnum = APP_TYPE
    texts: [String!] = []
}

"O365 list app sort by param"
input AppSortByParam {
    field: AppSortByFieldEnum = APP_ID
    sortOrder: AppSortOrderEnum = ASC
}

input ArchivalSpecInput {
    archivalGroupId: String = ""
    archivalTieringSpecInput: ArchivalTieringSpecInput
    threshold: Int = 0
    thresholdUnit: RetentionUnitEnum = MINUTES
}

"Archival tiering spec input."
input ArchivalTieringSpecInput {
    "Cold storage class for tiering."
    coldStorageClass: ColdStorageClass = COLD_STORAGE_CLASS_UNKNOWN
    "Set when instant tiering enabled."
    isInstantTieringEnabled: Boolean = false
    "Min accessible duration specified for smart tiering."
    minAccessibleDurationInSeconds: Long = 0
    "Set to tier existing snapshots for instant tiering."
    shouldTierExistingSnapshots: Boolean = false
}

"A Set of fields needed to archive a kubernetes cluster."
input ArchiveK8sClusterInput {
    "UUID of the Kubernetes Cluster"
    clusterId: UUID!
}

input AssignMssqlSlaPropertiesInput {
    "Required. Update information."
    updateInfo: MssqlSlaDomainAssignInfoInput!
}

input AutomaticAwsTargetMappingCreateRequest {
    awsComputeSettingsId: String
    bucketPrefix: String!
    cloudAccountId: UUID!
    clusterUuidList: [String!]
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    name: String!
    proxySettings: ProxySettingsInput
    region: AwsRegionEnum!
    rsaKey: String
    storageClass: AwsStorageClassTypeEnum!
}

input AutomaticAwsTargetMappingEditRequest {
    awsComputeSettingsId: String
    cloudAccountId: UUID
    clusterUuidList: [String!]
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageClass: AwsStorageClassTypeEnum
}

input AutomaticAzureTargetMappingCreateRequest {
    accessKey: String!
    cloudAccountId: UUID!
    clusterUuidList: [String!]
    computeSettings: AzureCloudComputeSettingsInput
    containerNamePrefix: String!
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    name: String!
    proxySettings: ProxySettingsInput
    rsaKey: String!
    storageAccountName: String!
}

input AutomaticAzureTargetMappingEditRequest {
    accessKey: String
    cloudAccountId: UUID
    clusterUuidList: [String!]
    computeSettings: AzureCloudComputeSettingsInput
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageAccountName: String
}

input AwsAccountCreateRequest {
    accessKey: String!
    description: String
    name: String!
    secretKey: String!
}

input AwsAccountEditRequest {
    accessKey: String!
    description: String
    id: String!
    name: String!
    secretKey: String!
}

input AwsCloudAccountAdminInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account"
    cloudType: AwsCloudTypeEnum = STANDARD
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

input AwsCloudAccountConfigsInput {
    "Admin account ID to filter."
    awsAdminAccountFilter: UUID
    "Search text to match in native ID, account name, or role ARN."
    columnSearchFilter: String
    "Type of cloud native protection feature."
    feature: CloudAccountFeatureEnum!
    "List of status filters for listing cloud accounts."
    statusFilters: [CloudAccountStatusEnum!]!
}

input AwsCloudAccountFeatureVersionInput {
    "Name of feature to be protected for cloud account."
    feature: CloudAccountFeatureEnum!
    "Version of feature. This should be same as the response given in the first step (validateAndCreateAwsCloudAccount)."
    version: Int!
}

input AwsCloudAccountInitiateInput {
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountInput {
    "Name of cloud account."
    accountName: String = ""
    "Cloud type (Standard/China) for the cloud account"
    cloudType: AwsCloudTypeEnum = STANDARD
    id: String = ""
    "Native ID of cloud account."
    nativeId: String = ""
    "Whether seamless flow is enabled on cloud account."
    seamlessFlowEnabled: Boolean = false
}

input AwsCloudAccountValidateInput {
    awsAdminAccount: AwsCloudAccountAdminInput
    awsChildAccounts: [AwsCloudAccountInput!]!
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountWithFeaturesInput {
    "Type of cloud native protection features."
    features: [CloudAccountFeatureEnum!]!
}

input AwsCloudAccountsWithFeaturesInput {
    "Admin account ID to filter."
    awsAdminAccountFilter: UUID
    "Search text to match in native ID, account name, and role ARN."
    columnSearchFilter: String
    "Type of cloud native protection feature."
    feature: CloudAccountFeatureEnum!
    "List of status filters for listing cloud accounts."
    statusFilters: [CloudAccountStatusEnum!]!
}

input AwsCloudComputeSettingFilterInput {
    field: AwsCloudComputeSettingFilterFieldEnum = NAME
    text: String = ""
}

input AwsCloudComputeSettingsInput {
    computeProxySettings: ProxySettingsInput
    securityGroupId: String = ""
    subnetId: String = ""
    vpcId: String = ""
}

input AwsComputeSettingsCreateRequest {
    cloudAccountId: String = ""
    clusterInterfaceCidrs: [ClusterInfCidrsInput!] = []
    isSecurityGroupPolarisManaged: Boolean = false
    name: String = ""
    region: AwsRegionEnum = UNKNOWN_AWS_REGION
    securityGroupId: String = ""
    subnetId: String = ""
    vpcId: String = ""
}

input AwsComputeSettingsEditRequest {
    id: String = ""
    name: String = ""
    securityGroupId: String = ""
    subnetId: String = ""
    vpcId: String = ""
}

"ES storage for AWS account."
input AwsEsConfigInput {
    "Bucket name in AWS."
    bucketName: String = ""
}

"AWS exocompute configuration to add."
input AwsExocomputeConfigInput {
    "AWS ID of cluster control plane security group. Not required if isPolarisManaged is true"
    clusterSecurityGroupId: String = ""
    "True, if security groups are to be managed to be polaris. False, if security groups are managed by user."
    isPolarisManaged: Boolean!
    "AWS ID of worker node security group. Not required if isPolarisManaged is true"
    nodeSecurityGroupId: String = ""
    "The region for which the configuration is specified."
    region: AwsCloudAccountRegionEnum!
    "List of exactly 2 subnets."
    subnets: [AwsExocomputeSubnetInputType!]!
    "AWS ID of the VPC"
    vpcId: String!
}

"Aws exocompute subnet input"
input AwsExocomputeSubnetInputType {
    "Availability zone of the subnet"
    availabilityZone: String!
    "AWS ID of subnet"
    subnetId: String!
}

"Filter to return AWS objects which have account rubrik ID in the given list of account rubrik IDs."
input AwsNativeAccountFilter {
    accountIds: [String!]!
}

"Filters for list of AWS accounts."
input AwsNativeAccountFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return AWS EBS volumes which are attached to one of the EC2 instances in the given list of EC2 instance IDs."
input AwsNativeAttachedInstanceFilter {
    ec2InstanceIds: [String!]!
}

"Filter to return AWS EBS volumes which have file recovery enabled."
input AwsNativeEbsVolumeFileRecoveryStatusFilter {
    statuses: [AwsNativeFileRecoveryStatusEnum!]!
}

"Filters for list of AWS EBS volumes."
input AwsNativeEbsVolumeFilters {
    accountFilter: AwsNativeAccountFilter
    attachedInstanceFilter: AwsNativeAttachedInstanceFilter
    effectiveSlaFilter: EffectiveSlaFilter
    fileRecoveryStatusFilter: AwsNativeEbsVolumeFileRecoveryStatusFilter
    nameOrIdSubstringFilter: AwsNativeEbsVolumeNameOrIdSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    typeFilter: AwsNativeEbsVolumeTypeFilter
}

"Filter to return AWS EBS volumes with a given substring in their name or instance ID."
input AwsNativeEbsVolumeNameOrIdSubstringFilter {
    nameOrIdSubstring: String!
}

"Filter to return AWS EBS volumes which have volume type in the given list of volume types."
input AwsNativeEbsVolumeTypeFilter {
    ebsVolumeTypes: [AwsNativeEbsVolumeTypeEnum!]!
}

"Filter to return AWS EC2 instances which have file recovery enabled."
input AwsNativeEc2InstanceFileRecoveryStatusFilter {
    statuses: [AwsNativeFileRecoveryStatusEnum!]!
}

"Filters for list of AWS EC2 instances."
input AwsNativeEc2InstanceFilters {
    accountFilter: AwsNativeAccountFilter
    effectiveSlaFilter: EffectiveSlaFilter
    fileRecoveryStatusFilter: AwsNativeEc2InstanceFileRecoveryStatusFilter
    nameOrIdSubstringFilter: AwsNativeEc2InstanceNameOrIdSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    typeFilter: AwsNativeEc2InstanceTypeFilter
    vpcFilter: AwsNativeVPCFilter
}

"Filter to return AWS EC2 instances with a given substring in their name or instance ID."
input AwsNativeEc2InstanceNameOrIdSubstringFilter {
    nameOrIdSubstring: String!
}

"Filter to return AWS EC2 instances which have instance type in the given list of instance types."
input AwsNativeEc2InstanceTypeFilter {
    ec2InstanceTypes: [AwsNativeEc2InstanceTypeEnum!]!
}

input AwsNativeProtectionAccountAddRequest {
    "12 digit aws cloud account Id"
    accountId: String!
    "Name or account alias to identify aws account"
    name: String!
    "regions to be enabled for native protection"
    regions: [String!]!
}

"Filter to return AWS RDS instances which have database engine in the given list of database engines."
input AwsNativeRdsDbEngineFilter {
    dbEngines: [AwsNativeRdsDbEngineEnum!]!
}

"Filter to return AWS RDS instances which have database instance class in the given list of database instance classes."
input AwsNativeRdsDbInstanceClassFilter {
    dbInstanceClasses: [AwsNativeRdsDbInstanceClassEnum!]!
}

"Filters for list of AWS RDS instances."
input AwsNativeRdsInstanceFilters {
    accountFilter: AwsNativeAccountFilter
    dbEngineFilter: AwsNativeRdsDbEngineFilter
    dbInstanceClassFilter: AwsNativeRdsDbInstanceClassFilter
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AwsNativeRegionFilter
    relicFilter: RelicFilter
    tagFilter: AwsNativeTagFilter
    vpcFilter: AwsNativeVPCFilter
}

"Filter to return AWS objects which have region in the given list of regions."
input AwsNativeRegionFilter {
    regions: [AwsNativeRegionEnum!]!
}

"Filter to return AWS objects which have at least one tag in the given list of tags."
input AwsNativeTagFilter {
    tagFilterParams: [TagFilterParams!]!
}

"Filter to return AWS EC2 instances which have VPC ID in the given list of VPC IDs."
input AwsNativeVPCFilter {
    vpcIDs: [String!]!
}

input AwsRdsConfigInput {
    logRetention: SlaDurationInput
}

input AwsTargetCreateRequest {
    awsComputeSettingsId: String
    awsRetrievalTier: AwsRetrievalTier
    bucketName: String!
    cloudAccountId: UUID!
    cloudComputeSettings: AwsCloudComputeSettingsInput
    clusterUuid: String!
    isConsolidationEnabled: Boolean!
    kmsMasterKeyId: String
    name: String!
    proxySettings: ProxySettingsInput
    region: AwsRegionEnum!
    rsaKey: String
    storageClass: AwsStorageClassTypeEnum!
}

input AwsTargetEditRequest {
    awsComputeSettingsId: String
    cloudAccountId: UUID
    id: String!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageClass: AwsStorageClassTypeEnum
}

input AwsVMNicSpecInputType {
    awsSecurityGroupId: String = ""
    awsSubnetId: String = ""
    ipv4Address: String = ""
    key: Int = 0
    securityGroupId: String = ""
    subnetId: String = ""
}

input AwsVMRecoverySpecInputType {
    availabilityZone: String = ""
    dedicatedHostId: String = ""
    hostAffinity: String = ""
    instanceTypeId: Int! = 0
    instanceTypeName: String = ""
    keyName: String = ""
    nics: [AwsVMNicSpecInputType!] = []
    placementGroup: String = ""
    tenancy: AwsInstanceTenancyEnum = DEDICATED
    userData: String = ""
    version: Long = 0
    volumes: [AwsVMVolumeSpecInputType!] = []
}

input AwsVMVolumeSpecInputType {
    iops: Int = 0
    "key value defined in VMWare VM"
    key: Int = 0
    sizeGbs: Int = 0
    volumeTypeId: Int = 0
}

input AzureAccountCreateRequest {
    description: String
    name: String!
    subscriptionId: String!
}

input AzureAccountEditRequest {
    description: String
    id: String!
    name: String
    subscriptionId: String
}

input AzureCloudAccountSubscriptionInput {
    id: String = ""
    name: String = ""
}

input AzureCloudComputeSettingsInput {
    appId: String = ""
    appSecretKey: String = ""
    computeProxySettings: ProxySettingsInput
    generalPurposeStorageContainer: String = ""
    generalPurposeStorageName: String = ""
    region: AzureRegionEnum = UNKNOWN_AZURE_REGION
    resourceGroup: String = ""
    securityGroupId: String = ""
    subnetId: String = ""
    virtualNetworkId: String = ""
}

"ES storage for Azure account."
input AzureEsConfigInput {
    "Storage container name in Azure."
    containerName: String = ""
    "Storage resource group in Azure."
    resourceGroup: String = ""
    "Should create a new container or not?"
    shouldCreateContainer: Boolean = false
    "Storage name in Azure."
    storageAccount: String = ""
    storageSecret: String = ""
}

"ES storage for Azure account."
input AzureEsConfigInputNoSecret {
    "Storage container name in Azure."
    containerName: String = ""
    "Storage resource group in Azure."
    resourceGroup: String = ""
    "Should create a new container or not?"
    shouldCreateContainer: Boolean = false
    "Storage name in Azure."
    storageAccount: String = ""
}

"Azure exocompute config to add."
input AzureExocomputeAddConfigInputType {
    "Specifies if this configuration is managed by Polaris."
    isPolarisManaged: Boolean!
    "The region for which the config is specified."
    region: AzureCloudAccountRegionEnum!
    "Subnet native id where exocompute should be launched."
    subnetNativeId: String!
}

input AzureImmutabilitySettings {
    lockDurationDays: Int = 0
}

"Filter to return Azure disks which are attached to one of the virtual machines in the given list of virtual machine IDs."
input AzureNativeAttachedVMFilter {
    virtualMachineIds: [String!]!
}

"Filter to return Azure resource groups with subscription ID in the given list of Rubrik subscription IDs."
input AzureNativeCommonRGSubscriptionFilter {
    subscriptionIds: [String!]!
}

"Filters for listing Azure resource groups."
input AzureNativeCommonResourceGroupFilters {
    effectiveSlaFilter: AzureNativeRgSlaFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    subscriptionFilter: AzureNativeCommonRGSubscriptionFilter
}

"Filter to decide whether to get disks with a configured exocompute."
input AzureNativeDiskExocomputeConnectedFilter {
    "Whether to only get snappables whose regions have exocompute configured."
    isConnected: Boolean!
}

"Filter to return Azure disks which have file indexing enabled."
input AzureNativeDiskFileIndexingFilter {
    "The list of status values to filter for."
    statuses: [AzureNativeFileIndexingStatus!]!
}

"Filters for list of Azure disks."
input AzureNativeDiskFilters {
    attachedVMFilter: AzureNativeAttachedVMFilter
    diskTypeFilter: AzureNativeDiskTypeFilter
    effectiveSlaFilter: EffectiveSlaFilter
    exocomputeConnectedFilter: AzureNativeDiskExocomputeConnectedFilter
    fileIndexingFilter: AzureNativeDiskFileIndexingFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    relicFilter: RelicFilter
    resourceGroupFilter: AzureNativeDiskResourceGroupFilter
    subscriptionFilter: AzureNativeDiskSubscriptionFilter
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure disks which have resource group name in the given list of resource group names."
input AzureNativeDiskResourceGroupFilter {
    isCommonResourceGroupEnabled: Boolean = true
    resourceGroupNames: [String!]!
}

"Filter to return Azure disks which have rubrik subscription ID in the given list of rubrik subscription IDs."
input AzureNativeDiskSubscriptionFilter {
    isCommonResourceGroupEnabled: Boolean = true
    subscriptionIds: [String!]!
}

"Filter to return Azure virtual machine which have VM size in the given list of VM sizes."
input AzureNativeDiskTypeFilter {
    diskTypes: [String!]!
}

"Filter to return Azure virtual machine which have region in the given list of regions."
input AzureNativeRegionFilter {
    regions: [AzureNativeRegionEnum!]!
}

"Returns Azure resource groups containing objects that are protected by the SLA domains identified by the specified SLA IDs."
input AzureNativeRgSlaFilter {
    "List of SLA Domain IDs."
    effectiveSlaIds: [String!]!
}

"Filters for list of Azure subscriptions."
input AzureNativeSubscriptionFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    nameSubstringFilter: NameSubstringFilter
}

"Filter to return Azure objects which have at least one tag in the given list of tags."
input AzureNativeTagFilter {
    tagFilterParams: [TagFilterParams!]!
}

"Filter to return Azure virtual machines which have resource group name in the given list of resource group names."
input AzureNativeVMResourceGroupFilter {
    isCommonResourceGroupEnabled: Boolean = true
    resourceGroupNames: [String!]!
}

"Filter to return Azure virtual machine which have VM size in the given list of VM sizes."
input AzureNativeVMSizeFilter {
    vmSizes: [String!]!
}

"Filter to return Azure virtual machines which have rubrik subscription ID in the given list of rubrik subscription IDs."
input AzureNativeVMSubscriptionFilter {
    isCommonResourceGroupEnabled: Boolean = true
    subscriptionIds: [String!]!
}

"Filters for list of Azure virtual machines."
input AzureNativeVirtualMachineFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    exocomputeConnectedFilter: AzureNativeVmExocomputeConnectedFilter
    fileIndexingFilter: AzureNativeVmFileIndexingFilter
    nameSubstringFilter: NameSubstringFilter
    regionFilter: AzureNativeRegionFilter
    relicFilter: RelicFilter
    resourceGroupFilter: AzureNativeVMResourceGroupFilter
    subscriptionFilter: AzureNativeVMSubscriptionFilter
    tagFilter: AzureNativeTagFilter
    vmSizeFilter: AzureNativeVMSizeFilter
    vnetFilter: AzureNativeVnetFilter
}

"Filter to decide whether to get VMs with a configured exocompute."
input AzureNativeVmExocomputeConnectedFilter {
    "Whether to only get snappables whose regions have exocompute configured."
    isConnected: Boolean!
}

"Filter to return Azure VMs which have file indexing enabled."
input AzureNativeVmFileIndexingFilter {
    "The list of status values to filter for."
    statuses: [AzureNativeFileIndexingStatus!]!
}

"Filter to return Azure virtual machine which have Vnet name in the given list of Vnet names."
input AzureNativeVnetFilter {
    vnetNames: [String!]!
}

"Exocompute config"
input AzureO365ExocomputeConfig {
    existingComputeConfig: ExistingComputeConfig
    existingGroupConfig: GroupConfig
    existingStorageAccountConfig: ExistingStorageAccountConfig
    newComputeConfig: NewComputeConfig
    newGroupConfig: GroupConfig
    newStorageAccountConfig: NewStorageAccountConfig
    regionName: String!
}

"Input to configure the SLA Domain for Azure SQL Database DB."
input AzureSqlDatabaseDbConfigInput {
    "Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int = 0
}

"Input for exporting Long Term Retention backup of an Azure SQL Database."
input AzureSqlDatabaseDbLtrExport {
    "Database Server in which database is being exported."
    databaseServer: String!
    "Region in which database is being exported."
    region: String!
    "Resource Group in which database is being exported."
    resourceGroup: String!
    "Rubrik ID of the snapshot from which database is being exported."
    snapshotId: UUID!
}

"Input for exporting Point-in-Time backup of an Azure SQL Database."
input AzureSqlDatabaseDbPitExport {
    "Timestamp of point in time restore."
    restorePointInTime: String!
}

"Filters for list of Azure SQL Databases."
input AzureSqlDatabaseFilters {
    "Filter by Effective SLA."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by relics."
    relicFilter: RelicFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlDatabaseResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlDatabaseSubscriptionFilter
    "Filter by tag."
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure SQL Databases which have resource group name in the given list of resource group names."
input AzureSqlDatabaseResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filters for list of Azure SQL Database Servers."
input AzureSqlDatabaseServerFilters {
    "Filter by Effective SLA."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlDatabaseServerResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlDatabaseServerSubscriptionFilter
}

"Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names."
input AzureSqlDatabaseServerResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names."
input AzureSqlDatabaseServerSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filter to return Azure SQL Databases with subscription ID in the given list of Rubrik subscription IDs."
input AzureSqlDatabaseSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Filters for list of Azure SQL Managed Instance Databases."
input AzureSqlManagedInstanceDatabaseFilters {
    "Filter by Effective SLA."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by relic."
    relicFilter: RelicFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlManagedInstanceDatabaseResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlManagedInstanceDatabaseSubscriptionFilter
}

"Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceDatabaseResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceDatabaseSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"Input to configure the SLA Domain for Azure SQL Managed Instance DB."
input AzureSqlManagedInstanceDbConfigInput {
    "Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35."
    logRetentionInDays: Int = 0
}

"Input for exporting Long Term Retention backup of Azure SQL Managed Instance database."
input AzureSqlManagedInstanceDbLtrExport {
    "Region to which database is being exported."
    region: String!
    "Rubrik ID of the snapshot from which database is being exported."
    snapshotId: UUID!
}

"Input for exporting Point-in-Time backup of an Azure SQL Managed Instance database."
input AzureSqlManagedInstanceDbPitExport {
    "Timestamp of point in time restore."
    restorePointInTime: String!
}

"Filters for list of Azure SQL Managed Instance Servers."
input AzureSqlManagedInstanceServerFilters {
    "Filter by Effective SLA."
    effectiveSlaFilter: EffectiveSlaFilter
    "Filter by name substring."
    nameSubstringFilter: NameSubstringFilter
    "Filter by region."
    regionFilter: AzureNativeRegionFilter
    "Filter by resource group name."
    resourceGroupFilter: AzureSqlManagedInstanceServerResourceGroupFilter
    "Filter by subscription."
    subscriptionFilter: AzureSqlManagedInstanceServerSubscriptionFilter
    "Filter by tag."
    tagFilter: AzureNativeTagFilter
}

"Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceServerResourceGroupFilter {
    "List of names of resource groups."
    resourceGroupNames: [String!]!
}

"Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names."
input AzureSqlManagedInstanceServerSubscriptionFilter {
    "List of subscription IDs."
    subscriptionIds: [String!]!
}

"AzureStorageAccountsReq input for Azure account."
input AzureStorageAccountsReq {
    cloudAccountId: String = ""
    "Resource group in Azure."
    resourceGroup: String = ""
}

input AzureSubscriptionInput {
    name: String!
    nativeId: String!
}

input AzureTargetCreateRequest {
    accessKey: String!
    cloudAccountId: UUID!
    clusterUuid: UUID!
    computeSettings: AzureCloudComputeSettingsInput
    containerName: String!
    immutabilitySettings: AzureImmutabilitySettings
    instanceType: InstanceTypeEnum!
    isConsolidationEnabled: Boolean!
    name: String!
    proxySettings: ProxySettingsInput
    rsaKey: String!
    storageAccountName: String!
}

input AzureTargetEditRequest {
    accessKey: String
    cloudAccountId: UUID
    computeSettings: AzureCloudComputeSettingsInput
    id: UUID!
    isConsolidationEnabled: Boolean
    name: String
    proxySettings: ProxySettingsInput
    storageAccountName: String
}

input AzureVmConfig {
    cdmVersion: String = ""
    location: String = ""
    networkResourceGroup: String = ""
    networkSecurityGroup: String = ""
    networkSecurityResourceGroup: String = ""
    nodeSizeGb: Int = 0
    resourceGroup: String = ""
    subnet: String = ""
    tags: String = ""
    vhdUrl: String = ""
    vmType: VmTypeEnum
    vnet: String = ""
    vnetResourceGroup: String = ""
}

"Config for O365 SharePoint List backup."
input BackupO365SharePointListInput {
    "Polaris ID of O365 list object."
    snappableUuid: UUID!
}

input BackupObject {
    eventSeriesId: String = ""
    monitoringId: String = ""
    objectFid: String = ""
}

input BackupRunConfig {
    runNow: Boolean = false
}

"Specifies backup window params"
input BackupWindowInput {
    durationInHours: Int = 0
    startTimeAttributes: StartTimeAttributesInput
}

input BaseOnDemandSnapshotConfig {
    slaFid: String = ""
}

"""

Supported in v5.0+
"""
input BaseOnDemandSnapshotConfigInput {
    """

    Supported in v5.0+
    """
    slaId: String
}

input BasicSnapshotScheduleInput {
    frequency: Int = 0
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

input BatchExportInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the exported virtual machine snapshot."
    config: BatchExportSnapshotJobConfigInput!
}

"""

Supported in v6.0+
"""
input BatchExportSnapshotJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to export.
    """
    snapshots: [ExportSnapshotJobConfigForBatchInput!]!
}

input BatchInPlaceRecoverInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for in-place recovery."
    config: BatchInPlaceRecoveryJobConfigInput!
}

"""

Supported in v6.0+
"""
input BatchInPlaceRecoveryJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to use for an in-place recovery.
    """
    snapshots: [InPlaceRecoveryJobConfigForBatchInput!]!
}

input BatchInstantRecoverInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for Instant Recovery."
    config: BatchInstantRecoveryJobConfigInput!
}

"""

Supported in v6.0+
"""
input BatchInstantRecoveryJobConfigInput {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to mount for Instant Recovery.
    """
    snapshots: [InstantRecoveryJobConfigForBatchInput!]!
}

"""

Supported in v5.0+
"""
input BatchMountSnapshotJobConfigInput {
    """

    Required. Supported in v5.0+
    v5.0: Array of virtual machine IDs with snapshots to be live mounted.
    v5.1-v5.3: Array of vm_ids to live mount a snapshot from
    v6.0+: Array of objects containing information about snapshots to mount.
    """
    snapshots: [MountSnapshotJobConfigForBatchV1Input!]!
}

"""

Supported in v6.0+
"""
input BatchMountSnapshotJobConfigV2Input {
    """

    Required. Supported in v6.0+
    Array of objects containing information about snapshots to mount.
    """
    snapshots: [MountSnapshotJobConfigForBatchV2Input!]!
}

input BatchMountSnapshotV2Input {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Configuration object containing an array of virtual machine IDs, providing a way to indicate the selected snapshot and the mount configurations."
    config: BatchMountSnapshotJobConfigV2Input!
}

"""

Supported in v5.3+
"""
input BatchVmwareVmRecoverableRangesRequestInput {
    """

    Supported in v5.3+
    Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    afterTime: DateTime
    """

    Supported in v5.3+
    Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
    """
    beforeTime: DateTime
    """

    Required. Supported in v5.3+
    The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.
    """
    vmIds: [String!]!
}

input BidirectionalReplicationSpecInput {
    replicationSpec1: UnidirectionalReplicationSpecInput
    replicationSpec2: UnidirectionalReplicationSpecInput
}

input BlueprintFailoverJobConfig {
    "The ID of the Blueprint to be failed over."
    blueprintId: UUID!
    childSnappableFailoverInfos: [SnappableFailoverInfoType!]
    "The type of the data transfer, EXPORT, INPLACE, and HYDRATION."
    dataTransferType: DataTransferTypeEnum
    "Flag to enable recovery using Rubrik backup agent."
    enableRecoveryWithRba: Boolean
    "The failure action of failover, PAUSE or CLEANUP."
    failoverFailureAction: String
    "Errors that should be ignored during failover."
    failoverIgnorableErrors: [BlueprintFailoverIgnorableError!]
    "The operation of the failover, Start or Resume."
    failoverOperation: String
    "The type of the failover job, LOCALRECOVERY, FAILOVER or TEST_FAILOVER."
    failoverType: String!
    "The type of the target location, CDM, AZURE, AWS or GCP."
    targetLocationType: LocationType
    "The UUID of the target location."
    targetLocationUuid: UUID
}

"Blueprint failover related properties."
input BlueprintFailoverPropertiesInput {
    "Data transfer type: EXPORT, INPLACE, HYDRATION."
    dataTransferType: DataTransferTypeEnum = EMPTY_VALUE
    "Type of plan: Prod, Test."
    planType: PlanNameEnum = PROD
    "Failover target location information."
    targetLocation: LocationInfo
}

input BlueprintFailoverReportGeneratorJobInfo {
    "The IDs for the failover records in the report."
    failoverIds: [String!]!
}

"Input params for getting bootstrap status of a cluster."
input BootstrapStatusReq {
    bootstrapId: Long = 0
    clusterUuid: String = ""
    masterNodeId: String = ""
}

input BrowseDirectoryFiltersInput {
    analyzerGroupIds: [String!] = []
    whitelistEnabled: Boolean = false
}

input BrowseMssqlBackupFilesInput {
    "Required. Configuration for the browse request."
    config: MssqlBackupSelectionInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input BrowseSnapMirrorCloudSnapshotInput {
    "Required. The ID of the snapshot to browse."
    id: String!
    "Maximum number of entries in the response."
    limit: Int
    "Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries."
    offset: Int
    "Required. The absolute path of the starting point for the directory listing."
    path: String!
}

input BulkCreateOnDemandBackupInput {
    "Required. The IDs of the virtual machines for which to take an on-demand snapshot and the ID of the SLA Domain to assign to the resulting snapshot."
    config: BulkOnDemandSnapshotJobConfigInput!
}

input BulkCreateSnapMirrorCloudInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. For each SnapMirror Cloud protected object to be created, specify a NetApp volume ID."
    definitions: [SnapMirrorCloudCreateInput!]!
}

input BulkDeleteSourceRequestInput {
    async: Boolean
    "Required. "
    sourceNames: [String!]!
}

"""

Supported in v5.3+
"""
input BulkOnDemandSnapshotJobConfigInput {
    """

    Supported in v5.3+
    The ID of the SLA Domain to assign to the virtual machines.
    """
    slaId: String
    """

    Required. Supported in v5.3+
    The IDs of the virtual machines for which to take on-demand snapshots.
    """
    vms: [String!]!
}

input BulkUpdateMssqlDbV1Input {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Properties to update for each database."
    dbsUpdateProperties: [MssqlDbUpdateIdInput!]!
}

"Email address input for organizer and/or attendee"
input CalendarEmailAddressFilter {
    emailAddress: String = ""
    filterType: CalendarEmailAddressFilterTypeEnum = ORGANIZER
}

"Parameters for calendar event search"
input CalendarSearchFilter {
    emailAddresses: [CalendarEmailAddressFilter!] = []
    searchKeywordFilter: CalendarSearchKeywordFilter
    searchObjectFilter: CalendarSearchObjectFilter
    timerange: TimeRangeFilter
}

"Calendar search keyword and type"
input CalendarSearchKeywordFilter {
    keywordType: CalendarSearchKeywordTypeEnum = NAME
    searchKeyword: String = ""
}

"Calendar search object type"
input CalendarSearchObjectFilter {
    searchObjectType: CalendarSearchObjectTypeEnum = CALENDAR
}

input CdmSnapshotFilterInput {
    clusterUuid: [UUID!]
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    snapshotId: [UUID!]
    timeRange: TimeRangeInput
}

"Filters for the cluster list"
input CdmUpgradeInfoFilterInput {
    "Location of cluster"
    clusterLocation: [String!]
    connectionState: [ClusterStatus!]
    "Cluster software version greater than or equal to"
    downloadedVersion: [String!]
    "Cluster UUIDs"
    id: [UUID!]
    installedVersion: [String!]
    "Cluster software version greater than or equal to"
    minSoftwareVersion: String
    "Cluster names"
    name: [String!]
    "Prechecks status of cluster"
    prechecksStatus: [PrechecksStatusTypeEnum!]
    "Product type of Rubrik cluster"
    productType: [ClusterProductEnum!]
    "Cluster registration time greater than"
    registrationTime_gt: DateTime
    "Cluster registration time less than"
    registrationTime_lt: DateTime
    "Cluster types"
    type: [ClusterTypeEnum!]
    "Cluster upgrade job status"
    upgradeJobStatus: [ClusterJobStatusTypeEnum!]
    upgradeScheduled: Boolean
    versionStatus: [VersionStatusTypeEnum!]
}

input ChangePasswordInput {
    "Email of user performing reset."
    email: String = ""
    "New password for user."
    password: String = ""
}

input ChangeVfdOnHostInput {
    "Required. Host volume filter driver install definition."
    config: HostVfdInstallRequestInput!
}

input ChildRecoverySpecCreateReqInputType {
    recoveryPoint: Long
    recoverySpec: ChildRecoverySpecInputType!
    slaId: String
    snappableId: String!
}

input ChildRecoverySpecInputType {
    awsSpec: AwsVMRecoverySpecInputType
    vSphereSpec: VSphereVMRecoverySpecInputType
}

"List of snappable ids and recovery points."
input ChildSnappableFailoverInfoInput {
    "Point in time to which to recover the VM."
    recoveryPoint: Long = 0
    "Snappable id of the blueprint child."
    snappableId: String = ""
}

input ClassificationBannerSettingsInputType {
    account: String = ""
    bannerColor: BannerColor = NONE
    bannerText: String = ""
}

input ClassificationLoginSettingsInputType {
    account: String = ""
    loginText: String = ""
}

input ClassificationPolicyInput {
    analyzerIds: [String!] = []
    colorEnum: ClassificationPolicyColor = UNKNOWN
    description: String = ""
    id: String = ""
    mode: ClassificationPolicyMode = DISCOVERY
    name: String = ""
    updateAnalyzerIds: Boolean = false
    updateDescription: Boolean = false
    updateMode: Boolean = false
    updateName: Boolean = false
}

input CleanupFailoverJobInfo {
    blueprintId: UUID!
    comments: String
}

input CloudAccountFilterInput {
    field: CloudAccountFilterFieldEnum = NAME
    text: String = ""
}

"Feature for which required permissions have to be checked."
input CloudNativeFeatureForPermissionsCheck {
    awsFeature: AwsFeatureForPermissionCheck
    azureFeature: AzureFeatureForPermissionCheck
}

"DataType representing filters on cloud native tag or label rules"
input CloudNativeFilter {
    field: CloudNativeTagRuleFilterFieldsEnum = SLA_DOMAIN
    texts: [String!] = []
}

"DataType representing cloud native ids"
input CloudNativeIDs {
    awsNativeAccountIds: [String!]
    azureNativeSubscriptionIds: [String!]
    gcpNativeProjectIds: [String!]
}

"Filters for the cluster disk list"
input ClusterDiskFilterInput {
    status: ClusterDiskStatus
    type: ClusterDiskType
}

"Filters for the cluster list"
input ClusterFilterInput {
    "Exclude clusters that do not have any nodes connected"
    excludeEmptyCluster: Boolean
    "Cluster UUIDs"
    id: [UUID!]
    "Cluster software version greater than or equal to"
    minSoftwareVersion: String
    "Cluster names"
    name: [String!]
    "Object types of snappables protected by the cluster"
    objectType: [ObjectTypeEnum!]
    "Type of Rubrik cluster"
    productType: [ClusterProductEnum!]
    "Cluster registration time greater than"
    registrationTime_gt: DateTime
    "Cluster registration time less than"
    registrationTime_lt: DateTime
    "Cluster types"
    type: [ClusterTypeEnum!]
}

input ClusterInfCidrsInput {
    clusterId: String = ""
    clusterName: String = ""
    interfaceCidr: [InterfaceCidrInput!] = []
}

"GeoLocation of the cluster"
input ClusterLocationEdit {
    address: String!
    latitude: Float!
    longitude: Float!
}

"""

Supported in v6.0+
"""
input ClusterVisibilityConfigInput {
    """

    Required. Supported in v6.0+
    Names of the host groups being protected.
    """
    hostGroupFilter: [String!]!
    """

    Required. Supported in v6.0+
    VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
    """
    id: String!
    """

    Supported in v6.0+
    A Boolean that specifies whether the compute cluster is a VMware Metro Storage Cluster.
    """
    isVmwareMetroStorageCluster: Boolean
}

"Filter cluster data."
input CommonClusterFilterInput {
    id: [UUID!]
    type: [ClusterTypeEnum!]
}

input CommonNotificationSettingInputType {
    hostname: String = ""
    networkType: NetworkProtocolTypeEnum = UDP
    port: Int = 0
    securityType: SMTPSecurityTypeEnum = NONE
    trustedCerts: String = ""
}

"Input for completing authentication of the Azure Cloud Accounts."
input CompleteAzureCloudAccountOAuthInput {
    "Client ID of the application. The appID is empty if the tenant uses a Rubrik app or a custom app."
    appId: String
    "Client secret key of the application. The appSecretKey is empty if the tenant uses a Rubrik app or a custom app."
    appSecretKey: String
    "Authorization code received after the OAuth consent flow. For more information, see https://auth0.com/docs/flows/authorization-code-flow."
    authorizationCode: String!
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudTypeEnum = AZUREPUBLICCLOUD
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Redirect URL used in the OAuth flow."
    redirectUrl: String!
    "Session ID of the current OAuth session."
    sessionId: String!
    "Specifies whether to skip permission checks of Azure subscriptions required for addition."
    shouldSkipPermissionChecks: Boolean!
    "Domain name of the Azure Tenant."
    tenantDomainName: String!
}

input ConfigGroupByInput {
    "Aggregations for single-level groupBy. This does not affect double-level groupBys."
    aggregations: [String!]!
    "Report-level groupBy selection"
    groupById: String!
}

input ContextFilterInputField {
    field: String!
    text: String!
}

"Struct representing the conversations contents to be restored"
input ConversationsRestoreConfig {
    ChannelInfoForFullRestore: TeamsConvChannelInfo
    ChannelsToRestore: [TeamsConvChannelInfo!]!
    O365AppID: String!
    RefreshTokenEncrypted: String!
    SearchFilter: TeamsConversationsSearchFilterJson
    ShouldRestoreFileAttachments: Boolean!
}

"Input to create AWS exocompute configurations."
input CreateAwsExocomputeConfigsInput {
    "Rubrik ID for cloud account."
    cloudAccountId: UUID!
    "List of exocompute configurations for the cloud account."
    configs: [AwsExocomputeConfigInput!]!
}

"CreateAzureClusterInput for Azure account."
input CreateAzureClusterInput {
    cloudAccountId: String = ""
    clusterConfig: clusterConfigInput
    isEsType: Boolean = false
    vmConfig: AzureVmConfig
}

"Input for CreateCloudNativeAwsStorageSetting mutation"
input CreateCloudNativeAwsStorageSettingInput {
    bucketPrefix: String!
    bucketTags: TagsInput
    cloudAccountId: UUID!
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    kmsMasterKeyId: String
    name: String!
    region: AwsRegionEnum
    storageClass: AwsStorageClassTypeEnum!
}

"Input for create storage settings for an account."
input CreateCloudNativeAzureStorageSettingInput {
    "Cloud Account Id of the target subscription."
    cloudAccountId: UUID!
    "Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION."
    cloudNativeLocTemplateType: CloudNativeLocTemplateTypeEnum!
    "Name of the container inside storage account. This field must be between 3 to 64 characters in length and must start with a letter or number, and can contain only lowercase letters, numbers, and the dash (-) characters."
    containerName: String!
    "Name of the storage setting."
    name: String!
    "Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy."
    redundancy: AzureRedundancy!
    "Name or prefix of the storage account. This field can not be empty string and must contain only lowercase letters and numbers. For 'SOURCE_REGION' Template Type, this field must be less than 16 characters. Random UID of eight characters is appended to the prefix to create the actual storage accounts. For 'SPECIFIC_REGION' Template Type, this field must be less than 24 characters."
    storageAccountName: String!
    "Region for the Storage Account. For 'SOURCE_REGION' Template Type, this field will be 'UNKNOWN_AZURE_REGION'. For 'SPECIFIC_REGION' Template Type, this field must be a azure region supporting GPV2, More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region."
    storageAccountRegion: AzureRegionEnum
    "Tags of the storage account."
    storageAccountTags: TagsInput
    "Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers."
    storageTier: AzureStorageTier!
    "Azure native subscription id."
    subscriptionNativeId: String!
}

input CreateDownloadMssqlBackupFilesByIdInput {
    "Required. Configuration for a download files by id job."
    config: DownloadMssqlBackupFilesByIdJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input CreateExportMssqlDbInput {
    "Required. Configuration for the export."
    config: ExportMssqlDbJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input CreateInPlaceRecoveryV2Input {
    "Required. Configuration for the in-place recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an in-place recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an in-place recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT in-place recovery that uses the most recent time available."
    config: InPlaceRecoveryJobConfigV2Input!
    "Required. ID of a VM."
    id: String!
}

"Contains information about the snapshots to be placed on legal hold andconfiguration of the legal hold on which they have to be placed."
input CreateLegalHoldInput {
    "Configuration of the required legal hold."
    holdConfig: HoldConfig
    "List of snapshot IDs."
    snapshotIds: [String!] = []
}

input CreateMssqlMountInput {
    "Required. Configuration for the Live Mount."
    config: MountMssqlDbConfigInput!
    "Required. ID of the SQL Server database."
    id: String!
}

input CreateOnDemandMssqlBackupInput {
    "Required. Configuration for the on-demand backup."
    config: MssqlBackupJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input CreateOnDemandMssqlBatchBackupV1Input {
    "Required. Configuration for the on-demand backups."
    config: MssqlBatchBackupJobConfigInput!
}

input CreateOnDemandMssqlLogBackupInput {
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input CreateOnDemandVolumeGroupBackupInput {
    "Configuration for the on-demand backup. Configuration values are `volumeIdsIncludedInSnapshot`, which specifies the unique ID of each volume that is part of this snapshot of the Volume Group, and `slaID`, the ID of the SLA Domain for the snapshot."
    config: VolumeGroupOnDemandSnapshotConfigInput
    "Required. The ID of the Volume Group."
    id: String!
}

input CreateRestoreMssqlDbInput {
    """

    Required. v5.0-v5.1: Configuration for the restore.
    v5.2+: Restore configuration.
    """
    config: RestoreMssqlDbJobConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input CreateSnapMirrorCloudBackupJobInput {
    "Configuration for the on-demand backup."
    config: BaseOnDemandSnapshotConfigInput
    "Required. ID of the SnapMirror Cloud protected object."
    id: String!
}

input CreateSnapMirrorCloudInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Specify a NetApp volume ID."
    definition: SnapMirrorCloudCreateInput!
}

input CreateSnapMirrorCloudRelationshipInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. ID of SnapMirror Cloud protected object."
    definition: RelationshipCreateInput!
}

input CreateSnapMirrorCloudRestoreJobInput {
    "Required. The ID of the snapshot from which to restore."
    id: String!
    "Required. Configuration for the job to restore files or the volume from a SnapMirrorCloud backup."
    jobConfig: SnapMirrorCloudRestoreParametersInput!
}

input CreateUserWithPasswordInput {
    "Email for new user."
    email: String = ""
    "Password for new user."
    password: String = ""
    "Role IDs to add to new user."
    roleIds: [String!] = []
}

input CreateVcenterV2Input {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. The IP address and account credentials of the vCenter Server that is being added."
    vcenterDetail: VcenterConfigV2Input!
}

input CreateVolumeGroupDownloadFilesJobInput {
    "Required. Configuration for a download request."
    config: VolumeGroupDownloadFilesJobConfigInput!
    "Required. ID of Snapshot."
    id: String!
}

input CreateVolumeGroupMountInput {
    "Required. Configuration for the mount request. The mount will expose an SMB address per recovered volume. In addition, if a target host is specified, each volume must specify a mount path. If a target host is specified but no mount paths are, they will be generated for every volume. In all cases, a single SMB share will be created for this mount. If a target host is specified, the share will only be accessible by that host."
    config: VolumeGroupMountSnapshotJobConfigInput!
    "Required. ID of snapshot."
    id: String!
}

input CustomReportCreate {
    "Chart configs for the report."
    charts: [ReportChartCreate!]
    "Filters for the report data."
    filters: CustomReportFiltersConfig!
    focus: ReportFocusEnum!
    "True if report should be hidden from gallery view."
    isHidden: Boolean = false
    "True if report is auto-generated and not allowed to be edited."
    isReadOnly: Boolean = false
    "Name of the report."
    name: String!
    "Table configs for the report."
    tables: [ReportTableCreate!]
}

"Filter custom reports data."
input CustomReportFilterInput {
    creationTime_gt: DateTime
    creationTime_lt: DateTime
    focus: ReportFocusEnum
    isHidden: Boolean
    isReadOnly: Boolean
    searchTerm: String
}

input CustomReportFiltersConfig {
    activityObjectType: [ActivityObjectTypeEnum!]
    "List of cluster id to filter on."
    clusterId: [UUID!]
    clusterLocation: [String!]
    "List of cluster types to filter on."
    clusterType: [ClusterTypeEnum!]
    complianceStatus: [ComplianceStatusEnum!]
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    "Whether the snapshot is anomalous or not."
    isAnomaly: Boolean
    "List of activity types to filter on."
    lastActivityStatus: [ActivityStatusEnum!]
    "List of activity types to filter on."
    lastActivityType: [ActivityTypeEnum!]
    "List of managed ids to filter data on."
    managedId: [String!]
    "List of snappable types to filter on."
    objectType: [ObjectTypeEnum!]
    "List of policy IDs to filter on."
    policyId: [String!]
    protectionStatus: [ProtectionStatusEnum!]
    replicationSource: [String!]
    searchTerm: String
    "List of sla domain ids to filter on."
    slaDomainId: [String!]
    slaTimeRange: SLAComplianceTimeRangeEnum
    sonarObjectTypes: [HierarchyObjectTypeEnum!]
    source: [String!]
    targetSite: [String!]
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    "Start and end time range to filter data on."
    timeRange: GenericTimeRangeInput
    "List of object types to filter on for Audits."
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    "List of user audit status to filter on."
    userAuditStatus: [UserAuditStatusEnum!]
    "List of user audit types to filter on."
    userAuditType: [UserAuditTypeEnum!]
}

input DailySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

input DayOfWeekOptInput {
    day: DayOfWeekEnum = MONDAY
}

"Input to add Db2 Instance."
input Db2InstanceConfigInput {
    """

    Required.
    The Db2 Instance hosts.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.3+
    The Db2 Instance id
    """
    instanceId: String!
    "Required.The Db2 Instance password"
    password: String!
    "Required.The Db2 Instance username"
    username: String!
}

"The input parameter containing the Db2 instance properties to be updated."
input Db2InstancePatchInput {
    "The ID of the SLA Domain that is configured for the Db2 Instance."
    configuredSlaDomainId: String
    "The Db2 instance hosts."
    hostIds: [String!]
    "The password of the Db2 Instance."
    password: String
    "The username of the Db2 Instance."
    username: String
}

"Input to delete AWS exocompute configurations."
input DeleteAwsExocomputeConfigsInput {
    "IDs of exocompute configurations to be deleted."
    configIdsToBeDeleted: [UUID!]!
}

"Input to delete IAM user-based AWS cloud account."
input DeleteAwsIamUserBasedCloudAccountInput {
    "Rubrik ID of cloud account to be deleted."
    awsCloudAccountId: String!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeatureEnum!
}

"Input for deleting Exocompute configurations for an Azure Cloud Account."
input DeleteAzureCloudAccountExocomputeConfigurationsInput {
    "Rubrik IDs of the cloud accounts to be deleted."
    cloudAccountIds: [UUID!]!
}

"Input for deleting an Azure Cloud Account."
input DeleteAzureCloudAccountInput {
    "Rubrik IDs of the subscriptions to be deleted."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input for deleting an Azure Cloud Account without OAuth."
input DeleteAzureCloudAccountWithoutOAuthInput {
    "Rubrik IDs of the subscriptions to be deleted."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
}

"DeleteAzureClusterInput for Azure account."
input DeleteAzureClusterInput {
    cloudAccountId: String = ""
    "Name of Azure cluster."
    clusterName: String = ""
    clusterUuid: String = ""
    "Storage container in Azure."
    containerName: String = ""
    "If cluster is ES or disk based."
    isEsType: Boolean = false
    "Is it an existing customer container or a new container created by ccprovision?"
    isNewContainer: Boolean = false
    "Azure network resource group name."
    networkResourceGroup: String = ""
    "Number of nodes in the existing cluster."
    numNodes: Int = 0
    "Azure resource group name."
    resourceGroupName: String = ""
    "Storage account in Azure."
    storageAccount: String = ""
    "Storage resource group in Azure."
    storageResourceGroup: String = ""
}

"Input object carrying details of the db2 instance to be deleted."
input DeleteDb2InstanceInput {
    "Required. The ID of the Db2 Instance."
    id: String!
}

input DeleteMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Name of the Mosaic store to be deleted."
    storeName: String!
}

input DeleteMssqlDbSnapshotsInput {
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input DeleteNasSystemInput {
    "Required. ID of the NAS system to delete."
    id: String!
}

input DeleteSnapMirrorCloudInput {
    "Required. Provide the ID of a SnapMirror Cloud protected object to delete."
    id: String!
    "Flag to indicate whether to preserve snapshots of the SnapMirror Cloud protected object or delete them. The default is to preserve the snapshots."
    preserveSnapshots: Boolean
}

input DeleteSnapMirrorCloudRelationshipInput {
    "Required. Managed ID of the SnapMirrorCloud."
    id: String!
}

"Input required for resetting TOTP for multiple users."
input DeleteTotpConfigsInput {
    "Users for whom TOTP is reset."
    userIds: [String!] = []
}

input DeleteVolumeGroupSnapshotMountInput {
    "Required. ID of the mount to remove."
    id: String!
}

"An object providing the parameters for the recovery of a snapshot and a next snapshot delta."
input DeltaRecoveryInput {
    "The delta type options which the files will be filtered on."
    deltaTypeFilter: [DeltaTypeEnum!]!
    "The fid of the next snapshot to perform the delta on."
    nextSnapshotFid: UUID!
}

"""

Supported in v5.3+
"""
input DisablePerLocationPauseInput {
    """

    Required. Supported in v5.3+
    Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated.
    """
    shouldSkipOldSnapshots: Boolean!
    """

    Required. Supported in v5.3+
    Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster.
    """
    sourceClusterUuids: [String!]!
}

input DisablePerLocationPauseInputVariable {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    """

    Required. A configuration value that specifies which source clusters resume replication. Snapshots taken before or during the replication pause can be skipped.
    """
    disablePerLocationPause: DisablePerLocationPauseInput!
}

input DiskIdToIsExcluded {
    diskId: UUID!
    isExcluded: Boolean!
}

"Contains information about the snapshots to be removed from legal hold."
input DissolveLegalHoldInput {
    "List of snapshot IDs."
    snapshotIds: [String!] = []
}

"Filters for cdm upgrades page for pdf generation"
input DownloadCdmUpgradesPdfFiltersInput {
    clusterLocations: [String!] = []
    clusterNames: [String!] = []
    clusterTypes: [String!] = []
    clusterUuids: [String!] = []
    downloadedVersions: [String!] = []
    installedVersions: [String!] = []
    prechecksStatus: [String!] = []
    upgradeJobStatus: [String!] = []
    versionStatus: [String!] = []
}

input DownloadFromArchiveInput {
    "Required. Configuration for the archive download request."
    config: MssqlDownloadFromArchiveConfigInput!
    "Required. ID of the Microsoft SQL database."
    id: String!
}

"""

Supported in v5.2+
"""
input DownloadMssqlBackupFilesByIdJobConfigInput {
    """

    Required. Supported in v5.2+
    A list of snapshots and logs to download.
    """
    items: [String!]!
    """

    Supported in v5.2+
    v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
    v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
}

input DownloadObjectFilesCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadObjectsListCsvInput {
    "The day (YYYY-MM-DD) to get the latest snapshots of."
    day: String!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadResultsCsvFiltersInput {
    analyzerGroupIds: [String!] = []
    browseDirectorySnappablePath: SnappablePathInput
    fileType: FileCountTypeEnum!
    listFileResultsSearchText: String = ""
    listFileResultsSnappablePaths: [SnappablePathInput!] = []
    listFileResultsSnappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

input DownloadUserActivityCsvInput {
    "The day, (YYYY-MM-DD), from which to collect user activity."
    day: String!
    "The filters to apply on the list of activities."
    filters: ListObjectFilesFiltersInput!
    "The user's IANA timezone."
    timezone: String!
}

input DownloadUserFileActivityCsvInput {
    "The path to get all activity from."
    nativePath: String!
    "The path's corresponding snapshot."
    snapshot: ResourceInput!
    "The day (YYYY-MM-DD) from which to collect all activity after."
    startDay: String!
    "The user's IANA timezone."
    timezone: String!
    "The user to fetch activity for."
    userId: String!
}

"Struct representing the onedrive contents to be restored"
input DriveRestoreConfig {
    FilesToRestore: [FileInfo!]!
    FoldersToRestore: [FolderInfo!]!
    RestoreFolderPath: String!
}

"Filter to return objects whose effective SLA ID is one of the given SLA IDs"
input EffectiveSlaFilter {
    effectiveSlaIds: [String!]!
}

"Email address and to/from/both"
input EmailAddressFilter {
    emailAddress: String = ""
    emailAddressType: EmailAddressFilterTypeEnum = TO
}

"""

Supported in v5.3+
"""
input EnablePerLocationPauseInput {
    """

    Required. Supported in v5.3+
    Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing.
    """
    shouldCancelImmediately: Boolean!
    """

    Required. Supported in v5.3+
    Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster.
    """
    sourceClusterUuids: [String!]!
}

input EnablePerLocationPauseInputVariable {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    """

    Required. A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately or be allowed to finish.
    """
    enablePerLocationPause: EnablePerLocationPauseInput!
}

"Event digest config to specify events criteria."
input EventDigestConfig {
    activitySeverity: [ActivitySeverityEnum!]
    activityStatus: [ActivityStatusEnum!]
    "Activity type to filter for emails. Valid types are Storage, Classification, LegalHold, HypervScvmm, Hdfs, RadarAnalysis, VolumeGroup, Instantiate, HypervServer, Configuration, Upgrade, CloudNativeVm, StorageArray, Connection, Conversion, AuthDomain, UnknownEventType, CloudNativeVirtualMachine, Discovery, Replication, Maintenance, Support, Fileset, LocalRecovery, System, Failover, StormResource, Diagnostic, Vcd, Anomaly, Archive, CloudNativeSource, HostEvent, AwsEvent, ResourceOperations, Backup, Sync, Hardware, TestFailover, Recovery, Download, EmbeddedEvent, NutanixCluster, VCenter, Index, and OTHER_FILTER_ITEM"
    activityType: [String!]
    clusters: [String!]
    objectType: [ActivityObjectTypeEnum!]
}

"Input to mark volumes to be excluded for EC2 snapshot."
input ExcludeAwsNativeEbsVolumeFromSnapshotInput {
    "Rubrik ID of EC2 instance."
    awsNativeEc2InstanceId: UUID!
    "List of maps of Rubrik IDs to excluded status of volumes."
    volumeIdExclusions: [VolumeIdExclusion!]!
}

"Inputs to trigger Exclusion of Azure Native Managed Disk From Snapshot."
input ExcludeAzureNativeManagedDisksFromSnapshotInput {
    "A list that specifies which disks are excluded from snapshots of the virtual machine."
    managedDiskExclusions: [ManagedDiskExclusion!]!
    "Rubrik ID of the virtual machine (VM)."
    virtualMachineRubrikId: UUID!
}

"existing compute config"
input ExistingComputeConfig {
    subnetId: String = ""
    vnetId: String = ""
}

"existing storage account config"
input ExistingStorageAccountConfig {
    id: String = ""
}

"""

Supported in v5.0+
"""
input ExportMssqlDbJobConfigInput {
    """

    Supported in v5.0+
    A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.
    """
    allowOverwrite: Boolean
    """

    Supported in v5.0+
    A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
    """
    finishRecovery: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to copy data to the target system.
    """
    maxDataStreams: Int
    """

    Required. Supported in v5.0+
    """
    recoveryPoint: MssqlRecoveryPointInput!
    """

    Supported in v5.0+
    The target path to store all data files.
    """
    targetDataFilePath: String
    """

    Required. Supported in v5.0+
    Name of the new database.
    """
    targetDatabaseName: String!
    """

    Supported in v5.0+
    One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
    """
    targetFilePaths: [MssqlDbFileExportPathInput!] = []
    """

    Required. Supported in v5.0+
    ID of the Microsoft SQL instance for the new database.
    """
    targetInstanceId: String!
    """

    Supported in v5.0+
    The target path to store all log files.
    """
    targetLogFilePath: String
}

"Config for O365 mailbox export"
input ExportO365MailboxInput {
    "Configuration for restore job."
    exportConfigs: [RestoreObjectConfig!]!
    "Polaris id of the source mailbox."
    fromMailboxUUID: UUID!
    "Polaris ID of O365 subscription."
    orgUuid: UUID
    "Polaris id of restoring snapshot."
    snapshotUUID: UUID
    "Polaris id of the destination mailbox."
    toMailboxUUID: UUID!
}

"""

Supported in v5.0+
"""
input ExportPathPairInput {
    """

    Required. Supported in v5.0+
    Destination path of export files.
    """
    dstPath: String!
    """

    Required. Supported in v5.0+
    Original file path.
    """
    srcPath: String!
}

"""

Supported in v6.0+
"""
input ExportSnapshotJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for snapshot export.
    """
    config: ExportSnapshotJobConfigV2Input!
    """

    Supported in v6.0+
    Exports the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Exports the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to export. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot needs to be exported.
    """
    vmId: String!
    """

    Supported in v6.0+
    Prefix to be added to the name of the exported virtual machine.
    """
    vmNamePrefix: String
}

"""

Supported in v5.1+
"""
input ExportSnapshotJobConfigV2Input {
    """

    Supported in v5.2+
    ID of the cluster to export the new virtual machine to. virtual machine.
    """
    clusterId: String
    """

    Required. Supported in v5.1+
    ID of the datastore to assign to the exported virtual machine.
    """
    datastoreId: String!
    """

    Supported in v5.1+
    ID of the ESXi host to export the new virtual machine to.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v5.2+
    ID of the resource pool to export the new virtual machine to.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    The job recovers any tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is 'true', the registration is removed from the vCenter Server. When this value is 'false', the registration is kept on the vCenter Server. The default is 'false'.
    """
    unregisterVm: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
}

"""

Supported in v5.2+
"""
input FailoverClusterAppConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
    """
    failoverClusterAppSource: FailoverClusterAppSourceInput!
    """

    Required. Supported in v5.2+
    Cluster ID of the failover cluster app.
    """
    failoverClusterId: String!
    failoverClusterType: FailoverClusterTypeEnum!
    """

    Required. Supported in v5.2+
    Name of the failover cluster app.
    """
    name: String!
}

"""

Supported in v5.2+
"""
input FailoverClusterAppSourceInput {
    """

    Supported in v5.2+
    Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
    """
    nodeOrders: [FailoverClusterNodeOrderInput!] = []
    "Virtual IP addresses of the failover cluster."
    vips: [String!] = []
    """

    Supported in v5.3+
    Virtual IP addresses of the failover cluster.
    """
    virtualIps: [String!] = []
}

"""

Supported in v5.2+
"""
input FailoverClusterConfigInput {
    """

    Supported in v5.2+
    ID of the SLA Domain that is assigned to the specified failover cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    """

    Required. Supported in v5.2+
    Managed ID's of Hosts of the failover cluster.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.2+
    Name of the failover cluster.
    """
    name: String!
}

"""

Supported in v5.2+
"""
input FailoverClusterNodeOrderInput {
    """

    Required. Supported in v5.2+
    ID of the failover cluster node.
    """
    nodeId: String!
    """

    Supported in v5.3+
    The name of the failover cluster node.
    """
    nodeName: String
    """

    Required. Supported in v5.2+
    An integer that specifies the place occupied by this node in the failover cluster app backup order.
    """
    order: Int!
}

"Filter appflows failover jobs"
input FailoverFilterInput {
    failoverStatus: [FailoverStatusEnum!]
    failoverType: FailoverTypeEnum
    source: [String!]
    targetSite: [String!]
    time_gt: DateTime
    time_lt: DateTime
}

"A contextual value affecting the evaluation of a feature flag"
input FeatureFlagContextField {
    "Key corresponding to this field"
    key: String!
    "The value of this field. Can be any GraphQL scalar."
    value: AnyScalar!
}

input FederatedLoginStatusInput {
    "Enable or Disable federated login."
    enabled: Boolean!
    "Enable or Disable federated login inventory card."
    inventoryCardEnabled: Boolean!
}

"Sorts to apply when listing a file's user activities."
input FileActivitiesSort {
    "The field to sort on."
    sortBy: FileActivitiesSortBy = USER_NAME
    "The direction to sort on."
    sortOrder: DataGovSortOrderEnum = ASC
}

"Struct representing the Onedrive file to be restored"
input FileInfo {
    ChannelInfo: TeamsChannelInfo
    FileID: String!
    FileName: String!
    FileSnapshotsToRestore: [FileSnapshotInfo!]!
}

input FileResultSortInput {
    analyzerGroupId: String = ""
    sortBy: FileResultSortByEnum = HITS
    sortOrder: DataGovSortOrderEnum = ASC
}

"Struct representing the Onedrive file snapshot to be restored"
input FileSnapshotInfo {
    FileSize: Long!
    SnapshotID: UUID!
    SnapshotNum: Int!
}

"""

Supported in v5.0+
"""
input FilesetArraySpecInput {
    """

    Supported in v5.0+
    ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
    """
    proxyHostId: String
}

"""

Supported in v5.0+
"""
input FilesetCreateInput {
    """

    Supported in v5.0+
    """
    arraySpec: FilesetArraySpecInput
    """

    Supported in v5.1+
    A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
    """
    enableHardlinkSupport: Boolean
    """

    Supported in v5.1+
    A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
    """
    enableSymlinkResolution: Boolean
    """

    Supported in v5.2+
    ID of the failover cluster app.
    """
    failoverClusterAppId: String
    """

    Supported in v5.0+
    """
    hostId: String
    """

    Supported in v5.0+
    v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
    v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
    """
    isPassthrough: Boolean
    """

    Supported in v5.0+
    """
    shareId: String
    """

    Supported in v5.3+
    Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
    """
    snapMirrorLabelForFullBackup: String
    """

    Supported in v5.3+
    Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
    """
    snapMirrorLabelForIncrementalBackup: String
    """

    Required. Supported in v5.0+
    """
    templateId: String!
}

"""

Supported in v5.0+
"""
input FilesetDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    """
    sourceDirs: [String!]!
}

"""

Supported in v5.0+
"""
input FilesetExportFilesJobConfigInput {
    """

    Required. Supported in v5.0+
    Pairs of source path and destination path.
    """
    exportPathPairs: [FilesetExportPathPairInput!]!
    """

    Required. Supported in v5.0+
    Host ID.
    """
    hostId: String!
    """

    Supported in v5.0+
    Optional Boolean value that determines whether or not to ignore errors during an export. By default, this value is set to False. Set this value to True to ignore errors.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Network share ID.
    """
    shareId: String
}

"""

Supported in v5.0+
"""
input FilesetExportPathPairInput {
    exportPathPair: ExportPathPairInput
}

"""

Supported in v5.0+
"""
input FilesetOptionsInput {
    """

    Supported in v5.0+
    Include or exclude hidden folders inside locally-mounted remote file systems from backups.
    """
    allowBackupHiddenFoldersInNetworkMounts: Boolean
    """

    Supported in v5.0+
    Include or exclude locally-mounted remote file systems from backups.
    """
    allowBackupNetworkMounts: Boolean
    """

    Supported in v5.0+
    Use VSS during Windows backups.
    """
    useWindowsVss: Boolean
}

"""

Supported in v5.0+
"""
input FilesetRestoreFilesJobConfigInput {
    """

    Supported in v5.0+
    Optional field to determine if we should ignore single error during restore. Default value is false.
    """
    ignoreErrors: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Absolute file path and restore path if not restored back to itself
    v6.0+: Absolute file path.. and restore path if not restored back to itself.
    """
    restoreConfig: [FilesetRestorePathPairInput!]!
}

"""

Supported in v5.0+
"""
input FilesetRestorePathPairInput {
    restorePathPair: RestorePathPairInput
}

"""

Supported in v5.0+
"""
input FilesetTemplateCreateInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!] = []
    """

    Supported in v5.0+
    """
    excludes: [String!] = []
    filesetOptions: FilesetOptionsInput
    """

    Required. Supported in v5.0+
    """
    includes: [String!]!
    """

    Supported in v5.0+
    Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
    """
    isArrayEnabled: Boolean
    """

    Required. Supported in v5.0+
    """
    name: String!
    operatingSystemType: FilesetTemplateCreateOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplateCreateShareTypeEnum
}

"""

Supported in v5.0+
"""
input FilesetTemplatePatchInput {
    """

    Supported in v5.0+
    Action taken if script fails. Options are "abort", "continue".
    """
    backupScriptErrorHandling: String
    """

    Supported in v5.0+
    Number of seconds after which the script is killed if it has not completed execution.
    """
    backupScriptTimeout: Long
    """

    Supported in v5.0+
    """
    exceptions: [String!] = []
    """

    Supported in v5.0+
    """
    excludes: [String!] = []
    filesetOptions: FilesetOptionsInput
    """

    Required. Supported in v5.0+
    """
    id: String!
    """

    Supported in v5.0+
    """
    includes: [String!] = []
    """

    Supported in v5.0+
    """
    name: String
    operatingSystemType: FilesetTemplatePatchOperatingSystemTypeEnum
    """

    Supported in v5.0+
    Script to run after backup of this Fileset ends.
    """
    postBackupScript: String
    """

    Supported in v5.0+
    Script to run before backup of this Fileset starts.
    """
    preBackupScript: String
    shareType: FilesetTemplatePatchShareTypeEnum
}

"Filter"
input Filter {
    awsNativeProtectionFeatureNames: [AwsNativeProtectionFeatureEnum!] = []
    field: HierarchyFilterField = IS_ARCHIVED
    isNegative: Boolean = false
    isSlowSearchEnabled: Boolean = false
    objectTypeFilterParams: [ManagedObjectType!] = []
    tagFilterParams: [TagFilterParams!] = []
    texts: [String!] = []
}

"Input to process and finalize deletion of AWS cloud account."
input FinalizeAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeatureEnum!
}

input FinalizeAwsCloudAccountProtectionInput {
    "Action to be performed with cloud account."
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "List of AWS accounts."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of AWS regions for the cloud account."
    awsRegions: [AwsCloudAccountRegionEnum!]
    "External ID of the IAM role trust policy for the cloud account."
    externalId: String!
    "List of feature types to be protected for the cloud account."
    featureVersion: [AwsCloudAccountFeatureVersionInput!]!
    "List of features for native protection of cloud account."
    features: [CloudAccountFeatureEnum!]!
    "Name of the CloudFormation stack to be created."
    stackName: String
    "Stackset name of the CloudFormation stack to be created."
    stackSetName: String
}

"Struct representing the Onedrive folder to be restored"
input FolderInfo {
    ChannelInfo: TeamsChannelInfo
    FolderID: String!
    FolderName: String!
    FolderSize: Long!
    SnapshotID: UUID!
    SnapshotNum: Int!
}

"Filters for list of GCP disks."
input GcpNativeDiskFilters {
    diskTypeFilter: GcpNativeDiskTypeFilter
    effectiveSlaFilter: EffectiveSlaFilter
    labelFilter: GcpNativeLabelFilter
    locationFilter: GcpNativeDiskLocationFilter
    nameOrIDSubstringFilter: GcpNativeDiskNameOrIDSubstringFilter
    projectFilter: GcpNativeDiskProjectFilter
    relicFilter: RelicFilter
}

"Filter to return GCP disks which have location in the given list of locations. Location can be a zone or a region."
input GcpNativeDiskLocationFilter {
    locations: [String!]!
}

"Filter to return GCP disks with a given substring in their name or ID."
input GcpNativeDiskNameOrIDSubstringFilter {
    nameOrIDSubstring: String!
}

"Filter to return GCP disks which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeDiskProjectFilter {
    projectIds: [String!]!
}

"Filter to return GCP disks which have disk type in the given list of disk types."
input GcpNativeDiskTypeFilter {
    diskTypes: [String!]!
}

"Filters for list of GCP GCE instances."
input GcpNativeGceInstanceFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    labelFilter: GcpNativeLabelFilter
    machineTypeFilter: GcpNativeMachineTypeFilter
    nameOrIDSubstringFilter: GcpNativeInstanceNameOrIDSubstringFilter
    networkFilter: GcpNativeNetworkFilter
    projectFilter: GcpNativeProjectFilter
    regionFilter: GcpNativeRegionFilter
    relicFilter: RelicFilter
}

"Filter to return GCP GCE instances with a given substring in their name or ID."
input GcpNativeInstanceNameOrIDSubstringFilter {
    nameOrIDSubstring: String!
}

"Filter to return GCP objects which have at least one label in the given list of labels."
input GcpNativeLabelFilter {
    labelFilterParams: [LabelFilterParams!]!
}

"Filter to return GCP GCE instances which have instance type in the given list of machine types."
input GcpNativeMachineTypeFilter {
    machineTypes: [String!]!
}

"Filter to return GCP GCE instances which have network name in the given list of network names."
input GcpNativeNetworkFilter {
    networkNames: [String!]!
}

"Filter to return GCP objects which have project rubrik ID in the given list of project rubrik IDs."
input GcpNativeProjectFilter {
    projectIds: [String!]!
}

"Filters for list of GCP projects."
input GcpNativeProjectFilters {
    effectiveSlaFilter: EffectiveSlaFilter
    idSubstringFilter: GcpNativeProjectIdSubstringFilter
    nameOrNumberSubstringFilter: GcpNativeProjectNameOrNumberSubstringFilter
}

"Filter to return GCP projects with the given string in their project ID."
input GcpNativeProjectIdSubstringFilter {
    idSubstring: String!
}

"Filter to return GCP projects with a given substring in their name or number."
input GcpNativeProjectNameOrNumberSubstringFilter {
    nameOrNumberSubstring: String!
}

"Filter to return GCP objects which have region in the given list of regions."
input GcpNativeRegionFilter {
    regions: [String!]!
}

input GcpTargetCreateInput {
    archivalProxySettings: ProxySettingsInput
    bucket: String!
    clusterUuid: UUID!
    encryptionPassword: String!
    name: String!
    region: GcpRegionEnum!
    serviceAccountJsonKey: String!
    storageClass: GcpStorageClassTypeEnum!
}

input GcpTargetEditInput {
    archivalProxySettings: ProxySettingsInput
    bucket: String
    encryptionPassword: String
    id: UUID!
    name: String
    region: GcpRegionEnum
    serviceAccountJsonKey: String
    storageClass: GcpStorageClassTypeEnum
}

input GenericTimeRangeInput {
    absoluteTimeRange: TimeRangeInput
    relativeTimeRange: RelativeTimeRangeInput
}

input GetCompatibleMssqlInstancesV1Input {
    "Required. ID of the Microsoft SQL database."
    id: String!
    "Time, in ISO8601 format, to recover to. For example \"2016-01-01T01:23:45.678Z\". If this is not specified, the latest recoverable time is used."
    recoveryTime: DateTime
    recoveryType: V1GetCompatibleMssqlInstancesV1RequestRecoveryTypeEnum!
}

input GetLambdaDetectMalwareRequestStatusInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetLambdaDetectMalwareResultInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetLambdaMalwareScanDetailInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. ID of an asynchronous malware detection."
    id: String!
}

input GetMissedMssqlDbSnapshotsInput {
    "Filter snapshots to those missed on or after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter snapshots to those missed on or before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GetMosaicRecoverableRangeInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Request Object with details of Tables whose recovery range is required."
    recoveryRangeRequestData: MosaicRecoverableRangeRequestInput!
}

input GetMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
}

input GetMosaicTableSchemaInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Schema request Object with details of schema which needs to be retrieved."
    schemaRequestData: MosaicGetSchemaRequestInput!
}

input GetMosaicVersionInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Version filters"
    versionData: VersionInput!
}

input GetMssqlDbMissedRecoverableRangesInput {
    "Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    afterTime: DateTime
    "Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GetMssqlDbRecoverableRangesInput {
    "Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678Z\"."
    afterTime: DateTime
    "Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\"."
    beforeTime: DateTime
    "Required. ID of the Microsoft SQL database."
    id: String!
}

input GlobalSearchApiQueryInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Global search query."
    query: GlobalSearchApiRequestInput!
}

"""

Supported in v5.1+
"""
input GlobalSearchApiRequestInput {
    """

    Required. Supported in v5.1+
    Regex to match.
    """
    regex: String!
    """

    Required. Supported in v5.1+
    Managed IDs of snappables to search across.
    """
    snappableIds: [String!]!
}

input GlobalSlaCreateRequest {
    archivalSpecInput: ArchivalSpecInput
    archivalSpecInputs: [ArchivalSpecInput!] = []
    backupWindows: [BackupWindowInput!] = []
    description: String = ""
    firstFullBackupWindows: [BackupWindowInput!] = []
    localRetentionLimit: SlaDurationInput
    logConfig: LogConfig
    name: String = ""
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    objectTypeList: [SLAObjectTypeEnum!] = []
    replicationSpecInput: ReplicationSpecInput
    replicationSpecV2List: [ReplicationSpecV2Input!] = []
    snapshotSchedule: GlobalSnapshotScheduleInput
}

input GlobalSlaEditRequest {
    archivalSpecInput: ArchivalSpecInput
    archivalSpecInputs: [ArchivalSpecInput!] = []
    backupWindows: [BackupWindowInput!] = []
    description: String = ""
    firstFullBackupWindows: [BackupWindowInput!] = []
    id: String = ""
    localRetentionLimit: SlaDurationInput
    logConfig: LogConfig
    name: String = ""
    objectSpecificConfigsInput: ObjectSpecificConfigsInput
    objectTypeList: [SLAObjectTypeEnum!] = []
    replicationSpecInput: ReplicationSpecInput
    replicationSpecV2List: [ReplicationSpecV2Input!] = []
    shouldApplyToExistingSnapshots: ShouldApplyToExistingSnapshots
    shouldApplyToNonPolicySnapshots: ShouldApplyToNonPolicySnapshots
    snapshotSchedule: GlobalSnapshotScheduleInput
    stateVersion: Long = 0
}

input GlobalSlaFilterInput {
    field: GlobalSlaQueryFilterInputField = NAME
    objectTypeList: [SLAObjectTypeEnum!] = []
    text: String = ""
}

input GlobalSnapshotScheduleInput {
    daily: DailySnapshotScheduleInput
    hourly: HourlySnapshotScheduleInput
    minute: MinuteSnapshotScheduleInput
    monthly: MonthlySnapshotScheduleInput
    quarterly: QuarterlySnapshotScheduleInput
    weekly: WeeklySnapshotScheduleInput
    yearly: YearlySnapshotScheduleInput
}

"group config"
input GroupConfig {
    name: String = ""
}

"""

Supported in v5.2+
"""
input HdfsBaseConfigInput {
    """

    Supported in v5.2+
    API token to access Hdfs.
    """
    apiToken: String
    """

    Required. Supported in v5.2+
    List of Hdfs Namenode Hosts.
    """
    hosts: [HdfsHostInput!]!
    """

    Supported in v5.2+
    Ticket Cache Path of Kerberos Ticket.
    """
    kerberosTicket: String
    """

    Supported in v5.2+
    Logical name for nameservice for Hdfs HA.
    """
    nameservices: String
    """

    Supported in v5.2+
    Username to access Hdfs API.
    """
    username: String
}

"""

Supported in v5.2+
"""
input HdfsConfigInput {
    hdfsBaseConfig: HdfsBaseConfigInput
}

"""

Supported in v5.2+
"""
input HdfsHostInput {
    """

    Required. Supported in v5.2+
    Hostname or Ip of Namenode.
    """
    hostname: String!
    """

    Required. Supported in v5.2+
    Port number of Namenode.
    """
    port: Int!
}

"Contains configuration of the legal hold to be placed."
input HoldConfig {
    "Boolean which denotes whether a snapshot is to be held in place."
    shouldHoldInPlace: Boolean = false
}

"""

Supported in v5.0+
"""
input HostRegisterInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.0+
    """
    hasAgent: Boolean
    """

    Supported in v5.2+
    """
    hdfsConfig: HdfsConfigInput
    """

    Required. Supported in v5.0+
    """
    hostname: String!
    """

    Supported in v5.2+
    A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration.
    """
    isOracleHost: Boolean
    """

    Supported in v5.0+
    """
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
    """

    Supported in v5.0+
    The ID of the organization to which the host is assigned.
    """
    organizationId: String
}

"""

Supported in v5.0+
"""
input HostUpdateIdInput {
    """

    Required. Supported in v5.0+
    ID of the host.
    """
    hostId: String!
    """

    Required. Supported in v5.0+
    """
    updateProperties: HostUpdateInput!
}

"""

Supported in v5.0+
"""
input HostUpdateInput {
    """

    Supported in v5.1+
    A user-specified string that returns this host in searches.
    """
    alias: String
    """

    Supported in v5.0+
    """
    compressionEnabled: Boolean
    """

    Supported in v5.2+
    """
    hdfsConfig: HdfsConfigInput
    """

    Supported in v5.0+
    When VFD is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to Disabled.
    """
    hostVfdDriverInstalled: Boolean
    hostVfdEnabled: HostVfdInstallConfigEnum
    """

    Supported in v5.0+
    """
    hostname: String
    """

    Supported in v5.2+
    A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
    """
    isOracleHost: Boolean
    """

    Supported in v5.0+
    When CBT is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to Disabled.
    """
    mssqlCbtDriverInstalled: Boolean
    mssqlCbtEnabled: MssqlCbtStatusTypeEnum
    """

    Supported in v5.0+
    """
    nasConfig: NasConfigInput
    """

    Supported in v5.0+
    Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
    """
    oracleQueryUser: String
    """

    Supported in v5.0+
    v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v5.1-v5.3: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    v6.0+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
    """
    oracleSysDbaUser: String
}

"""

Supported in v5.0+
"""
input HostVfdInstallRequestInput {
    """

    Required. Supported in v5.0+
    Ids of host on which to install/uninstall VFD.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.0+
    """
    install: Boolean!
}

input HourlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

"""

Supported in v6.0+
"""
input InPlaceRecoveryJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for in-place recovery.
    """
    config: InPlaceRecoveryJobConfigV2Input!
    """

    Supported in v6.0+
    Runs in-place recovery with the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Runs in-plance recovery with the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to use for in-place recovery. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine to be recovered.
    """
    vmId: String!
}

"""

Supported in v5.3+
"""
input InPlaceRecoveryJobConfigV2Input {
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v5.3+
    Indicates whether to keeep the vSphere snapshot on the vCenter Server after the in-place recovery or not. Use `true` to keep the snapshot after in-place recovery. Use `false` to delete the snapshot after in-place recovery. The default is `false`.
    """
    shouldKeepVsphereSnapshotAfterRecovery: Boolean
}

input IndicatorOfCompromiseInput {
    iocType: IndicatorOfCompromiseTypeEnum!
    "Required. Type specific payload."
    iocValue: String!
}

"Input for initiating authentication of the Azure Cloud Accounts."
input InitiateAzureCloudAccountOAuthInput {
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudTypeEnum = AZUREPUBLICCLOUD
    "Domain name of the Azure Tenant."
    tenantDomainName: String
}

input InstantRecoveryJobConfig {
    baseConfig: AppBlueprintRestoreSnapshotJobConfigBase
    childrenToRestore: [AppBlueprintChildSnappableInstantRecoverySpec!] = []
    shouldRemoveChildrenFromAppBlueprint: Boolean = false
    shouldRemoveChildrenFromOtherAppBlueprints: Boolean = false
}

"""

Supported in v6.0+
"""
input InstantRecoveryJobConfigForBatchInput {
    """

    Required. Supported in v6.0+
    Configuration for snapshot export.
    """
    config: InstantRecoveryJobConfigV2Input!
    """

    Supported in v6.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    The ID of the snapshot to mount. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot needs to be mounted.
    """
    vmId: String!
}

"""

Supported in v5.1+
"""
input InstantRecoveryJobConfigV2Input {
    """

    Supported in v6.0+
    ID of the compute cluster where the new virtual machine will be mounted.
    """
    clusterId: String
    """

    Supported in v5.1+
    ID of the ESXi host to use for Instant Recovery.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    """

    Supported in v5.1+
    A Boolean value that determines whether the MOID of the source virtual machine is preserved in a restore operation. When this value is 'true', the MOID of the source is preserved. When this value is 'false', the restored virtual machine is assigned a new MOID.
    """
    preserveMoid: Boolean
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v6.0+
    ID of the resource pool where the new virtual machine will be mounted.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    A Boolean value that determines whether the job recovers the tags assigned to the virtual machine. When this value is 'true', the job recovers the tags. When this value is 'false', the job does not recover the tags.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    The preferred VLAN ID used by the VLAN ESXi host to mount the datastore.
    """
    vlan: Int
}

input InterfaceCidrInput {
    cidr: String = ""
    interfaceType: InterfaceTypeEnum = UNKNOWN_TYPE
    selected: Boolean = false
}

"Config of the k8s cluster to onboard."
input K8sClusterCreateInput {
    "The ID of the CDM cluster for ON_PREM k8s clusters."
    cdmClusterId: UUID
    "List of host IPs/hostnames of the k8s nodes."
    hostList: [String!]!
    "Name of the k8s cluster."
    name: String!
    "Port on the k8s node for the kupr Ingress Controller."
    port: Int!
    "Ports in the range of node port service range of the Kubernetes cluster."
    rbsPortRanges: [PortRange!]!
    "KuprClusterType of the k8s cluster."
    type: K8sClusterProtoType!
}

"Config of the kupr cluster to refresh."
input K8sClusterRefreshInput {
    "The ID of the kupr cluster to be refreshed."
    kuprClusterID: UUID!
}

"Config of the Kupr namespace snapshot to be restored and the target details."
input K8sNamespaceRestore {
    "Filter resources based on labels."
    labelSelector: LabelSelector
    "The UUID of the kupr namepspace snapshot to be restored."
    snapshotUUID: UUID!
    "The UUID of the target cluster to restore the namespace snapshot to."
    targetClusterUUID: UUID!
    "The name of the target namespace to restore the namespace snapshot to."
    targetNamespaceName: String!
}

"Config of the Kupr namespace to snapshot."
input K8sNamespaceSnapshot {
    "The ID of the kupr namespace managed object to snapshot."
    namespaceId: UUID!
    "The SLA ID of the on demand snapshot request."
    onDemandSnapshotSlaId: String
}

"Label filter parameters for GCP objects."
input LabelFilterParams {
    filterType: GcpNativeLabelFilterTypeEnum!
    labelKey: String!
    labelValue: String!
}

"Label query over a set of K8's resources."
input LabelSelector {
    "List of label selector requirements. The requirements are ANDed."
    matchExpressions: [LabelSelectorRequirement!] = []
}

"Selector that contains values, a key, and an operator that relates the key and values."
input LabelSelectorRequirement {
    "Label key that the selector applies to."
    key: String = ""
    "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
    operator: String = ""
    "Array of string values."
    values: [String!] = []
}

"DataType representing label key-value pair"
input LabelType {
    labelKey: String!
    labelValue: String!
    matchAllValues: Boolean!
}

"LDAP Server"
input LdapServerInput {
    "Hostname for the LDAP server."
    hostname: String = ""
    "Port used by the LDAP server."
    port: Int = 0
    "Whether the LDAP server uses TLS."
    useTls: Boolean = false
}

"""

Supported in v5.2+
"""
input LegalHoldDownloadConfigInput {
    """

    Required. Supported in v5.2+
    v5.2: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
    v5.3+: Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.
    """
    isLegalHoldDownload: Boolean!
}

input ListAccessGroupsFilterInput {
    groupName: String = ""
    userId: String = ""
}

input ListAccessUsersFilterInput {
    groupsIds: [String!] = []
    search: String = ""
    timeRange: UserTimeRangeInput!
}

input ListAccessUsersSortInput {
    sortBy: ListAccessUsersSortEnum = USERNAME
    sortOrder: DataGovSortOrderEnum = ASC
}

input ListFileActivitiesInput {
    "The corresponding snappable's FID."
    snappableFid: String!
    "The datetime to collect user activity from."
    startDateTime: String!
    "The standardized path to fetch user activities for."
    stdPath: String!
    "The user's IANA timezone."
    timezone: String!
}

input ListFileResultFiltersInput {
    analyzerGroupIds: [String!] = []
    fileType: FileCountTypeEnum!
    searchText: String = ""
    snappablePaths: [SnappablePathInput!] = []
    snappableTypes: [String!] = []
    whitelistEnabled: Boolean = false
}

input ListMalwareScansInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
}

input ListObjectFilesFiltersInput {
    accessTypes: [AccessTypeEnum!] = []
    activityTypes: [ActivityAccessTypeEnum!] = []
    analyzerGroupIds: [String!] = []
    clusterIds: [String!] = []
    fileCountTypes: [FileCountTypeEnum!] = []
    inodeTypes: [InodeTypeEnum!] = []
    objectIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    openAccessTypes: [OpenAccessTypeEnum!] = []
    pathPrefix: String = ""
    searchText: String = ""
    snappableTypes: [String!] = []
    stalenessTypes: [StalenessTypeEnum!] = []
    whitelistEnabled: Boolean = false
}

"Location information."
input LocationInfo {
    "Id of the location."
    locationId: String = ""
    "Location type: CDM, AZURE, AWS, GCP."
    locationType: LocationType = UNKNOWN_TYPE
}

input LogConfig {
    slaLogFrequencyConfig: SlaLogFrequencyConfig
}

"""

Supported in v5.0+
"""
input LsnRecoveryPointInput {
    """

    Required. Supported in v5.0+
    LSN of the recovery point.
    """
    lsn: String!
    """

    Supported in v5.0+
    Recovery fork GUID of the recovery point. If not provided, the recovery fork GUID of the latest snapshot is used.
    """
    recoveryForkGuid: String
}

"Type representing the mailbox contents to be restored."
input MailboxRestoreConfig {
    RestoreConfigs: [RestoreObjectConfig!]!
    SnapshotUUID: UUID
}

input MalwareScanConfigInput {
    "Criteria to restrict files to scan."
    fileScanCriteria: MalwareScanFileCriteriaInput
    "Required. List of IOCs to scan for."
    indicatorsOfCompromise: [IndicatorOfCompromiseInput!]!
    "Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one."
    maxMatchesPerSnapshot: Int
    "Required. Snappable IDs to scan for malware."
    objectIds: [String!]!
    "Additional information required for files with malware matches."
    requestedMatchDetails: RequestedMatchDetailsInput
    "Limit which snapshots to include in the malware scan."
    snapshotScanLimit: MalwareScanSnapshotLimitInput
}

input MalwareScanFileCriteriaInput {
    "Specify the smallest and largest files to scan."
    fileSizeLimits: MalwareScanFileSizeLimitsInput
    "Please see /fileset_template for a detailed description of how includes, excludes, and exceptions are interpreted."
    pathFilter: MalwareScanPathFilterInput
}

input MalwareScanFileSizeLimitsInput {
    "Maximum size of files to scan. Files that are bigger than this size are ignored."
    maximumSizeInBytes: Long
    "Minimum size of files to scan. Files smaller than this size are ignored."
    minimumSizeInBytes: Long
}

"Please see v1/fileset_template API doc for a detailed description of how includes, excludes, & exceptions are interpreted."
input MalwareScanPathFilterInput {
    "Paths to exempt from exclusion."
    exceptions: [String!] = []
    "Paths to exclude."
    excludes: [String!] = []
    "Paths to include."
    includes: [String!] = []
}

input MalwareScanSnapshotLimitInput {
    "Maximum snapshot time.  Any snapshots taken after this time will be elided."
    endTime: DateTime
    "Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots."
    maxSnapshotsPerObject: Int
    "A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified."
    snapshotsToScanPerObject: [ObjectIdToSnapshotIdsInput!] = []
    "Minimum snapshot time.  Any snapshots taken before this time will be elided."
    startTime: DateTime
}

"Specifies which Managed Disks are excluded from snapshots."
input ManagedDiskExclusion {
    "Specifies whether the Managed Disk is excluded from snapshots or not. When true, the Managed Disk will be excluded from the snapshot."
    isExcludedFromSnapshot: Boolean!
    "Rubrik ID of the Managed Disk."
    managedDiskRubrikId: UUID!
}

input ManualTargetMappingCreateRequest {
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    name: String = ""
    type: TargetTypeEnum = AWS
}

input ManualTargetMappingEditRequest {
    archivalLocationClusterMappings: [TargetToClusterMapping!] = []
    id: String = ""
    name: String = ""
}

input MinuteSnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
}

input MissedSnapshotFilterInput {
    timeRange: TimeRangeInput
}

input ModifyMosaicStoreInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Modify store request object with modified details of a store."
    modifyStoreData: MosaicModifyStoreRequestInput!
}

input MonthlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfMonth: DayOfMonthEnum = FIRST_DAY
}

"Object for stores added on mosaic."
input MosaicAddStoreRequestInput {
    accessKeyId: String
    nfsServer: String
    nfsServerMountPath: String
    secretKey: String
    skipKeyFileConfig: Boolean
    "Required. Name of the store"
    storeName: String!
    storeType: MosaicAddStoreRequestStoreTypeEnum!
    "Required. Store path/url."
    storeUrl: String!
}

"Struct representing the store input for protection."
input MosaicBackupStoreInfoInput {
    "Name of the store."
    storeName: String = ""
}

input MosaicBulkRecoverableRangeRequestInput {
    "Required. List of management objects"
    managementObjects: MosaicDatabaseManagementObjectInput!
    "Required. Name of the source"
    sourceName: String!
}

input MosaicBulkRecoveryRangeInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Retrieve Recoverable Range required for Restore operation"
    recoveryRangeData: MosaicBulkRecoverableRangeRequestInput!
}

input MosaicDatabaseManagementObjectInput {
    databases: [MosaicDatabaseObjectInput!] = []
}

input MosaicDatabaseObjectInput {
    dbName: String
    tables: [String!] = []
}

input MosaicGetSchemaRequestInput {
    "Required. "
    databaseName: String!
    "Required. "
    sourceName: String!
    "Required. "
    tableName: String!
    "Required. "
    versionTimestamp: String!
}

"Object for stores added on mosaic."
input MosaicModifyStoreRequestInput {
    accessKeyId: String
    secretKey: String
    skipKeyFileConfig: Boolean
    "Required. Name of the store"
    storeName: String!
}

"Struct representing the monitor input for protection."
input MosaicMonitorInfoInput {
    "Frequency of monitor."
    frequency: Int = 0
    "Frequency unit of monitor."
    frequencyUnit: RetentionUnitEnum = MINUTES
    "Whether to enable monitor."
    isEnabled: Boolean = false
}

input MosaicRecoverableRangeRequestInput {
    "Required. "
    databaseName: String!
    "Required. "
    sourceName: String!
    "Required. "
    tableName: String!
}

input MosaicRestoreDataInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Retrieve Request Object with details required for Restore operation"
    recoveryData: MosaicRetrieveRequestInput!
}

input MosaicRetrieveRequestInput {
    destinationManagementObjects: MosaicDatabaseManagementObjectInput
    "Required. "
    destinationPath: String!
    destinationSourceName: String
    keyspaceConfig: String
    "Required. "
    managementObjects: MosaicDatabaseManagementObjectInput!
    maxDiskUsage: Int
    "Required. "
    parameterEncoded: Boolean!
    restoreDbUserPwd: String
    restoreDbUsername: String
    "Required. "
    sourceName: String!
    startTimestamp: Int
    targetEncryptionKey: String
    targetQuery: String
    "Required. "
    versionTime: Int!
}

"Struct representing the protection backup input."
input MosaicSlaInfoInput {
    "Store information."
    mosaicBackupStoreInfo: MosaicBackupStoreInfoInput
    "Monitor information."
    mosaicMonitorInfo: MosaicMonitorInfoInput
    "Whether to backup table index."
    shouldBackupIndex: Boolean
    "Whether to delete all previous versions."
    shouldDelete: Boolean
    "Whether to delete data copy versions."
    shouldDeleteData: Boolean
}

"Struct representing the mosaic snapshot filter input."
input MosaicSnapshotFilterInput {
    "Id of the snappable."
    snappableId: [String!]
    "Range of time."
    timeRange: TimeRangeInput
}

"""

Supported in v5.0+
"""
input MountExportSnapshotJobCommonOptionsInput {
    """

    Supported in v5.0+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.0+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.0+
    Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    """
    powerOn: Boolean
    """

    Supported in v5.0+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.0+
    Name of the new VM created by mount or export.
    """
    vmName: String
}

"""

Supported in v5.1+
"""
input MountExportSnapshotJobCommonOptionsV2Input {
    """

    Supported in v5.1+
    Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
    """
    disableNetwork: Boolean
    """

    Supported in v5.1+
    Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
    """
    keepMacAddresses: Boolean
    """

    Supported in v5.1+
    Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
    """
    powerOn: Boolean
    """

    Supported in v5.1+
    Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
    """
    removeNetworkDevices: Boolean
    """

    Supported in v5.1+
    Name of the new VM created by mount or export.
    """
    vmName: String
}

"""

Supported in v5.0+
"""
input MountMssqlDbConfigInput {
    """

    Required. Supported in v5.0+
    Name to assign to the mounted database.
    """
    mountedDatabaseName: String!
    recoveryModel: MssqlDatabaseRecoveryModelEnum
    """

    Required. Supported in v5.0+
    """
    recoveryPoint: MssqlRecoveryPointInput!
    """

    Supported in v5.0+
    ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.
    """
    targetInstanceId: String
}

"""

Supported in v5.0+
"""
input MountSnapshotJobConfigForBatchV1Input {
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Snapshot mount config
    v6.0+: Configuration for Snapshot mount.
    """
    config: MountSnapshotJobConfigV1Input!
    """

    Supported in v5.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: Mounts the most recent snapshot prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    v6.0+: Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v5.0+
    v5.0-v5.3: ID of snapshot to mount. Optional. The snapshot to mount is determined from the other parameters in this call when the ID is not provided.
    v6.0+: The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.
    """
    snapshotId: String
    """

    Required. Supported in v5.0+
    v5.0: Mount a snapshot from this virtual machine.
    v5.1-v5.3: Mount a snapshot from this virtual machine
    v6.0+: ID of the virtual machine whose snapshot needs to be mounted.
    """
    vmId: String!
}

"""

Supported in v6.0+
"""
input MountSnapshotJobConfigForBatchV2Input {
    """

    Required. Supported in v6.0+
    Snapshot mount configuration.
    """
    config: MountSnapshotJobConfigV2Input!
    """

    Supported in v6.0+
    Mounts the oldest snapshot taken after the specified date. This parameter is evaluated only snapshotId and snapshotBeforeDate. do not have values set.
    """
    snapshotAfterDate: DateTime
    """

    Supported in v6.0+
    Mounts the most recent snapshot taken prior to the specified date. This parameter is evaluated only when snapshotId does not have a value set.
    """
    snapshotBeforeDate: DateTime
    """

    Supported in v6.0+
    ID of the snapshot to mount. This parameter is optional if either the `snapshotBeforeDate` or `snapshotAfterDate` parameters are configured.
    """
    snapshotId: String
    """

    Required. Supported in v6.0+
    ID of the virtual machine whose snapshot must be mounted.
    """
    vmId: String!
}

"""

Supported in v5.0+
"""
input MountSnapshotJobConfigV1Input {
    """

    Supported in v5.0+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.0+
    v5.0: Name of the host NAS datastore to use with the new virtual machine. The Rubrik cluster creates a new datastore on the host using the provided name.
    v5.1+: Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.0+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    mountExportSnapshotJobCommonOptions: MountExportSnapshotJobCommonOptionsInput
    """

    Supported in v5.0+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v5.0+
    VLAN ID for the VLAN ESXi host prefer to use for mounting the datastore.
    """
    vlan: Int
}

"""

Supported in v5.1+
"""
input MountSnapshotJobConfigV2Input {
    """

    Supported in v6.0+
    ID of the compute cluster where the new virtual machine will be mounted.
    """
    clusterId: String
    """

    Supported in v5.1+
    The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
    """
    createDatastoreOnly: Boolean
    """

    Supported in v5.1+
    Obsolete parameter.
    """
    dataStoreName: String
    """

    Supported in v5.1+
    ID of the ESXi host to mount the new virtual machine on.
    """
    hostId: String
    mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
    requiredRecoveryParameters: RequiredRecoveryParametersInput
    """

    Supported in v6.0+
    ID of the resource pool where the new virtual machine will be mounted.
    """
    resourcePoolId: String
    """

    Supported in v5.1+
    The job recovers the tags that were assigned to the virtual machine.
    """
    shouldRecoverTags: Boolean
    """

    Supported in v6.0+
    The network binding for vNIC of the virtual machine.
    """
    vNicBindings: [VmwareVNicBindingInfoV2Input!] = []
    """

    Supported in v5.1+
    VLAN ID for the VLAN ESXi host preferred to use for mounting the datastore.
    """
    vlan: Int
}

"""

Supported in v5.0+
"""
input MssqlBackupJobConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    Whether to force a full snapshot or an incremental.
    """
    forceFullSnapshot: Boolean
}

"""

Supported in v5.2+
"""
input MssqlBackupSelectionInput {
    backupType: MssqlBackupTypeEnum
    """

    Supported in v5.2+
    """
    endPoint: MssqlRecoveryPointInput
    """

    Supported in v5.2+
    v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
    v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Supported in v5.2+
    """
    recoveryPoint: MssqlRecoveryPointInput
    """

    Supported in v5.2+
    """
    startPoint: MssqlRecoveryPointInput
}

"""

Supported in v5.0+
"""
input MssqlBatchBackupJobConfigInput {
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    availabilityGroupIds: [String!] = []
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL databases. All databases in this list will be considered.
    v5.3+: IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.
    """
    databaseIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: Whether to force a full snapshot or an incremental.
    v5.3+: Determines whether to force a full or incremental snapshot.
    """
    forceFullSnapshot: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the hosts. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    hostIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Microsoft SQL instances. All non-availability databases on these instances will be considered.
    v5.3+: IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.
    """
    instanceIds: [String!] = []
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Windows clusters. All databases with a `rootId` belonging to this list will be considered.
    v5.3+: IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
    """
    windowsClusterIds: [String!] = []
}

"Filter Mssql database live mount results."
input MssqlDatabaseLiveMountFilterInput {
    "Type of filter."
    field: MssqlDatabaseLiveMountFilterField = MOUNTED_DATABASE_NAME
    "Values for the filter type."
    texts: [String!] = []
}

"Sort Mssql database live mount results."
input MssqlDatabaseLiveMountSortByInput {
    "Field for Mssql database sort by."
    field: MssqlDatabaseLiveMountSortByField = MOUNTED_DATABASE_NAME
    "Sort order for Mssql database sort by."
    sortOrder: MssqlDatabaseLiveMountSortOrderField = ASC
}

"""

Supported in v5.0+
"""
input MssqlDbFileExportPathInput {
    """

    Required. Supported in v5.0+
    The target path for the database file.
    """
    exportPath: String!
    """

    Required. Supported in v5.0+
    Logical name of the database file.
    """
    logicalName: String!
    """

    Supported in v5.0+
    New filename for the database file.
    """
    newFilename: String
    """

    Supported in v5.0+
    New logical name for the database file.
    """
    newLogicalName: String
}

"""

Supported in v5.0+
"""
input MssqlDbUpdateIdInput {
    """

    Required. Supported in v5.0+
    ID of the Microsoft SQL database.
    """
    databaseId: String!
    """

    Required. Supported in v5.0+
    """
    updateProperties: MssqlDbUpdateInput!
}

"""

Supported in v5.0+
"""
input MssqlDbUpdateInput {
    """

    Supported in v5.0
    Assign DB to SLA Domain
    """
    configuredSlaDomainId: String
    """

    Supported in v5.2+
    Whether to pause or resume backups/archival for this database.
    """
    isPaused: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to back up the database.
    """
    maxDataStreams: Int
    mssqlNonSlaProperties: MssqlNonSlaPropertiesInput
    mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput
    """

    Supported in v5.0+
    """
    postBackupScript: MssqlScriptDetailInput
    """

    Supported in v5.0+
    """
    preBackupScript: MssqlScriptDetailInput
    """

    Supported in v5.2+
    Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.
    """
    shouldForceFull: Boolean
}

"""

Supported in v5.2+
"""
input MssqlDownloadFromArchiveConfigInput {
    """

    Required. Supported in v5.2+
    """
    recoveryPoint: MssqlRecoveryPointInput!
}

input MssqlGetRestoreFilesV1Input {
    "Required. ID of the Microsoft SQL database."
    id: String!
    "LSN to recover to. This value or the time are required."
    lsn: String
    "Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified."
    recoveryForkGuid: String
    "Time, in ISO8601 date-time format, to recover to. For example, \"2016-01-01T01:23:45.678\". This value or the LSN are required."
    time: DateTime
}

"""

Supported in v5.3+
"""
input MssqlLogShippingUpdateV2Input {
    """

    Supported in v5.3+
    Maximum number of makeup reseed attempts during a 24 hour period.
    """
    makeupReseedLimit: Int
}

"""

Supported in v5.0
"""
input MssqlNonSlaPropertiesInput {
    """

    Supported in v5.0
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.0
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.0
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"""

Supported in v5.0+
"""
input MssqlRecoveryPointInput {
    """

    Supported in v5.2+
    Recovery point specified in ISO8601 format, such as "2016-01-01T01:23:45.678".
    """
    date: DateTime
    """

    Supported in v5.0+
    """
    lsnPoint: LsnRecoveryPointInput
    """

    Supported in v5.0+
    v5.0-v5.1: Recovery point specified in the form of a timestamp (in milliseconds).
    v5.2+: Recovery point specified in the form of a timestamp (in milliseconds). Deprecated. Please use 'date' instead.
    """
    timestampMs: Long
}

"""

Supported in v5.0+
"""
input MssqlScriptDetailInput {
    scriptErrorAction: ScriptErrorActionEnum!
    """

    Required. Supported in v5.0+
    The script to be run.
    """
    scriptPath: String!
    """

    Required. Supported in v5.0+
    Time (in ms) after which the script will be terminated if it has not completed.
    """
    timeoutMs: Long!
}

"""

Supported in v5.1+
"""
input MssqlSlaDomainAssignInfoInput {
    existingSnapshotRetention: ExistingSnapshotRetentionEnum
    """

    Required. Supported in v5.1+
    List of SQL Server object IDs which should be assigned these properties.
    """
    ids: [String!]!
    mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput
}

"""

Supported in v5.1+
"""
input MssqlSlaPatchPropertiesInput {
    """

    Supported in v5.1+
    v5.1: SLA Domain ID assigned to instance.
    v5.2+: SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
    """
    configuredSlaDomainId: String
    mssqlSlaRelatedProperties: MssqlSlaRelatedPropertiesInput
    """

    Supported in v5.3+
    Determines whether to use the configured default value of log backup retention.
    """
    useConfiguredDefaultLogRetention: Boolean
}

"""

Supported in v5.1+
"""
input MssqlSlaRelatedPropertiesInput {
    """

    Supported in v5.1+
    Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
    """
    copyOnly: Boolean
    """

    Supported in v5.1+
    Seconds between two log backups. A value of 0 disables log backup.
    """
    logBackupFrequencyInSeconds: Int
    """

    Supported in v5.1+
    Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
    """
    logRetentionHours: Int
}

"Filter to return objects with a given substring in their name."
input NameSubstringFilter {
    nameSubstring: String!
}

input NasApiCredentialsInput {
    "TLS certification to validate NAS server."
    apiCertificate: String
    "Password associated with the NAS API user account."
    apiPassword: String
    "Username to access the vendor-specific NAS API."
    apiUsername: String
    "The ID corresponding to the imported certificate."
    certificateId: String
}

"""

Supported in v5.0+
"""
input NasConfigInput {
    """

    Supported in v5.0+
    TLS certification to validate NAS server.
    """
    apiCertificate: String
    """

    Supported in v5.0+
    API endpoint to access NAS API 'FLASHBLADE'.
    """
    apiEndpoint: String
    """

    Supported in v5.0+
    Hostname or IP used in the NAS API calls.
    """
    apiHostname: String
    """

    Supported in v5.0+
    v5.0-v5.3: Password to access NAS API 'ISILON/NETAPP'
    v6.0+: Password to access NAS vendor API.
    """
    apiPassword: String
    """

    Supported in v5.0+
    API token to access NAS API 'FLASHBLADE'.
    """
    apiToken: String
    """

    Supported in v5.0+
    v5.0-v5.3: Username to access NAS API 'ISILON/NETAPP'
    v6.0+: Username to access NAS vendor API.
    """
    apiUsername: String
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isIsilonChangelistEnabled: Boolean
    """

    Supported in v5.2+
    v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNetAppSnapDiffEnabled: Boolean
    """

    Supported in v6.0+
    Indicates whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata fetches during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
    """
    isNutanixCftEnabled: Boolean
    """

    Supported in v5.3+
    Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
    """
    isShareAutoDiscoveryEnabled: Boolean
    """

    Supported in v5.1
    Control if snapdiff is enabled on Netapp NAS
    """
    isSnapdiffEnabled: Boolean
    """

    Required. Supported in v5.0+
    v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
    v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
    """
    vendorType: String!
    """

    Supported in v5.0+
    Name of the Isilon zone that data IP belongs to.
    """
    zoneName: String
}

input NasSystemRegisterInput {
    "Required. "
    hostname: String!
    "Required. "
    nasTmpApiCredentials: NasApiCredentialsInput!
    nasVendorType: NasVendorTypeEnum!
}

input NasSystemUpdateInput {
    "The updated hostname of the NAS system."
    hostname: String
    "The updated API credentials of the NAS system."
    nasApiCredentials: NasApiCredentialsInput
}

"""

Supported in v5.0+
"""
input NetworkThrottleScheduleSummaryInput {
    """

    Required. Supported in v5.0+
    Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
    """
    daysOfWeek: [Int!]!
    """

    Required. Supported in v5.0+
    An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    endTime: Long!
    """

    Required. Supported in v5.0+
    An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
    """
    startTime: Long!
    """

    Required. Supported in v5.0+
    Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    throttleLimit: Float!
}

"""

Supported in v5.0+
"""
input NetworkThrottleUpdateInput {
    """

    Supported in v5.0+
    Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
    """
    defaultThrottleLimit: Float
    """

    Supported in v5.0+
    Boolean value that determines whether a throttle limit is enabled. Set to true to enable the throttle limit, or set to false to disable the throttle limit.
    """
    isEnabled: Boolean
    """

    Supported in v5.2+
    The network interface where outgoing traffic is throttled.
    """
    networkInterface: String
    """

    Supported in v5.0+
    An array containing all of the scheduled throttle limits for a specified resource.
    """
    scheduledThrottles: [NetworkThrottleScheduleSummaryInput!] = []
}

"new compute config"
input NewComputeConfig {
    securityGroupName: String = ""
    subnetName: String = ""
    vnetName: String = ""
}

"new storage account config"
input NewStorageAccountConfig {
    name: String = ""
    sku: SkuEnum = STANDARD_LRS
    tier: TierEnum = COOL
}

input NfsTargetCreateRequest {
    clusterUuid: UUID!
    destinationFolder: String!
    encryptionPassword: String
    exportDir: String!
    fileLockPeriodInSeconds: Int!
    host: String!
    isConsolidationEnabled: Boolean!
    name: String!
    nfsAuthType: AuthTypeEnum!
    nfsVersion: Int
    otherNfsOptions: String
}

input NfsTargetEditRequest {
    exportDir: String
    fileLockPeriodInSeconds: Int
    host: String
    id: UUID!
    isConsolidationEnabled: Boolean
    name: String
    nfsAuthType: AuthTypeEnum
}

"Channel object consisting naturalId and name"
input O365TeamConvChannelInput {
    folderId: String!
    name: String!
    naturalId: String!
}

input ObjectIdToSnapshotIdsInput {
    "Required. Object ID."
    id: String!
    "Required. Snapshot IDs."
    snapshots: [String!]!
}

input ObjectIdsForHierarchyTypeInput {
    objectIds: [String!]!
    snappableType: SnappableLevelHierarchyTypeEnum!
}

input ObjectSpecificConfigsInput {
    awsRdsConfigInput: AwsRdsConfigInput
    "Input to configure the SLA Domain for Azure SQL Database DB."
    azureSqlDatabaseDbConfigInput: AzureSqlDatabaseDbConfigInput
    "Input to configure the SLA Domain for Azure SQL Managed Instance DB."
    azureSqlManagedInstanceDbConfigInput: AzureSqlManagedInstanceDbConfigInput
    sapHanaConfigInput: SapHanaConfigInput
    vmwareVmConfigInput: VmwareVmConfigInput
}

input ObjectStoreAccessInput {
    "Specifies whether SSL is enabled for the SnapMirrorCloud cloud target."
    isSslEnabled: Boolean
    "The URL of the object server for the cloud target."
    objectServerUrl: String
    "The type of provider for the cloud target."
    providerType: String
    "Specifies whether to use an HTTP proxy to connect to the SnapMirrorCloud cloud target."
    shouldUseHttpProxy: Boolean
}

input OldRestorePathPairInput {
    path: String = ""
    restorePath: String = ""
}

"Parameters for onedrive file or folder search"
input OnedriveSearchFilter {
    channelFolderName: String
    channelId: String
    channelNameKeyword: String
    createTime: TimeRangeFilter
    excludeItemsUnderRoot: Boolean
    modifiedTime: TimeRangeFilter
    searchKeywordFilter: OnedriveSearchKeywordFilter
    searchObjectFilter: OnedriveSearchObjectFilter
}

"Onedrive search keyword and keyword type"
input OnedriveSearchKeywordFilter {
    keywordType: OnedriveSearchKeywordTypeEnum = NAME
    searchKeyword: String = ""
}

"Onedrive search object type"
input OnedriveSearchObjectFilter {
    searchObjectType: OnedriveSearchObjectTypeEnum = O365_FOLDER
}

input PatchVolumeGroupInput {
    "Required. The ID of Volume Group."
    id: String!
    "Required. Properties to update for this Volume Group."
    patchProperties: VolumeGroupPatchInput!
}

input PauseSlaRequest {
    "List of Cluster Uuids."
    clusterUuids: [String!] = []
    "Whether or not to pause SLA."
    pauseSla: Boolean = false
    "Global SLA ID."
    slaId: String = ""
}

input PermissionInput {
    objectsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!
    operation: OperationEnum!
}

input PolarisSnapshotFilterInput {
    isOnDemandSnapshot: Boolean
    snappableId: [String!]
    timeRange: TimeRangeInput
}

input PolarisSnapshotFilterNewInput {
    field: FieldEnum = ALL
    texts: [String!] = []
}

"Range of ports that are allowed to be accessed."
input PortRange {
    "The maximum port in the port range."
    portMax: Int = 0
    "The minimum port in the port range."
    portMin: Int = 0
}

input PostBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PostSnapScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

input PreBackupScriptInputType {
    failureHandling: String
    scriptPath: String
    timeoutInMs: Long
}

"Input to initiate deletion of AWS cloud account."
input PrepareAwsCloudAccountDeletionInput {
    "Rubrik ID of account to be deleted."
    cloudAccountId: UUID!
    "Protection feature to be deleted for the cloud account."
    feature: CloudAccountFeatureEnum!
}

"Input to prepare feature update for AWS cloud account."
input PrepareFeatureUpdateForAwsCloudAccountInput {
    cloudAccountId: UUID!
    features: [CloudAccountFeatureEnum!]!
}

input PreviewerClusterConfigInput {
    clusterId: String = ""
    enabled: Boolean = false
}

input ProxySettingsInput {
    password: String = ""
    portNumber: Int = 0
    protocol: String = ""
    proxyServer: String = ""
    username: String = ""
}

input QuarterlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfQuarter: DayOfQuarterEnum = FIRST_DAY
    quarterStartMonth: MonthEnum = JANUARY
}

input QueryNetworkThrottleInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    resourceId: InternalQueryNetworkThrottleRequestResourceIdEnum
}

"Filter ransomware result data."
input RansomwareResultFilterInput {
    clusterUuid: [UUID!]
    endTime: DateTime
    isEncrypted: Boolean
    managedId: [String!]
    startTime: DateTime
}

input RcsTargetCreateRequest {
    clusterUuid: UUID!
    instanceType: InstanceTypeEnum!
    name: String!
    region: RcsRegionEnumType!
    rsaKey: String!
    spaceUsageAlertThreshold: Int!
    tier: RcsTierEnumType!
}

input RcsTargetEditRequest {
    id: UUID!
    name: String
    spaceUsageAlertThreshold: Int
}

input RegisterNasSystemInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Registration definition for a NAS system. This contains parameters needed to protect the NAS system such as a hostname or the cluster management IP address, and login credentials to access the system."
    nasSystem: NasSystemRegisterInput!
}

input RelationshipCreateInput {
    "Properties required to access the object store (cloud target) for the SnapMirrorCloud object."
    objectStoreAccess: ObjectStoreAccessInput
    "Required. ID of SnapMirror Cloud protected object."
    snapMirrorCloudId: String!
}

input RelativeTimeRangeInput {
    magnitude: Int!
    unit: TimeUnitEnum!
}

"Filter to return objects which are relic or not."
input RelicFilter {
    relic: Boolean!
}

"Filter for replication pairs request."
input ReplicationPairsQueryFilter {
    "Rubrik cluster name."
    clusterName: String = ""
    "Source Rubrik cluster uuids."
    sourceClusterUuids: [String!] = []
    "Connection status of the replication pair."
    status: [ReplicationPairConnectionStatus!] = []
    "Target Rubrik cluster uuids."
    targetClusterUuids: [String!] = []
}

input ReplicationSpecInput {
    replicationType: ReplicationTypeEnum = UNKNOWN_REPLICATION_TYPE
    specificReplicationSpecInput: SpecificReplicationSpecInput
}

input ReplicationSpecV2Input {
    awsAccount: String = ""
    awsRegion: AwsNativeRegionForReplicationEnum
    azureRegion: AzureNativeRegionForReplicationEnum
    azureSubscription: String = ""
    clusterUuid: String = ""
    retentionDuration: SlaDurationInput
    storageSettingId: String = ""
}

input ReplicationToCloudLocationSpecInput {
    cloudProvider: CloudProviderEnum = AWS
    replicationTargetId: String = ""
    retentionDuration: SlaDurationInput
}

input ReplicationToCloudRegionSpecInput {
    cloudProvider: CloudProviderEnum = AWS
    replicationTargetRegion: String = ""
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

"Create configs for a snappable data chart."
input ReportChartCreate {
    "The metrics focus of the chart."
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the chart."
    name: String!
}

input ReportConfigInput {
    aggregations: [String!]!
    "Column selection for the report"
    columns: [String!]!
    "Type of report"
    dataViewType: DataViewTypeEnum!
    "Filter selection for the report"
    filters: [ReportFilterInput!]!
    "GroupBy selection for the report"
    groupBy: ConfigGroupByInput!
    "Report name"
    name: String!
    sortBy: String!
    sortOrder: SortOrderEnum
}

input ReportFilterInput {
    name: String!
    "values are JSON serialized string of the original value"
    values: [String]!
}

"Create configs for an activity data table."
input ReportTableCreate {
    focus: ReportFocusEnum!
    groupBy: [GroupByFieldEnum!]
    "The name of the table."
    name: String!
    selectedColumns: [ReportTableColumnEnum!]!
    sortBy: SortByFieldEnum
    "The data sorting order for the table, Asc or Des."
    sortOrder: SortOrderEnum
}

input RequestedMatchDetailsInput {
    requestedHashTypes: HashTypeEnum
}

"""

Supported in v5.1+
"""
input RequiredRecoveryParametersInput {
    """

    Supported in v5.1+
    Point in time to recover to.
    """
    recoveryPoint: DateTime
    """

    Supported in v5.1+
    ID of the snapshot to recover.
    """
    snapshotId: String
}

input ResourceInput {
    snappableFid: String = ""
    snapshotFid: String = ""
}

input RestoreConfig {
    deltaTypeFilter: [DeltaTypeEnum!] = []
    domainName: String = ""
    nextSnapshotFid: String = ""
    password: String = ""
    restoreFilesConfig: [RestoreFileConfig!] = []
    shouldIgnoreErrors: Boolean = false
    shouldRestoreXAttrs: Boolean
    shouldSaveCredentials: Boolean = false
    shouldUseAgent: Boolean
    username: String = ""
}

input RestoreFileConfig {
    path: String = ""
    restorePath: String = ""
}

"""

Supported in v5.0+
"""
input RestoreFilesJobConfigInput {
    """

    Supported in v5.1+
    Managed ID of the destination object that the files should be recovered to.
    """
    destObjectId: String
    """

    Supported in v5.0+
    Domain name (Use . for local admin).
    """
    domainName: String
    """

    Supported in v5.0+
    v5.0: Optional field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. Default value is false, errors are not ignored.
    v5.1+: Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.
    """
    ignoreErrors: Boolean
    """

    Supported in v5.0+
    Password.
    """
    password: String
    """

    Required. Supported in v5.0+
    Absolute file path and restore path if not restored back to itself.
    """
    restoreConfig: [VmRestorePathPairInput!]!
    """

    Supported in v5.1+
    Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.
    """
    shouldRestoreXAttrs: Boolean
    """

    Supported in v5.0+
    v5.0: Whether we should save the user-entered credentials
    v5.1+: A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
    """
    shouldSaveCredentials: Boolean
    """

    Supported in v5.1+
    A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
    """
    shouldUseAgent: Boolean
    """

    Supported in v5.0+
    Username.
    """
    username: String
}

"""

Supported in v5.0+
"""
input RestoreMssqlDbJobConfigInput {
    """

    Supported in v5.0+
    A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
    """
    finishRecovery: Boolean
    """

    Supported in v5.0+
    Maximum number of parallel data streams that can be used to copy data to the target system.
    """
    maxDataStreams: Int
    """

    Required. Supported in v5.0+
    """
    recoveryPoint: MssqlRecoveryPointInput!
}

"Config for O365 mailbox restore"
input RestoreO365MailboxInput {
    "Polaris id of the mailbox."
    mailboxUUID: UUID!
    "Polaris ID of O365 subscription."
    orgUuid: UUID
    "Configuration for restore job."
    restoreConfigs: [RestoreObjectConfig!]!
    "Polaris id of restoring snapshot."
    snapshotUUID: UUID
}

"Config for the mailbox object (email/folder) to be restored"
input RestoreObjectConfig {
    EmailID: String
    FolderID: String
    SnapshotUUID: UUID!
}

"""

Supported in v5.0+
"""
input RestorePathPairInput {
    """

    Required. Supported in v5.0+
    Original file path to be restored.
    """
    path: String!
    """

    Supported in v5.0+
    Directory of the folder to copy files into. If this is empty, file will be restored back into original directory.
    """
    restorePath: String
}

input RestoreVolumeGroupSnapshotFilesInput {
    "Required. Configuration containing snapshot file paths and restore path."
    config: VolumeGroupRestoreFilesConfigInput!
    "Required. ID of snapshot."
    id: String!
}

input RunCustomAnalyzerInput {
    content: String = ""
    dictionaryCsv: String = ""
    regex: String = ""
}

input RunDetectMalwareInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Configuration for malware detection."
    malwareScanConfig: MalwareScanConfigInput!
}

input S3CompatibleTargetCreateInput {
    accessKey: String!
    bucketPrefix: String!
    clusterUuid: UUID!
    encryptionKeyInDer: String!
    endpoint: String!
    isConsolidationEnabled: Boolean!
    name: String!
    numberOfBuckets: Int!
    secretKey: String!
    useSystemProxy: Boolean!
}

input S3CompatibleTargetEditInput {
    accessKey: String
    bucketPrefix: String
    encryptionKeyInDer: String
    endpoint: String
    id: UUID!
    isConsolidationEnabled: Boolean
    name: String
    numberOfBuckets: Int
    secretKey: String
    useSystemProxy: Boolean
}

input SLAAuditDetailFilterInput {
    field: SLAAuditDetailFilterFieldEnum = USER_NAME
    text: String = ""
}

input SapHanaConfigInput {
    differentialFrequency: SlaDurationInput
    incrementalFrequency: SlaDurationInput
    logRetention: SlaDurationInput
}

"Filter Sap Hana log snapshots."
input SapHanaLogSnapshotFilterInput {
    clusterUuid: [UUID!]
    fromTime: DateTime
    isArchived: Boolean
    snappableId: [String!]
    toTime: DateTime
}

"Filter Sap Hana recoverable ranges."
input SapHanaRecoverableRangeFilterInput {
    clusterUuid: [UUID!]
    databaseId: [String!]
    fromTime: DateTime
    isArchived: Boolean
    toTime: DateTime
}

"""

Supported in v5.3+
"""
input SapHanaSystemConfigInput {
    """

    Supported in v6.0+
    Data path details of the SAP HANA system.
    """
    dataPathSpec: SapHanaSystemDataPathSpecInput
    """

    Required. Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!]!
    """

    Required. Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String!
    """

    Required. Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String!
    """

    Required. Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String!
    """

    Required. Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String!
}

"""

Supported in v6.0+
"""
input SapHanaSystemDataPathSpecInput {
    dataPathType: SapHanaDataPathTypeEnum
}

"""

Supported in v5.3+
"""
input SapHanaSystemPatchInput {
    """

    Supported in v5.3+
    The ID of the SLA Domain that is configured for the SAP HANA system.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.3+
    The SAP HANA system hosts.
    """
    hostIds: [String!] = []
    """

    Supported in v5.3+
    The instance number of the SAP HANA system.
    """
    instanceNumber: String
    """

    Supported in v5.3+
    The password of the SAP HANA system.
    """
    password: String
    """

    Supported in v5.3+
    The SAP System Identification (SID) code for the SAP HANA system.
    """
    sid: String
    """

    Supported in v5.3+
    The username of the SAP HANA system.
    """
    username: String
}

input ScheduledReportCreate {
    creatorId: String
    dailyTime: LocalTime
    hasCSVAttachment: Boolean!
    hasPDFAttachment: Boolean!
    monthlyDate: Int
    monthlyTime: LocalTime
    recipients: [String!]!
    "Chart configs for the report."
    reportId: Int!
    title: String!
    weeklyDays: [WeekDayEnum!]
    weeklyTime: LocalTime
}

"Filters for the scheduled report list"
input ScheduledReportFilterInput {
    reportId: Int
}

"Parameters for mail or folder search"
input SearchFilter {
    emailAddresses: [EmailAddressFilter!] = []
    fromTime: DateTime
    searchKeywordFilter: SearchKeywordFilter
    searchObjectFilter: SearchObjectFilter
    untilTime: DateTime
}

"Search keyword and keyword type"
input SearchKeywordFilter {
    keywordType: SearchKeywordTypeEnum = SUBJECT
    searchKeyword: String = ""
}

"Search object type"
input SearchObjectFilter {
    searchObjectType: SearchObjectTypeEnum = FOLDER
}

"Input for setting the app credentials in the Azure Cloud Accounts."
input SetAzureCloudAccountCustomerAppCredentialsInput {
    "Client ID of the Application."
    appId: String!
    "Name of the application."
    appName: String
    "Client secret key of the Application."
    appSecretKey: String!
    "ID of the home tenant of the application."
    appTenantId: String
    "Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud."
    azureCloudType: AzureCloudTypeEnum! = AZUREPUBLICCLOUD
    "Domain Name of the Azure tenant."
    tenantDomainName: String
}

"MFA settings to update for a LDAP integration."
input SetLdapMfaSettingInput {
    "Optional boolean value indicating whether TOTP is enforced for the given LDAP integration. If omitted, existing value of the setting is kept."
    isTotpEnforced: Boolean
    "ID of the LDAP integration."
    ldapId: String = ""
}

"MFA settings to update for an account."
input SetMfaSettingInput {
    "Optional boolean value indicating whether TOTP is globally enforced. If omitted, existing value of the setting is kept."
    isTotpEnforcedGlobal: Boolean
    "Optional integer value indicating the time of remembering the MFA login in hours. If omitted, existing value of the setting is kept."
    mfaRememberHours: Int
    "Optional integer value indicating the period of showing TOTP configuration reminder in hours. If omitted, existing value of the setting is kept."
    totpReminderHours: Int
}

input SetTotpConfigInput {
    "TOTP one-time password."
    otp: String = ""
    "TOTP secret for setting up TOTP as 2FA."
    secret: String = ""
    userId: String = ""
}

input SetUserLevelTotpEnforcementInput {
    "Indicate if TOTP is enforced at user level."
    isEnforced: Boolean = false
    "Users for whom TOTP is enforced."
    userIds: [String!] = []
}

"Input for SetWwwTlsCert."
input SetWwwTlsCertInputType {
    "ID of certificate."
    certificateId: Long = 0
}

"Struct representing the sharepoint doc lib contents to be restored"
input SharePointDriveRestoreConfig {
    DocLibName: String
    DriveRestoreConfig: DriveRestoreConfig!
    ParentSiteUUID: UUID
}

"Struct representing the SharePoint list item to be restored."
input SharePointListItem {
    "Id of item to restore."
    itemId: String!
    "Name of item to restore."
    itemName: String!
    "List of snapshots of this item to restore."
    itemSnapshotsToRestore: [SharePointListItemSnapshot!]!
}

"Struct representing the SharePoint list item snapshot to be restored."
input SharePointListItemSnapshot {
    "Id to snapshot to restore."
    snapshotId: UUID!
    "Number of snapshot to restore."
    snapshotNum: Int!
}

"Struct representing the sharepoint list contents to be restored."
input SharePointListRestoreConfig {
    "List of list folders to restore."
    foldersToRestore: [FolderInfo!]!
    "List of list items to restore."
    itemsToRestore: [SharePointListItem!]!
    "Destination list name."
    listName: String
    "Destination site id."
    parentSiteUuid: UUID
    "Path within destination list to restore to."
    restoreFolderPath: String!
}

input ShouldApplyToExistingSnapshots {
    value: Boolean = false
}

input ShouldApplyToNonPolicySnapshots {
    value: Boolean = false
}

input SlaDurationInput {
    duration: Int = 0
    unit: RetentionUnitEnum = MINUTES
}

input SlaLogFrequencyConfig {
    retention: SlaDurationInput
}

"Filter for SlaStatus."
input SlaStatusFilterInput {
    "Field for SLA Status Filter."
    field: SlaStatusFilterField = CLUSTER_NAME
    "Text for SLA Status Filter."
    text: String = ""
}

input SnapMirrorCloudCreateInput {
    nasVolumeId: String
    snapMirrorLabel: String
}

input SnapMirrorCloudRestoreParametersInput {
    "Optional. A Boolean that specifies whether to ignore errors during the restore operation. By default, this value is false."
    ignoreErrors: Boolean
    "Required. A Boolean that specifies whether the restore operation is for the entire volume."
    isVolumeRestore: Boolean!
    "The path relative to the root of the NAS share of the source file. If the restore operation is not using the original source path, also includes the new destination path."
    restorePathPairs: [SnapMirrorCloudRestorePathPairInput!] = []
    "The Rubrik ID of the NAS volume to which the data should be exported."
    targetNasVolumeId: String
}

input SnapMirrorCloudRestorePathPairInput {
    "Absolute path to the restore or export destination for files and folders."
    dstPath: String
    "Required. Path relative to the root of the NAS share of the files/folders to restore or export."
    srcPath: String!
}

input SnappableFailoverInfoType {
    recoveryPoint: Long!
    snappableId: String!
}

"Filter snappable data."
input SnappableFilterInput {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
}

"Filter snappable data (including search capability)."
input SnappableFilterInputWithSearch {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
    timeRange: TimeRangeInput
}

"Filter snappable data in group by."
input SnappableGroupByFilterInput {
    cluster: CommonClusterFilterInput
    complianceStatus: [ComplianceStatusEnum!]
    objectType: [ObjectTypeEnum!]
    protectionStatus: [ProtectionStatusEnum!]
    slaDomain: SnappableSlaDomainFilterInput
    slaTimeRange: SLAComplianceTimeRangeEnum
    timeRange: TimeRangeInput
}

"List of snappable ids and recovery points."
input SnappableIdentifierInput {
    "Point in time to which to recover the VM."
    recoveryPoint: Long
    "Snappable id of the blueprint child."
    snappableId: UUID!
    "Snappable type."
    snappableType: ObjectTypeEnum!
}

"Input for snappable info."
input SnappableInfoType {
    "Id of the snappable."
    id: String = ""
    "Recovery point of a snappable."
    recoveryPoint: Long = 0
}

input SnappablePathInput {
    snappableFid: String = ""
    stdPath: String = ""
}

"Struct representing the snappable contents to be restored"
input SnappableRestoreConfig {
    MailboxRestoreConfig: MailboxRestoreConfig
    OneDriveRestoreConfig: DriveRestoreConfig
    SharePointDriveRestoreConfig: SharePointDriveRestoreConfig
    TeamsRestoreConfig: TeamsRestoreConfig
    "Restore config for SharePoint list jobs."
    sharePointListRestoreConfig: SharePointListRestoreConfig
}

"Filter snappable data based on properties of its Sla domain."
input SnappableSlaDomainFilterInput {
    id: [String!]
}

input SnapshotDeltaFilterInput {
    deltaType: [DeltaTypeEnum!]
}

"Filter snapshots."
input SnapshotQueryFilterInput {
    "Type of filter."
    field: SnapshotQueryFilterField = SLA_ID
    "Snapshots from linked snappables."
    shouldFetchLinked: Boolean = false
    "Additional Information for the filter type."
    text: String = ""
    "List of search texts for the filter type."
    textList: [String!] = []
    "Snapshot types to be filtered."
    typeFilters: [SnapshotTypeEnum!] = []
}

input SonarContentReportFilter {
    applyWhitelists: Boolean = false
    clusterIds: [String!] = []
    objectTypes: [HierarchyObjectTypeEnum!]!
    policyIds: [String!] = []
    search: String = ""
}

input SourceInput {
    async: Boolean
    cassandraYaml: [String!] = []
    dseYaml: [String!] = []
    enableSsl: Boolean
    httpsCertificate: String
    ignoreSecondaries: [String!] = []
    jmxPassword: String
    jmxUser: String
    parameterEncoded: Boolean
    sourceAuthKey: String
    sourceAuthKeyfile: String
    sourceAuthPassphrase: String
    sourceDriverPassword: String
    sourceDriverUser: String
    sourceHttpsPort: String
    "Required. "
    sourceIp: [String!]!
    "Required. "
    sourceName: String!
    sourcePassword: String
    sourcePort: String
    sourceRpcPort: String
    sourceSshPort: String
    sourceType: SourceSourceTypeEnum!
    sourceUser: String
    sslCaCerts: String
    sslCertReqs: SourceSslCertReqsEnum
    sslCertfile: String
    sslKeyfile: String
}

input SpecificReplicationSpecInput {
    bidirectionalSpecInput: BidirectionalReplicationSpecInput
    cloudLocationSpecInput: ReplicationToCloudLocationSpecInput
    cloudRegionSpecInput: ReplicationToCloudRegionSpecInput
    unidirectionalSpecInput: UnidirectionalReplicationSpecInput
}

"Input required to start the job to disable AWS Exocompute."
input StartAwsExocomputeDisableJobInput {
    "Rubrik ID of the account for which Exocompute needs to be disabled."
    cloudAccountId: UUID!
}

"Input to trigger AWS native account disable job."
input StartAwsNativeAccountDisableJobInput {
    "Rubrik ID of AWS account."
    awsAccountRubrikId: UUID!
    "Type of native protection to be disabled."
    awsNativeProtectionFeature: AwsNativeProtectionFeatureEnum!
    "Whether to delete snapshots in the account."
    shouldDeleteNativeSnapshots: Boolean!
}

"Input to trigger AWS native account refresh job."
input StartAwsNativeAccountsRefreshJobInput {
    "Rubrik IDs of AWS account to be refreshed."
    awsAccountRubrikIds: [UUID!]!
    "Native protection feature to be refreshed."
    awsNativeProtectionFeatures: [AwsNativeProtectionFeatureEnum!]!
}

"Input to trigger AWS native EBS volume export job."
input StartAwsNativeEbsVolumeSnapshotExportJobInput {
    "Availability Zone (AZ) of exported volume."
    availabilityZone: String!
    "Rubrik ID of AWS account where exported volume will reside."
    destinationAwsAccountRubrikId: UUID!
    "Region of exported volume."
    destinationRegionNativeId: AwsNativeRegionEnum!
    "Input/Output (IO) operation limit per second for the exported volume."
    iops: Int!
    "ID of KMS key to be used for export."
    kmsKeyId: String = ""
    "Whether to copy tags to exported volume."
    shouldCopyTags: Boolean!
    "Whether to replace volume where attached."
    shouldReplaceAttached: Boolean!
    "ID of snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used for export."
    snapshotType: SnapshotType = SOURCE
    "Name of volume after export."
    volumeName: String!
    "Size in GBs of exported volume."
    volumeSize: Int!
    "AWS Native EBS volume type. Some examples are: g3, io2. For more information, see https://aws.amazon.com/ebs/volume-types."
    volumeType: AwsNativeEbsVolumeTypeEnum!
}

"Input to trigger AWS native EBS volume create snapshot job."
input StartAwsNativeEbsVolumeSnapshotsJobInput {
    "Rubrik IDs of EBS volumes for snapshots creation."
    ebsVolumeIds: [UUID!]!
    "Retention SLA ID to be used for the snapshots to be created."
    retentionSlaId: String = ""
}

"Input to trigger AWS native EC2 Instance export job."
input StartAwsNativeEc2InstanceSnapshotExportJobInput {
    "ID of the Amazon Machine Image (AMI) to be used for launching EC2 instance. This field should be specified only when snapshotType is specified as Archived and amiTypeForAwsNativeArchivedSnapshot returns ami type as USER_SPECIFIED. In other cases, either a pre-existing AMI is picked, or a new AMI is created at runtime, and AMI id is not required. The AMI specified here should be present in the target account and region of export. The specified AMI will be used for launching instance for export, and all its volumes will be replaced."
    amiId: String
    "Rubrik ID of AWS account where exported instance will reside."
    destinationAwsAccountRubrikId: UUID!
    "Region of exported instance."
    destinationRegionId: AwsNativeRegionEnum!
    "Power state of exported instance."
    exportInstanceInPoweredOffState: Boolean = false
    "Name of instance after export."
    instanceName: String!
    "AWS Native EC2 instance type to be used after export. Some examples are: t2.nano, m5.xlarge. For more information, see https://aws.amazon.com/ec2/instance-types."
    instanceType: AwsNativeEc2InstanceTypeEnum!
    "ID of KMS key to be used for export."
    kmsKeyId: String = ""
    "List of security group IDs to be used for exported instance."
    securityGroupIds: [String!]!
    "Whether to copy tags to exported instance."
    shouldCopyTags: Boolean!
    "ID of snapshot to be exported."
    snapshotId: UUID!
    "Type of snapshot used for export."
    snapshotType: SnapshotType = SOURCE
    "Name of SSh key pair to be used for export."
    sshKeyPairName: String = ""
    "ID of subnet to use for exported instance."
    subnetId: String!
}

"Trigger AWS EC2 instance snapshots create job."
input StartAwsNativeEc2InstanceSnapshotsJobInput {
    "List of Rubrik EC2 instance IDs."
    ec2InstanceIds: [UUID!]!
    "Retention SLA Rubrik ID."
    retentionSlaId: String = ""
}

"Input to trigger job to create AWS RDS Instance snapshots."
input StartAwsNativeRdsInstanceSnapshotsInput {
    "List of Rubrik UUIDs of the RDS Instances"
    rdsInstanceIds: [UUID!]!
    "ID of the SLA Domain to be used for retention of the snapshots that are created by the RDS instance snapshot job."
    retentionSlaId: String = ""
}

"Input required to trigger a job to create an index of snapshots."
input StartCloudNativeSnapshotsIndexJobInput {
    snapshotIds: [UUID!]!
}

"Inputs to trigger the job to create Azure Native Virtual Machine snapshots."
input StartCreateAzureNativeManagedDiskSnapshotsJobInput {
    "Rubrik IDs of the managed disks for which the snapshot is to be taken."
    managedDiskRubrikIds: [UUID!]!
    "The ID of the SLA Domain assigned to protect the on-demand snapshot."
    retentionSlaId: String
}

"Inputs to trigger the job to create Azure Native Virtual Machine snapshots."
input StartCreateAzureNativeVirtualMachineSnapshotsJobInput {
    "Retention SLA ID of the on-demand snapshot."
    retentionSlaId: String
    "Rubrik IDs of the Virtual Machines (VMs) for which the snapshot is to be taken."
    virtualMachineRubrikIds: [UUID!]!
}

"Input for the job to start disabling protection from the Azure Native Subscription."
input StartDisableAzureNativeSubscriptionProtectionJobInput {
    "Type of native protection to be disabled."
    azureNativeProtectionFeature: AzureNativeProtectionFeature!
    "The Rubrik ID of the Azure subscription for which to disable protection."
    azureSubscriptionRubrikId: UUID!
    "Specifies whether to delete the snapshots associated with the subscription being deleted. When true, deletes the snapshots associated with the subscription being deleted."
    shouldDeleteNativeSnapshots: Boolean!
}

"Input for the job to export the specified Azure Native Managed Disks to the specified destination."
input StartExportAzureNativeManagedDiskJobInput {
    "Availability Zone in which to export the disk. It is empty for regions types which do not support availability zones."
    destinationAvailabilityZone: String
    "Region in which the disk created after export will exist."
    destinationRegion: AzureNativeRegionEnum!
    "Rubrik ID of the subscription in which to export the disk. When empty, the disk is exported to same subscription."
    destinationSubscriptionRubrikId: UUID
    "Name of the disk created after export."
    diskName: String!
    "Size of the disk created after export, in GiB."
    diskSize: Int!
    "Type of the disk created after export."
    diskStorageTier: AzureNativeManagedDiskTypeEnum!
    "Resource group to be associated with the disk created after export."
    resourceGroup: String!
    "Specifies whether to export tags from the snapshot or not. When true, the tags from the snapshot are exported as well."
    shouldExportTags: Boolean!
    "Specifies whether to run only the export job or to run both the export and replace jobs. When true, the attached managed disk is exported and replaced."
    shouldReplaceAttachedManagedDisk: Boolean!
    "Specifies whether to recover from the replica of the source snapshot or not. Default value is false."
    shouldUseReplica: Boolean
    "Snapshot ID of the snapshot with which the disk is to be exported."
    snapshotId: UUID!
    "The type of the snapshot to recover from."
    snapshotType: AzureSnapshotType
}

"Input for the job to export the specified Azure Native Virtual Machine to the specified destination."
input StartExportAzureNativeVirtualMachineJobInput {
    "The native ID of the availability set used by the virtual machine created by the export job."
    availabilitySetNativeId: String
    "The Availability Zone where the virtual machine created by the export job exists. When the region type does not support Availability Zones, this value is null."
    destinationAvailabilityZone: String
    "The region where the virtual machine created by the export job exists."
    destinationRegion: AzureNativeRegionEnum!
    "The Rubrik ID of the Azure subscription to which the virtual machine is exported. When this value is not specified, the virtual machine is exported to the same Azure subscription."
    destinationSubscriptionRubrikId: UUID
    "The native ID of the network security group used by the virtual machine created by the export job."
    networkSecurityGroupNativeId: String
    "The resource group associated with the virtual machine created by the export job."
    resourceGroupName: String!
    "Specifies whether to enable accelerated networking for the virtual machine created by the export job. This value is false by default."
    shouldEnableAcceleratedNetworking: Boolean
    "Specifies whether to export the tags from the snapshot."
    shouldExportTags: Boolean!
    "Specifies whether to export the virtual machine in a powered-down state."
    shouldPowerOff: Boolean!
    "Specifies whether to recover from a replica of the source snapshot."
    shouldUseReplica: Boolean
    "The snapshot ID of the snapshot used to export a virtual machine."
    snapshotId: UUID!
    "The type of the snapshot to recover from."
    snapshotType: AzureSnapshotType
    "The native ID of the subnet used by the virtual machine created by the export job."
    subnetNativeId: String!
    "The name of the virtual machine created as a result of the export job."
    virtualMachineName: String!
    "The size, in GiB, of the virtual machine created by the export job."
    virtualMachineSize: String!
}

"Input for the job to export the specified Azure SQL Database."
input StartExportAzureSqlDatabaseDbJobInput {
    "Input for exporting from Long Term Retention (LTR) backup."
    azureSqlDatabaseDbLtrExport: AzureSqlDatabaseDbLtrExport
    "Input for exporting from Point-in-Time (PiT) backup."
    azureSqlDatabaseDbPitExport: AzureSqlDatabaseDbPitExport
    "Name of the exported Azure SQL Database."
    backupDatabaseName: String!
    "Rubrik ID of the Azure SQL Database instance to be exported."
    databaseId: UUID!
    "Name of the elastic pool for the exported database."
    elasticPoolName: String
    "Specifies whether the tags will be exported to the new Azure SQL Database."
    exportTags: Boolean!
}

"Input for the job to export the specified Azure SQL Managed Instance database."
input StartExportAzureSqlManagedInstanceDbJobInput {
    "Input for exporting from Long Term Retention (LTR) backup."
    azureSqlManagedInstanceDbLtrExport: AzureSqlManagedInstanceDbLtrExport
    "Input for exporting from Point-in-Time (PiT) backup."
    azureSqlManagedInstanceDbPitExport: AzureSqlManagedInstanceDbPitExport
    "Name of the exported Azure SQL Managed Instance database."
    backupDatabaseName: String!
    "Specifies whether the tags will be exported to the new Azure SQL Managed Instance database."
    exportTags: Boolean!
    "Rubrik ID of the Azure SQL Managed Instance to be exported."
    managedInstanceId: UUID!
    "Name of the Azure SQL Managed Instance in which database is being exported."
    managedInstanceName: String!
    "Resource Group in which database is being exported."
    resourceGroup: String!
}

"Input to trigger AWS native RDS Instance export job."
input StartExportRdsInstanceJobInput {
    "Instance class of RDS instance."
    dbInstanceClass: AwsNativeRdsDbInstanceClassEnum!
    "Name of the exported RDS DB instance."
    dbInstanceName: String!
    "Region in which the exported RDS DB instance will be launched."
    destinationRegionNativeId: AwsNativeRegionEnum!
    "Export timestamp for Point in Time recovery of the instance."
    exportTime: DateTime
    "Input Output (I/O) per second of the exported RDS DB instance."
    iops: Int = 0
    "Whether the exported RDS DB instance is multi-AZ or not."
    isMultiAz: Boolean!
    "Whether the export of the instance is from snapshot or point-in-time."
    isPointInTime: Boolean!
    "Whether the new RDS instance is publicly accessible or not."
    isPubliclyAccessible: Boolean!
    "KMS Key ID of the exported RDS DB instance."
    kmsKeyId: String = ""
    "Name of the option group selected by the user for the new RDS instance."
    optionGroupName: String = ""
    "Name of the DB parameter group selected by the user for the new RDS instance."
    parameterGroupName: String = ""
    "Port on which the exported RDS DB instance accepts connections."
    port: Long!
    "Availability Zone (AZ) in which the exported RDS DB instance must be launched."
    primaryAz: String = ""
    "Rubrik ID of the RDS Instance to be exported."
    rdsInstanceId: UUID!
    "List of security group IDs for the new RDS instance. Default security group is used if empty list is provided here."
    securityGroupIds: [String!] = []
    "Whether tags will be exported to the new RDS instance."
    shouldExportTags: Boolean!
    "ID of the snapshot if the export is from snapshot."
    snapshotId: String
    "Type of snapshot used for export. Required only if export is from a snapshot."
    snapshotType: SnapshotType = SOURCE
    "Storage type of the exported RDS DB instance."
    storageType: AwsNativeRdsStorageTypeEnum = NOT_SPECIFIED
    "Name of the subnet group for the new RDS instance."
    subnetGroupName: String = ""
    "List of subnet IDs for the newly created subnet group, which will be associated with the exported RDS DB instance. Default subnet ids are used if empty list is provided here."
    subnetIds: [String!] = []
}

"Input to trigger the Refresh Azure Native Subscriptions job."
input StartRefreshAzureNativeSubscriptionsJobInput {
    "Rubrik IDs of the Azure Native Subscriptions to be refreshed."
    azureSubscriptionRubrikIds: [UUID!]!
}

"Trigger AWS EC2 instance snapshot restore job."
input StartRestoreAwsNativeEc2InstanceSnapshotJobInput {
    "Specifies the power status of the restored EC2 Instance. When true, the EC2 Instance is powered-on after completion of the restore."
    shouldPowerOn: Boolean!
    "Specifies whether to restore associated tags. If true, the restored EC2 Instance will have same tags associated."
    shouldRestoreTags: Boolean!
    "ID of snapshot to restore."
    snapshotId: String!
    "Snapshot type to use if source snapshot is expired."
    snapshotTypeToUseIfSourceExpired: SnapshotTypeToUseIfSourceExpired
}

"Inputs to trigger the job to restore Azure Native Virtual Machine."
input StartRestoreAzureNativeVirtualMachineJobInput {
    "Specifies whether the restored VM is to be launched in powered on state. When false, the restored VM will not be connected to the internet."
    shouldPowerOn: Boolean!
    "Specifies whether the tags at the time of snapshot should also be restored. When true, the tags on the VM will be reverted to the time of the backup."
    shouldRestoreTags: Boolean!
    "Snapshot ID of the snapshot which is to be restored."
    snapshotId: UUID!
    "Snapshot type to use if source snapshot is expired."
    snapshotTypeToUseIfSourceExpired: SnapshotTypeForRestoreIfSourceExpired
}

input StartTimeAttributesInput {
    dayOfWeek: DayOfWeekOptInput
    hour: Int = 0
    minute: Int = 0
}

"Input to stop a job instance."
input StopJobInstanceInput {
    "UUID of the job instance."
    jobInstanceId: String!
}

input SyslogConfigInputType {
    id: Int = 0
    notificationConf: CommonNotificationSettingInputType
    syslogConf: SyslogSettingInputType
}

input SyslogSettingInputType {
    facility: SyslogFacilityTypeEnum = ALL_SYSLOG
    severity: SyslogSeverityTypeEnum = ALL_SEVERITY
}

"TagFilterParams"
input TagFilterParams {
    filterType: TagFilterType = TAG_KEY
    tagKey: String = ""
    tagValue: String = ""
}

input TagInput {
    key: String!
    value: String!
}

"DataType representing tag key-value pair"
input TagType {
    matchAllValues: Boolean!
    tagKey: String!
    tagValue: String!
}

input TagsInput {
    tagList: [TagInput!]!
}

input TargetFilterInput {
    field: TargetQueryFilterFieldEnum = NAME
    text: String = ""
}

input TargetMappingDeleteRequest {
    id: String = ""
}

input TargetMappingFilterInput {
    field: TargetMappingQueryFilterFieldEnum = NAME
    text: String = ""
}

input TargetToClusterMapping {
    clusterUuid: String = ""
    locationId: String = ""
}

"Filter task detail"
input TaskDetailFilterInput {
    clusterLocation: [String!]
    clusterType: [String!]
    clusterUuid: [UUID!]
    objectType: [String!]
    replicationSource: [String!]
    searchTerm: String
    slaDomain: SnappableSlaDomainFilterInput
    taskCategory: [String!]
    taskStatus: [String!]
    taskType: [String!]
    time_gt: DateTime
    time_lt: DateTime
}

"Filter task summary"
input TaskSummaryFilterInput {
    cluster: CommonClusterFilterInput
    objectType: [ObjectTypeEnum!]
    slaDomain: SnappableSlaDomainFilterInput
    time_gt: DateTime
    time_lt: DateTime
}

"Struct representing the Teams Channels to/from be restored"
input TeamsChannelInfo {
    ChannelFolderName: String
    ChannelID: UUID
    ChannelName: String
    ChannelNaturalId: String
    TeamID: UUID!
}

"Struct representing the Teams Channels to/from be restored"
input TeamsConvChannelInfo {
    ChannelFolderId: String
    ChannelFolderName: String
    ChannelID: UUID
    ChannelName: String
    ChannelNaturalId: String
    TeamID: UUID!
}

"Parameters for teams conversations search"
input TeamsConversationsSearchFilter {
    channelNaturalId: String
    convId: String
    "describes whether to send post senders(shouldn't be called by UI)"
    fetchAllPostSenders: String
    includeArchived: Boolean = false
    parentId: String
    postedBy: String
    postedTime: TimeRangeFilter
    snapshotId: String
    snapshotNum: Int
}

"Struct representing the teams conversations search filter"
input TeamsConversationsSearchFilterJson {
    PostedBy: String
    PostedTime: TimeRangeFilterJson
    SnapshotId: String
}

"Struct representing the teams contents to be restored"
input TeamsRestoreConfig {
    ConversationsRestoreConfig: ConversationsRestoreConfig
    DestChannelInfo: TeamsChannelInfo
    FilesRestoreConfig: DriveRestoreConfig
    ShouldCreateDestChannel: Boolean!
}

input TimeFilterInput {
    endTime: String = ""
    startTime: String = ""
    timeDuration: TimeDurationEnum = HOUR
    timezone: String = ""
}

"Timerange filter"
input TimeRangeFilter {
    fromTime: DateTime
    untilTime: DateTime
}

"Struct representing the time range filter"
input TimeRangeFilterJson {
    FromTime: Long
    UntilTime: Long
}

input TimeRangeInput {
    end: DateTime!
    start: DateTime!
}

input UnidirectionalReplicationSpecInput {
    replicationTargetId: String = ""
    retention: Int = 0
    retentionUnit: RetentionUnitEnum = MINUTES
}

input UpdateAwsCloudAccountInput {
    "Action to be taken for cloud account update."
    action: CloudAccountActionEnum!
    "List of regions to be added."
    awsRegions: [AwsCloudAccountRegionEnum!]
    cloudAccountId: UUID!
    "Native protection feature to be updated."
    feature: CloudAccountFeatureEnum!
    "Role ARN for the cloud account."
    roleArn: String = ""
    "Stack ARN for the cloud account."
    stackArn: String = ""
}

"Input for updating an Azure Cloud Account."
input UpdateAzureCloudAccountInput {
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Regions to be added."
    regionsToAdd: [AzureCloudAccountRegionEnum!]
    "Regions to be removed."
    regionsToRemove: [AzureCloudAccountRegionEnum!]
    "Subscriptions to be updated."
    subscriptions: [AzureCloudAccountSubscriptionInput!]!
}

"Input for updateCloudNativeAwsStorageSetting mutation"
input UpdateCloudNativeAwsStorageSettingInput {
    id: UUID!
    kmsMasterKeyId: String
    name: String
    storageClass: AwsStorageClassTypeEnum
}

"Input for updating azure storage settings. Specify old value of the property if no change is intended on the property."
input UpdateCloudNativeAzureStorageSettingInput {
    "ID for the storage setting."
    id: UUID!
    "Name of the storage setting."
    name: String!
    "Tags for the storage account. Old tags are removed and new tags are applied."
    storageAccountTags: TagsInput!
    "Storage tier for the storage account."
    storageTier: AzureStorageTier!
}

"Input request to update details of the Db2 instance."
input UpdateDb2InstanceInput {
    "The id of the Db2 instance."
    id: String!
    "Required. Updates a Db2 Instance's details. Contains parameters like username, list of hosts, password required while adding a Db2 Instance."
    updateProperties: Db2InstancePatchInput!
}

input UpdateLogShippingConfigurationV2Input {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. Configuration parameters for the update operation."
    config: MssqlLogShippingUpdateV2Input!
    "Required. ID of a log shipping configuration object."
    id: String!
}

input UpdateNasSystemInput {
    "Required. ID of the registered NAS system."
    id: String!
    "Required. Properties of the NAS system to update."
    nasSystemUpdateProperties: NasSystemUpdateInput!
}

input UpdateNetworkThrottleInput {
    "Required. UUID used to identify the cluster the request goes to"
    clusterUuid: String!
    "Required. ID assigned to a network throttle object."
    id: String!
    "Required. Configuration changes to apply to a specified network throttle object. Unspecified values are left unchanged."
    throttleUpdate: NetworkThrottleUpdateInput!
}

"Input to set status of IAM user-based AWS cloud account to connected from missing permissions state."
input UpgradeAwsIamUserBasedCloudAccountPermissionsInput {
    "Rubrik ID of cloud account to be upgraded."
    awsCloudAccountId: String!
    "Cloud native features to be upgraded."
    features: [CloudAccountFeatureEnum!]!
}

"Input for upgrading an Azure Cloud Account."
input UpgradeAzureCloudAccountInput {
    "Rubrik IDs of the subscriptions to be upgraded."
    azureSubscriptionRubrikIds: [UUID!]!
    "Features enabled on the Azure Cloud Account."
    features: [CloudAccountFeatureEnum!]!
    "Session ID of the current OAuth session."
    sessionId: String!
}

"Input for upgrading Azure Cloud Account feature to connected state from missing permissions without OAuth."
input UpgradeAzureCloudAccountPermissionsWithoutOauthInput {
    "Rubrik ID of the cloud accounts to upgrade permissions."
    cloudAccountId: UUID!
    "Feature enabled on the Azure Cloud Account, which is currently in Missing Permissions state."
    feature: CloudAccountFeatureEnum!
}

"Input for upgrading GCP Cloud Account feature to connected state from missing permissions without OAuth."
input UpgradeGcpCloudAccountPermissionsWithoutOauthInput {
    "Rubrik ID of the cloud account to upgrade permissions."
    cloudAccountId: UUID!
    "Feature enabled on the GCP Cloud Account, which is currently in Missing Permissions state."
    feature: CloudAccountFeatureEnum!
}

"Filter User Audit data"
input UserAuditFilterInput {
    cluster: CommonClusterFilterInput
    clusterIds: [UUID!]
    searchTerm: String
    status: [UserAuditStatusEnum!]
    time_gt: DateTime
    time_lt: DateTime
    userAuditObjectType: [UserAuditObjectTypeEnum!]
    userAuditSeverity: [UserAuditSeverityEnum!]
    userAuditType: [UserAuditTypeEnum!]
}

input UserGroupToRolesInput {
    roleIds: [String!] = []
    userGroupId: String = ""
}

input UserSettingInputType {
    setting: String = ""
    value: String = ""
}

input UserTimeRangeInput {
    endTime: String = ""
    startTime: String = ""
    timezone: String = ""
}

input VSphereComputeTargetInputType {
    computeClusterCdmId: String = ""
    computeClusterId: String = ""
    computeClusterName: String = ""
    hostCdmId: String = ""
    hostId: String = ""
    hostName: String = ""
    resourcePoolCdmId: String = ""
    resourcePoolId: String = ""
    resourcePoolName: String = ""
    vcenterCdmId: String = ""
    vcenterId: String = ""
    vcenterName: String = ""
}

input VSphereMountFilter {
    clusterUuid: [UUID!]
    name: String
    powerStatus: [Boolean!]
    sourceVmId: UUID
}

input VSphereVMNicSpecInputType {
    adapterType: NetworkAdapterTypeEnum = E1000
    dnsInfos: [String!] = []
    gateway: String = ""
    ipv4Address: String = ""
    ipv6Address: String = ""
    isPrimaryNic: Boolean = false
    key: String = ""
    netmask: String = ""
    networkId: String = ""
    networkMoid: String = ""
    networkType: NetworkTypeEnum = STATIC
}

input VSphereVMRecoverySpecInputType {
    memoryMbs: Int = 0
    nics: [VSphereVMNicSpecInputType!] = []
    target: VSphereComputeTargetInputType
    userData: String = ""
    vcpus: Int = 0
    version: Long = 0
    volumes: [VSphereVMVolumeSpecInputType!] = []
}

input VSphereVMVolumeSpecInputType {
    dataStoreCdmId: String = ""
    dataStoreId: String = ""
    "key value defined in Ebs Volume"
    key: String = ""
    sizeGbs: Int = 0
}

input VSphereVirtualDiskFilter {
    clusterUuid: [UUID!]
    fileName: String
    sourceVmId: UUID
}

input ValidateAndCreateAwsCloudAccountInput {
    "Action to be performed with the cloud account."
    action: CloudAccountActionEnum!
    "Admin account, required for bulk upload."
    awsAdminAccount: AwsCloudAccountInput
    "Details for cloud accounts to be initiated."
    awsChildAccounts: [AwsCloudAccountInput!]!
    "List of features to be enabled for cloud native protection."
    features: [CloudAccountFeatureEnum!]!
}

"Input for validating Exocompute configurations for an Azure Cloud Account."
input ValidateAzureCloudAccountExocomputeConfigurationsInput {
    "List of Exocompute configurations to be validated."
    azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!
    "Rubrik ID of the Azure Cloud Account."
    cloudAccountId: UUID!
}

"Input for ValidateBlueprint."
input ValidateBlueprintInput {
    "Blueprint failover related properties."
    blueprintFailoverProperties: BlueprintFailoverPropertiesInput!
    "Blueprint uuid."
    blueprintId: UUID!
    "List of snappable ids and recovery points."
    childSnappableFailoverInfos: [ChildSnappableFailoverInfoInput!]!
    "Flag to enable recoveries using Rubrik backup agent."
    enableRecoveryWithRba: Boolean
}

"Input for ValidateBlueprints."
input ValidateBlueprintsInput {
    "List of blueprint details."
    blueprintDetails: [ValidateBlueprintInput!]!
}

"""

Supported in v5.3+
"""
input VcenterConfigV2Input {
    """

    Supported in v5.3+
    Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
    """
    caCerts: String
    """

    Supported in v6.0+
    Select compute clusters that must be visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machines that currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
    """
    computeVisibilityFilter: [ClusterVisibilityConfigInput!] = []
    conflictResolutionAuthz: VcenterConfigV2ConflictResolutionAuthzEnum
    """

    Required. Supported in v5.3+
    The hostname of the new vCenter.
    """
    hostname: String!
    """

    Required. Supported in v5.3+
    The password of the new vCenter.
    """
    password: String!
    """

    Required. Supported in v5.3+
    The username of the new vCenter.
    """
    username: String!
}

input VersionInput {
    "Required. Name of the database."
    databaseName: String!
    "Limit number of entries."
    maxEntries: Int
    "Since the given timestamp."
    since: Int
    "Required. Name of the source."
    sourceName: String!
    "Required. Name of the table."
    tableName: String!
    "Upto the given timestamp."
    upto: Int
}

input VmDiskUpdateInput {
    excludeFromSnapshots: Boolean
    virtualDiskFid: UUID!
}

input VmRegisterAgentInput {
    "Required. ID assigned to a virtual machine object."
    id: String!
}

"""

Supported in v5.0+
"""
input VmRestorePathPairInput {
    restorePathPair: RestorePathPairInput
}

"""

Supported in v6.0+
"""
input VmwareNetworkDeviceInfoV2Input {
    """

    Required. Supported in v6.0+
    Device key of the network adapter.
    """
    key: Int!
    """

    Required. Supported in v6.0+
    Name of the network adapter.
    """
    name: String!
}

"""

Supported in v6.0+
"""
input VmwareNetworkInfoV2Input {
    """

    Required. Supported in v6.0+
    MOID of the VMware network.
    """
    moid: String!
    """

    Required. Supported in v6.0+
    Name of the VMware network.
    """
    name: String!
}

"""

Supported in v6.0+
"""
input VmwareVNicBindingInfoV2Input {
    """

    Required. Supported in v6.0+
    Information about the backing network.
    """
    backingNetworkInfo: VmwareNetworkInfoV2Input!
    """

    Required. Supported in v6.0+
    Information about the network device.
    """
    networkDeviceInfo: VmwareNetworkDeviceInfoV2Input!
}

input VmwareVmConfigInput {
    logRetentionSeconds: Long = 0
}

"""

Supported in v5.0+
"""
input VolumeGroupDownloadFilesJobConfigInput {
    """

    Supported in v5.2+
    An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
    """
    legalHoldDownloadConfig: LegalHoldDownloadConfigInput
    """

    Required. Supported in v5.0+
    An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
    """
    paths: [String!]!
}

"Parameters to filter volume group live mount."
input VolumeGroupMountFilter {
    "UUID of the cluster to filter by."
    clusterUuid: [UUID!]
    "Name of the volume group live mount to filter by."
    name: String
    "Id of the source host to filter by."
    sourceHostId: UUID
    "Id of the source volume group to filter by."
    sourceVolumeGroupId: UUID
}

"""

Supported in v5.0+
"""
input VolumeGroupMountSnapshotJobConfigInput {
    """

    Supported in v5.0+
    Domain name of the users that are authenticated to access the SMB share.
    """
    smbDomainName: String
    """

    Supported in v5.0+
    IP address of the hosts that are authenticated to access the SMB share.
    """
    smbValidIps: [String!] = []
    """

    Supported in v5.0+
    Usernames of the users that are authenticated to access the SMB share.
    """
    smbValidUsers: [String!] = []
    """

    Supported in v5.0+
    Only specified if mounting on a specific Host is desired. If not specified, Rubrik will simply expose addresses of SMB mounts per recovered Volume. If a mount point is specified in any of the volumeConfigs, this must be defined. If this is specified, but no mount points are, Rubrik will generate mount paths to mount on the target Host for each volume.
    """
    targetHostId: String
    """

    Required. Supported in v5.0+
    The configuration of the Volumes to be mounted on the Host.
    """
    volumeConfigs: [VolumeGroupVolumeMountConfigInput!]!
}

"""

Supported in v5.0+
"""
input VolumeGroupOnDemandSnapshotConfigInput {
    baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Volumes which we will include in the snapshot. If not passed, the Volumes currently assigned to the Volume Group will be used.
    v5.3+: The unique ID of each volume included in the Volume Group snapshot.
    """
    volumeIdsIncludedInSnapshot: [String!] = []
}

"""

Supported in v5.0+
"""
input VolumeGroupPatchInput {
    """

    Supported in v5.0+
    v5.0-v5.2: Assign this Volume Group to the given SLA domain.
    v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
    """
    configuredSlaDomainId: String
    """

    Supported in v5.1+
    v5.1-v5.2: Boolean value that determines whether to force a full for the next snapshot of a volume group. Use true to force a full and false to use the default. The backup job resets the parameter to false after a successful full snapshot.
    v5.3+: Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.
    """
    forceFull: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
    v5.3+: Indicates whether backup, archival, and replicated is paused for this Volume Group.
    """
    isPaused: Boolean
    """

    Supported in v5.0+
    v5.0-v5.2: IDs of the Volumes which we will include in snapshots. The volume must either currently exist on the host, or already be included in snapshots.
    v5.3: The unique ID of each volume included in the Volume. Group.
    v6.0+: The unique ID of each volume included in the Volume Group.
    """
    volumeIdsIncludedInSnapshots: [String!] = []
}

"""

Supported in v5.0+
"""
input VolumeGroupRestoreFileConfigInput {
    """

    Required. Supported in v5.0+
    Absolute file path.
    """
    path: String!
    """

    Required. Supported in v5.0+
    Target folder for the copied files.
    """
    restorePath: String!
}

"""

Supported in v5.0+
"""
input VolumeGroupRestoreFilesConfigInput {
    """

    Required. Supported in v5.0+
    Directory of folder to copy files into.
    """
    restoreConfigs: [VolumeGroupRestoreFileConfigInput!]!
    """

    Supported in v5.0+
    Windows Host ID to restore files to. If left empty, the host ID of the Volume Group will be used.
    """
    targetHostId: String
}

"""

Supported in v5.0+
"""
input VolumeGroupVolumeMountConfigInput {
    """

    Supported in v5.0+
    The path on the Host on which the Volume will be mounted. It must be either an untaken drive letter name, a directory that does not exist but on a valid drive letter, or an empty directory that already exists.
    """
    mountPointOnHost: String
    """

    Required. Supported in v5.0+
    ID of the Volume to mount.
    """
    volumeId: String!
}

input VolumeIdExclusion {
    isExcluded: Boolean!
    volumeId: String!
}

input WeeklySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfWeek: DayOfWeekEnum = MONDAY
}

input YearlySnapshotScheduleInput {
    basicSchedule: BasicSnapshotScheduleInput
    dayOfYear: DayOfYearEnum = FIRST_DAY
    yearStartMonth: MonthEnum = JANUARY
}

"ClusterConfig for Azure account."
input bootstrapClusterInput {
    adminPassword: String = ""
    awsEsConfig: AwsEsConfigInput
    azureEsConfig: AzureEsConfigInput
    clusterName: String = ""
    clusterUuid: String = ""
    dnsNameServers: [String!]
    dnsSearchDomains: [String!]
    ntpServers: [String!]
    numNodes: Int = 0
    userEmail: String = ""
}

"CDM versions for Azure account."
input cdmVersionRequest {
    cloudAccountId: String = ""
    location: String = ""
}

"ClusterConfig for Azure account."
input clusterConfigInput {
    adminPassword: String = ""
    awsEsConfig: AwsEsConfigInput
    azureEsConfig: AzureEsConfigInputNoSecret
    clusterName: String = ""
    dnsNameServers: [String!]
    dnsSearchDomains: [String!]
    ntpServers: [String!]
    numNodes: Int = 0
    userEmail: String = ""
}

"GCP KMS Crypto Key"
input kmsCryptoKey {
    key: String = ""
    keyRing: String = ""
    location: String = ""
    projectNativeId: String = ""
}

"NsgRequest for Azure account."
input nsgRequest {
    cloudAccountId: String = ""
    resourceGroup: String = ""
}

"SubnetRequest for Azure account."
input subnetRequest {
    cloudAccountId: String = ""
    resourceGroup: String = ""
    vnetName: String = ""
}

"VNetRequest for Azure account."
input vnetRequest {
    cloudAccountId: String = ""
    resourceGroup: String = ""
}


scalar AnyScalar

"DateTime"
scalar DateTime

"The `LocalTimeType` scalar type a time of day (i.e., between 00:00 and 23:59) WITHOUT an associated timezone. The timezone is assumed to be the local timezone, so if you want an explicit timezone you'll need to associate it explicitly."
scalar LocalTime

scalar UUID

"The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long